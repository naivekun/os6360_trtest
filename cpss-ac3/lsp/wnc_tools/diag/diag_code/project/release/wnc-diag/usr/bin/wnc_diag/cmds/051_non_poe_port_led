#!/bin/bash

source $(dirname $0)/sh_funcs/include

prog_name=`basename $0`
SKU=`cat /usr/local/sku`
STAT="off"
SMI_PORTS_LIST_S=""
SMI_PORTS_LIST_E=""
XSMI_PORTS_LIST=""
LOCAL_SOCKET=0

usage() {

echo "Usage:
NAME
       $prog_name - Non-PoE connection LEDs test for all RJ45 ports

SYNOPSIS
       $prog_name [-s status] [-q] [-l] [-h]

DESCRIPTION
       The command is to test Non-PoE connection LEDs (color green) for all
       RJ45 ports. Under the diag test mode, the behavior of LEDs won't depend
       on port status, such as link up/down, but can be controlled by the diag
       command.

       Once the test is done and the user wants to rollback the behavior of
       LEDs, parameter \"-q\" is to quit the diag test mode and restore the PHY
       LED function control register.

MANDATORY OPTIONS
       At least one optional option is needed.

OPTIONAL OPTIONS
       -s    Status to indicate the LED on or off.
             Available option is \"on\" or \"off\".

       -q    To quit the diag test mode and restore the PHY LED function
             control register value to default.

       -l    Send commands to CPSS via local socket.

       -h    Show this help message.

PASS CRITERIA
       - Control green LEDs of all RJ45 ports with correct behavior:
           SUCCESS: green LEDs of RJ45 ports on or off correctly
             Display: \"=== Set all green LEDs of RJ45 ports [ON] ===\"
             or
             Display: \"=== Set all green LEDs of RJ45 ports [OFF] ===\"
             Return code : 0

       - Quit the diag test mode:
           SUCCESS: restore the PHY LED function control register to default
             Display: \"=== Quit the diag test mode ===\"
             Return code : 0

EXAMPLE
       $prog_name -s off
       $prog_name -s on
       $prog_name -q
       $prog_name -s off -l
       $prog_name -s on -l
       $prog_name -q -l
       $prog_name -h
">&2
}

if [ $# -lt 1 ] || [[ "$1" != -* ]]; then
    usage
    res=$FAIL
    exit $res
fi

get_all_rj45_non_poe_ports() {
    case $SKU in
        OS6360-10 | OS6360-P10)
            SMI_PORTS_LIST_S="1"
            SMI_PORTS_LIST_E="10"
            ;;
        OS6360-P24X | OS6360-PH24)
            SMI_PORTS_LIST_S="1"
            SMI_PORTS_LIST_E="24"
            ;;
        OS6360-P48X)
            SMI_PORTS_LIST_S="1"
            SMI_PORTS_LIST_E="46"
            XSMI_PORTS_LIST="47 48"
            ;;
        *) # OS6360-10 or OS6360-P10
            SMI_PORTS_LIST_S="1"
            SMI_PORTS_LIST_E="10"
            ;;
    esac
}

while getopts "s:qlh" arg; do
    case $arg in
        s) # status on or off
            STAT=$OPTARG
            if [ "$STAT" != "on" ] && [ "$STAT" != "off" ]; then
                usage
                res=$FAIL
                exit $res
            fi
            ;;
        q) # to quit diag test mode, set $STAT to "quit" for simplicity
            STAT="quit"
            ;;
        l) # send commands via local socket
            LOCAL_SOCKET=1
            ;;
        h | *) # display usage
            usage
            quit_ok
            ;;
    esac
done

# Check if CPSS is ready
wait_cpss
if [ $? -eq 1 ]; then
    print_fail "CPSS not ready!"
    exit 1
fi

# Get Non-PoE ports list
get_all_rj45_non_poe_ports

#                 P48X           P24X/PH24      10/P10
# -------------------------------------------------------
# dev_0/smi_0  |  port  1~16  |  port  1~16  |  port 1~10
# dev_0/smi_1  |  port 17~24  |  port 17~24  |
# dev_0/xsmi   |  port    48  |              |
# dev_1/smi_0  |  port 25~40  |              |
# dev_1/smi_1  |  port 41~46  |              |
# dev_1/xsmi   |  port    47  |              |
# -------------------------------------------------------

APICMD="do cpss-api call cpssSmiRegisterWriteShort"

rm -f ./tmp_rj45_port_led

if [ $LOCAL_SOCKET -eq 1 ]; then
    # disable PHY anto neg first before changing page
    cpss_set_phy_autoneg "0" "0" "false"
    cpss_set_phy_autoneg "0" "16" "false"
    cpss_set_phy_autoneg "1" "0" "false"
    cpss_set_phy_autoneg "1" "16" "false"
fi

dev="0"
smi="CPSS_PHY_SMI_INTERFACE_0_E"
smi_addr="0"
for ((idx=${SMI_PORTS_LIST_S}; idx<=${SMI_PORTS_LIST_E}; idx++)); do

    if [ "$idx" == "17" ]; then
        smi="CPSS_PHY_SMI_INTERFACE_1_E"
        smi_addr="0"
    fi

    # SKU: OS6360-P48X
    if [ "$idx" == "25" ] && [ "$SKU" == "OS6360-P48X" ]; then
        dev="1"
        smi="CPSS_PHY_SMI_INTERFACE_0_E"
        smi_addr="0"
    elif [ "$idx" == "41" ] && [ "$SKU" == "OS6360-P48X" ]; then
        smi="CPSS_PHY_SMI_INTERFACE_1_E"
        smi_addr="0"
    fi

    if [ $idx -ge 25 ]; then
        portNum=$((idx - 25))
    else
        portNum=$((idx - 1))
    fi

    if [ "$idx" == "9" -o "$idx" == "10" ] && [ "$SKU" == "OS6360-10" -o "$SKU" == "OS6360-P10" ]; then
        # Front port 9 == 0/24, front port 10 = 0/25, PHY 88E1543
        portNum=$((idx + 15))
    fi

    # LED[0](amber) : reg 16_3.3:0
    # LED[1](green) : reg 16_3.7:4
    # 1001(0x9) = Force On
    # 1000(0x8) = Force Off

    if [ $LOCAL_SOCKET -eq 1 ]; then
        # first write page to 0x3
        cpss_1g_phy_register_write $dev $portNum 22 "0x3"

        if [ "$STAT" == "quit" ]; then
            # quit diag test mode
            reg_value=0x1117
            if [ "$idx" == "9" -o "$idx" == "10" ] && [ "$SKU" == "OS6360-10" -o "$SKU" == "OS6360-P10" ]; then
                # LED [0] set to 2'b0001
                reg_value=0x1771
            fi
            cpss_1g_phy_register_write $dev $portNum 16 "$reg_value"
        elif [ "$STAT" == "on" ]; then
            reg_value=0x98
            if [ "$idx" == "9" -o "$idx" == "10" ] && [ "$SKU" == "OS6360-10" -o "$SKU" == "OS6360-P10" ]; then
                reg_value=0x89    # single LED
            fi
            # turn on LEDs
            cpss_1g_phy_register_write $dev $portNum 16 "$reg_value"
        else
            # turn off LEDs
            cpss_1g_phy_register_write $dev $portNum 16 "0x88"
        fi

        # change page back to 0x0
        cpss_1g_phy_register_write $dev $portNum 22 "0x0"
    else

    # first write page to 0x3
    echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 22 data 0x3" >> ./tmp_rj45_port_led

    if [ "$STAT" == "quit" ]; then
        # quit diag test mode
        reg_value=0x1117
        if [ "$idx" == "9" -o "$idx" == "10" ] && [ "$SKU" == "OS6360-10" -o "$SKU" == "OS6360-P10" ]; then
            # LED [0] set to 2'b0001
            reg_value=0x1771
        fi
        echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 16 data $reg_value" >> ./tmp_rj45_port_led

        # need reset PHY to let MAC link up
        echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 22 data 0x0" >> ./tmp_rj45_port_led
        echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 0 data 0x9140" >> ./tmp_rj45_port_led
    elif [ "$STAT" == "on" ]; then
        reg_value=0x98
        if [ "$idx" == "9" -o "$idx" == "10" ] && [ "$SKU" == "OS6360-10" -o "$SKU" == "OS6360-P10" ]; then
            reg_value=0x89    # single LED
        fi
        # turn on LEDs
        echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 16 data $reg_value" >> ./tmp_rj45_port_led
    else
        # turn off LEDs
        echo "$APICMD devNum $dev portGroupsBmp 0 smiInterface $smi smiAddr $smi_addr regAddr 16 data 0x88" >> ./tmp_rj45_port_led
    fi

    fi

    smi_addr=`expr $smi_addr + 1`
done

if [ $LOCAL_SOCKET -eq 1 ]; then
    # enable PHY anto neg again
    cpss_set_phy_autoneg "0" "0" "true"
    cpss_set_phy_autoneg "0" "16" "true"
    cpss_set_phy_autoneg "1" "0" "true"
    cpss_set_phy_autoneg "1" "16" "true"
fi

if [ ! -z "$XSMI_PORTS_LIST" ]; then
    APICMD="do cpss-api call cpssXsmiRegisterWrite"
    xsmi="CPSS_PHY_XSMI_INTERFACE_0_E"
    SOLID_ON="0x00b8"
    SOLID_OFF="0x0000"
    RESTORE_LED0="0x0138"
    RESTORE_LED1="0x0058"
    RESET="0xa01c"

    for idx in $XSMI_PORTS_LIST; do
        if [ "$idx" == "47" ] && [ "$SKU" == "OS6360-P48X" ]; then
            # 88E2010#0
            dev="1"
            xsmi_addr="0x9"
            portNum=27
        elif [ "$idx" == "48" ] && [ "$SKU" == "OS6360-P48X" ]; then
            # 88E2010#1
            dev="0"
            xsmi_addr="0xa"
            portNum=24
        fi

        # LED[0](green) : device 31, reg 0xf020
        # LED[1](amber) : device 31, reg 0xf021

        if [ $LOCAL_SOCKET -eq 1 ]; then
            if [ "$STAT" == "quit" ]; then
                # quit diag test mode
                cpss_10g_phy_register_write $dev $portNum "0xf020" "31" "$xsmi_addr" "$RESTORE_LED0"
                cpss_10g_phy_register_write $dev $portNum "0xf021" "31" "$xsmi_addr" "$RESTORE_LED1"
            elif [ "$STAT" == "on" ]; then
                # turn on LEDs
                cpss_10g_phy_register_write $dev $portNum "0xf020" "31" "$xsmi_addr" "$SOLID_ON"
                cpss_10g_phy_register_write $dev $portNum "0xf021" "31" "$xsmi_addr" "$SOLID_OFF"
            else
                # turn off LEDs
                cpss_10g_phy_register_write $dev $portNum "0xf020" "31" "$xsmi_addr" "$SOLID_OFF"
                cpss_10g_phy_register_write $dev $portNum "0xf021" "31" "$xsmi_addr" "$SOLID_OFF"
            fi
        else

        if [ "$STAT" == "quit" ]; then
            # quit diag test mode
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf020 phyDev 31 data $RESTORE_LED0" >> ./tmp_rj45_port_led
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf021 phyDev 31 data $RESTORE_LED1" >> ./tmp_rj45_port_led

            # SW reset PHY
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf001 phyDev 31 data $RESET" >> ./tmp_rj45_port_led
        elif [ "$STAT" == "on" ]; then
            # turn on LEDs
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf020 phyDev 31 data $SOLID_ON" >> ./tmp_rj45_port_led
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf021 phyDev 31 data $SOLID_OFF" >> ./tmp_rj45_port_led
        else
            # turn off LEDs
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf020 phyDev 31 data $SOLID_OFF" >> ./tmp_rj45_port_led
            echo "$APICMD devNum $dev xsmiInterface $xsmi xsmiAddr $xsmi_addr regAddr 0xf021 phyDev 31 data $SOLID_OFF" >> ./tmp_rj45_port_led
        fi

        fi
    done
fi

if [ $LOCAL_SOCKET -ne 1 ]; then
    cpss_load_config_file "tmp_rj45_port_led" "no_show"
fi

# Display log
if [ "$STAT" == "quit" ]; then
    echo -e "=== Quit the diag test mode ===\n"
elif [ "$STAT" == "on" ]; then
    echo -e "=== Set all green LEDs of RJ45 ports [ON] ===\n"
else
    echo -e "=== Set all green LEDs of RJ45 ports [OFF] ===\n"
fi

quit_ok
