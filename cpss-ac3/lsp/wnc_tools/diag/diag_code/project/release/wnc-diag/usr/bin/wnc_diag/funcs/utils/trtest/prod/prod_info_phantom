#!/bin/bash

LUASH='/usr/bin/mrvl_luash'
COUNTER_RESULT_FILE="metadata/counters_per_port.log"
PORT_ST_RESULT_FILE="metadata/all_port_status.log"

function get_prod_name() {
    #echo "${FUNCNAME[0]}() to be construct.." >&2

    # Remove driver first to prevent conflicting with onie-syseeprom
    if [ -d /sys/bus/i2c/devices/i2c-3/3-0054 ]; then
        echo 0x54 > /sys/bus/i2c/devices/i2c-3/delete_device
    fi
    prod_name="`onie-syseeprom -g 0x21`"
    if [ -n "`echo $prod_name | grep "ERROR"`" ]; then
        # No value in EEPROM
        prod_name="PROD_NA"
    fi
    echo "$prod_name"
}

function get_prod_sn() {
    #echo "${FUNCNAME[0]}() to be construct.." >&2

    # Remove driver first to prevent conflicting with onie-syseeprom
    if [ -d /sys/bus/i2c/devices/i2c-3/3-0054 ]; then
        echo 0x54 > /sys/bus/i2c/devices/i2c-3/delete_device
    fi
    prod_sn="`onie-syseeprom -g 0x23`"
    if [ -n "`echo $prod_sn | grep "ERROR"`" ]; then
        # No value in EEPROM
        prod_sn="SN_NA"
    fi
    echo "$prod_sn"
}

function get_os_info() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character

    #cat -E /etc/*-release >> tmp.log
    echo "" > tmp.log
    cat /etc/*-release >> tmp.log
    cat -E tmp.log; rm -f tmp.log
}

function get_kernel_info() {
    echo "" > tmp.log
    uname -a >> tmp.log
    cat -E tmp.log; rm -f tmp.log
}

function get_sensor_info() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character
    # various data from "sensors" command, that requires lm-sensors
    # package installed, plus extra sensor points in switch chip or
    # somewhere else
    #sensors > tmp.log
    #cat -E tmp.log; rm -f tmp.log

    echo "" > tmp.log
    echo "CPU temperature:" >> tmp.log
    201_cpu_temp -g | sed '/Result:/d' | sed '$d' >> tmp.log
    echo "Memory temperature:" >> tmp.log
    202_mem_1_temp -g 2>&1 | sed '/Result/d' | sed '$d' >> tmp.log
    203_mem_2_temp -g 2>&1 | sed '/Result/d' | sed '$d' >> tmp.log
    echo "" >> tmp.log
    echo "ASIC temperature:" >> tmp.log
    204_mrvl_temp -g >> tmp.log
    cat -E tmp.log; rm -f tmp.log
}

function get_fan_info() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character
    # return present status, RPM

    echo "" > tmp.log
    210_fan_speed -g 0 >> tmp.log
    cat -E tmp.log; rm -f tmp.log
}

function get_psu_info() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character
    # return present status, power good, etc

    echo "" > tmp.log
    224_psu_status -i 1 -g | sed '/Result:/d' | sed '1,2d' | sed '$d' >> tmp.log
    224_psu_status -i 2 -g | sed '/Result:/d' | sed '1,2d' | sed '$d' >> tmp.log
    cat -E tmp.log; rm -f tmp.log
}

function get_port_info() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character
    # return MAC+PHY status from switch driver, plus transceiver EEPROM
    # and DMI data

    # all_port_status.log is generated at prod_stop
    cat $PORT_ST_RESULT_FILE | sed '$d' | sed '$d' > tmp.log
    rm -f $PORT_ST_RESULT_FILE
    cat -E tmp.log; rm -f tmp.log
}

function get_counters() {
    # it is known that $(...) will trim newline character
    # the workaround is to add '$' character (cat -E option) to tail of
    # each line and the caller uses sed 's/\$/\n/g' to replace '$' with
    # newline character
    # return all counters from switch driver

    # counters_per_port.log is generated at prod_stop
    echo "" > tmp.log
    cat $COUNTER_RESULT_FILE >> tmp.log
    rm -f $COUNTER_RESULT_FILE
    cat -E tmp.log; rm -f tmp.log
}

function get_prod_lb_modes() {
    # return all available loopbck modes of the product
    echo "mac phy"
}
