#!/bin/bash

source $(dirname $0)/sh_funcs/include

prog_name=`basename $0`
SKU=`cat /usr/local/sku`
MPP_9_LEVEL="/sys/class/gpio/gpio9/value"
CPLD_SYSFS_PREFIX="/sys/bus/i2c/devices/0-007f"
SFP_ID=0
SFP_ID_LIST=""
BUS_LIST=()
CPLD_RX_LOS_INT_EN_SYSFS_LIST=()
CPLD_TX_FAULT_INT_EN_SYSFS_LIST=()
CPLD_RX_LOS_INT_PENDING_SYSFS_LIST=()
CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST=()
CPLD_MOD_ABS_INT_PENDING_SYSFS_LIST=()
RESULT_RX_LOS_LIST=()
RELEASE_RX_LOS_LIST=()
RESULT_TX_FAULT_LIST=()
RELEASE_TX_FAULT_LIST=()

usage() {
  
  echo "Usage:
NAME
       $prog_name - Verify RX_LOS/TX_FAULT from SFP

SYNOPSIS
       $prog_name [-a] [-p sfp_id] [-h]

DESCRIPTION
       The command is to verify each SFP's RX_LOS/TX_FAULT can be delivered
       to CPU via CPLD.

       Each SFP's RX_LOS/TX_FAULT will be generated by the Optech's LP module.

MANDATORY OPTIONS
       At least one optional option is needed.

OPTIONAL OPTIONS
       -a    Generate RX_LOS/TX_FAULT signal for each SFP and confirm it can be
             delivered to CPU via CPLD.

       -p    Specify SFP ID to generate an RX_LOS/TX_FAULT signal
             For OS6360-10/OS6360-P10:
                 ID 0 is port 11
                 ID 1 is port 12
             For OS6360-P24X/OS6360-PH24:
                 ID 0 is port 25
                 ID 1 is port 26
                 ID 2 is port 27
                 ID 3 is port 28
             For OS6360-P48X:
                 ID 0 is port 49
                 ID 1 is port 50
                 ID 2 is port 51
                 ID 3 is port 52

       -h    Help message

PASS CRITERIA
       - Confirm each SFP's RX_LOS/TX_FAULT signal (-a):
           SUCCESS: Each SFP's RX_LOS/TX_FAULT can be delivered to CPU via CPLD.
             Display: PASS
             Return code : 0

           ERROR: Not each SFP's RX_LOS/TX_FAULT can be delivered to CPU via CPLD.
             Display: FAIL: Following SFP's RX_LOS cannot deliver to CPU.
                      ID 0, 3
             Return code : 1

       - Confirm specific SFP's RX_LOS/TX_FAULT signal (-p)
           SUCCESS: Specified SFP's RX_LOS can be delivered to CPU via CPLD.
             Display: PASS
             Return code : 0

           ERROR:
             (1)Specified SFP's ID is invalid for corresponding SKU.
             Display: FAIL: Invalid SFP ID $SFP_ID for $SKU.
             Return code : 2

             (2)Specified SFP's RX_LOS/TX_FAULT cannot be delivered to CPU via CPLD.
             Display: FAIL: SFP ID x RX_LOS/TX_FAULT cannot deliver to CPU.
             Return code : 3

EXAMPLE
       $prog_name -a
       $prog_name -p 0
  ">&2
}

if [ $# -lt 1 ]; then
  usage
  res=$FAIL
  quit $res
  echo "">&2
fi

get_sfp_id_list() {
  case $SKU in
    OS6360-10 | OS6360-P10)
      SFP_ID_LIST="0 1"
      BUS_LIST=('1' '2')
      CPLD_RX_LOS_INT_EN_SYSFS_LIST=('sfp_0_rx_los_int_en' 'sfp_1_rx_los_int_en')
      CPLD_TX_FAULT_INT_EN_SYSFS_LIST=('sfp_0_tx_fault_int_en' 'sfp_1_tx_fault_int_en')
      CPLD_RX_LOS_INT_PENDING_SYSFS_LIST=('sfp_0_rx_los_pend' 'sfp_1_rx_los_pend')
      CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST=('sfp_0_tx_fault_int_pend' 'sfp_1_tx_fault_int_pend')
      CPLD_MOD_ABS_INT_PENDING_SYSFS_LIST=('sfp_0_int_pending' 'sfp_1_int_pending')
    ;;
    OS6360-P24X | OS6360-PH24 | OS6360-P48X)
      SFP_ID_LIST="0 1 2 3"
      BUS_LIST=('1' '2' '3' '4')
      CPLD_RX_LOS_INT_EN_SYSFS_LIST=('sfp_0_rx_los_int_en' 'sfp_1_rx_los_int_en' 'sfp_plus_0_rx_los_int_en' 'sfp_plus_1_rx_los_int_en')
      CPLD_TX_FAULT_INT_EN_SYSFS_LIST=('sfp_0_tx_fault_int_en' 'sfp_1_tx_fault_int_en' 'sfp_plus_0_tx_fault_int_en' 'sfp_plus_1_tx_fault_int_en')
      CPLD_RX_LOS_INT_PENDING_SYSFS_LIST=('sfp_0_rx_los_pend' 'sfp_1_rx_los_pend' 'sfp_plus_0_rx_los_pend' 'sfp_plus_1_rx_los_pend')
      CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST=('sfp_0_tx_fault_int_pend' 'sfp_1_tx_fault_int_pend' 'sfp_plus_0_tx_fault_int_pend' 'sfp_plus_1_tx_fault_int_pend')
      CPLD_MOD_ABS_INT_PENDING_SYSFS_LIST=('sfp_0_int_pending' 'sfp_1_int_pending' 'sfp_plus_0_int_pending' 'sfp_plus_1_int_pending')
    ;;
    *) # OS6360-10 or OS6360-P10
      SFP_ID_LIST="0 1"
      BUS_LIST=('1' '2')
      CPLD_RX_LOS_INT_EN_SYSFS_LIST=('sfp_0_rx_los_int_en' 'sfp_1_rx_los_int_en')
      CPLD_TX_FAULT_INT_EN_SYSFS_LIST=('sfp_0_tx_fault_int_en' 'sfp_1_tx_fault_int_en')
      CPLD_RX_LOS_INT_PENDING_SYSFS_LIST=('sfp_0_rx_los_pend' 'sfp_1_rx_los_pend')
      CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST=('sfp_0_tx_fault_int_pend' 'sfp_1_tx_fault_int_pend')
    CPLD_MOD_ABS_INT_PENDING_SYSFS_LIST=('sfp_0_int_pending' 'sfp_1_int_pending')      ;;
  esac
  #echo ${BUS_LIST[@]}
  #echo ${CPLD_RX_LOS_INT_EN_SYSFS_LIST[@]}
}

generate_RX_LOS_interrupt() {
  local sfp_id=$1
  local bus_id=${BUS_LIST[$sfp_id]}
  local cpld_rx_los_int_en_sysfs=${CPLD_RX_LOS_INT_EN_SYSFS_LIST[$sfp_id]}
  local cpld_rx_los_int_pending_sysfs=${CPLD_RX_LOS_INT_PENDING_SYSFS_LIST[$sfp_id]}
  local status=0x0
  
  echo Generate RX_LOS for SFP ID $sfp_id "(bus_id=$bus_id cpld_rx_los_int_en_sysfs=$cpld_rx_los_int_en_sysfs)"
  
  # clear pending interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_rx_los_int_pending_sysfs"
  
  # enable CPLD sfp interrupt
  echo 1 > "$CPLD_SYSFS_PREFIX/$cpld_rx_los_int_en_sysfs"
  
  # generate RX_LOS
  status=`i2cget -f -y $bus_id 0x51 0x6e > /dev/null 2>&1`
  i2cset -f -y $bus_id 0x51 0x6f $((status | 0x02)) > /dev/null 2>&1  
  sleep 0.5

  # should be low due to low active
  if check_gpio_level; then
    RESULT_RX_LOS_LIST+=('low ')
  else
    RESULT_RX_LOS_LIST+=('high ')
  fi
}

release_RX_LOS_interrupt() {
  local sfp_id=$1
  local bus_id=${BUS_LIST[$sfp_id]}
  local cpld_rx_los_int_en_sysfs=${CPLD_RX_LOS_INT_EN_SYSFS_LIST[$sfp_id]}
  local cpld_rx_los_int_pending_sysfs=${CPLD_RX_LOS_INT_PENDING_SYSFS_LIST[$sfp_id]}
  
  echo Release RX_LOS for SFP ID $sfp_id "(bus_id=$bus_id cpld_rx_los_int_en_sysfs=$cpld_rx_los_int_en_sysfs)"
  
  # disable CPLD sfp interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_rx_los_int_en_sysfs"
  
  # release RX_LOS
  status=`i2cget -f -y $bus_id 0x51 0x6e > /dev/null 2>&1`
  i2cset -f -y $bus_id 0x51 0x6f $((status & 0xFD)) > /dev/null 2>&1
  sleep 0.5
  
  # clear pending interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_rx_los_int_pending_sysfs"
  
  # should be high due to low active
  if check_gpio_level; then
    RELEASE_RX_LOS_LIST+=('low ')
  else
    RELEASE_RX_LOS_LIST+=('high ')
  fi
}

generate_TX_FAULT_interrupt() {
  local sfp_id=$1
  local bus_id=${BUS_LIST[$sfp_id]}
  local cpld_tx_fault_int_en_sysfs=${CPLD_TX_FAULT_INT_EN_SYSFS_LIST[$sfp_id]}
  local cpld_tx_fault_int_pending_sysfs=${CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST[$sfp_id]}
  local status=0x0
  
  echo Generate TX_FAULT for SFP ID $sfp_id "(bus_id=$bus_id cpld_tx_fault_int_en_sysfs=$cpld_tx_fault_int_en_sysfs)"
  
  # clear pending interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_tx_fault_int_pending_sysfs"
  
  # enable CPLD sfp interrupt
  echo 1 > "$CPLD_SYSFS_PREFIX/$cpld_tx_fault_int_en_sysfs"
  
  # generate TX_FAULT
  status=`i2cget -f -y $bus_id 0x51 0x6e > /dev/null 2>&1`
  i2cset -f -y $bus_id 0x51 0x6f $((status | 0x04)) > /dev/null 2>&1
  sleep 0.5
  
  # should be low due to low active
  if check_gpio_level; then
    RESULT_TX_FAULT_LIST+=('low ')
  else
    RESULT_TX_FAULT_LIST+=('high ')
  fi
}

release_TX_FAULT_interrupt() {
  local sfp_id=$1
  local bus_id=${BUS_LIST[$sfp_id]}
  local cpld_tx_fault_int_en_sysfs=${CPLD_TX_FAULT_INT_EN_SYSFS_LIST[$sfp_id]}
  local cpld_tx_fault_int_pending_sysfs=${CPLD_TX_FAULT_INT_PENDING_SYSFS_LIST[$sfp_id]}
  
  echo Release TX_FAULT for SFP ID $sfp_id "(bus_id=$bus_id cpld_tx_fault_int_en_sysfs=$cpld_tx_fault_int_en_sysfs)"
  
  # disable CPLD sfp interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_tx_fault_int_en_sysfs"
  
  # release TX_FAULT
  status=`i2cget -f -y $bus_id 0x51 0x6e > /dev/null 2>&1`
  i2cset -f -y $bus_id 0x51 0x6f $((status & 0xFB)) > /dev/null 2>&1
  sleep 0.5
  
  # clear pending interrupt
  echo 0 > "$CPLD_SYSFS_PREFIX/$cpld_tx_fault_int_pending_sysfs"
  
  # should be high due to low active
  if check_gpio_level; then
    RELEASE_TX_FAULT_LIST+=('low ')
  else
    RELEASE_TX_FAULT_LIST+=('high ')
  fi
}

check_gpio_level() {
  local level=`cat $MPP_9_LEVEL`
  
  if [  $level -eq 0 ]; then
    #echo MPP_9_LEVEL $level
    return 0
  else
    #echo MPP_9_LEVEL $level
    return 1
  fi
}

confirm_all_result() {
  local sfp_id=0
  local level=""
  local none_lo_list_rx_los=()
  local none_hi_list_rx_los=()
  local none_lo_list_tx_fault=()
  local none_hi_list_tx_fault=()
  
  # ${RESULT_RX_LOS_LIST[@]} should be all 'low'
  for level in "${RESULT_RX_LOS_LIST[@]}"; do
    #echo sfp_id $sfp_id level $level
    if [ $level != low ]; then
      none_lo_list_rx_los+=($sfp_id, )
    fi
    sfp_id=$((sfp_id+1))
  done
  
  # ${RELEASE_RX_LOS_LIST[@]} should be all 'high'
  sfp_id=0
  for level in "${RELEASE_RX_LOS_LIST[@]}"; do
    #echo sfp_id $sfp_id level $level
    if [ $level != high ]; then
      none_hi_list_rx_los+=($sfp_id, )
    fi
    sfp_id=$((sfp_id+1))
  done
  
  # ${RESULT_TX_FAULT_LIST[@]} should be all 'low'
  sfp_id=0
  for level in "${RESULT_TX_FAULT_LIST[@]}"; do
    #echo sfp_id $sfp_id level $level
    if [ $level != low ]; then
      none_lo_list_tx_fault+=($sfp_id, )
    fi
    sfp_id=$((sfp_id+1))
  done
  
  # ${RELEASE_TX_FAULT_LIST[@]} should be all 'high'
  sfp_id=0
  for level in "${RELEASE_TX_FAULT_LIST[@]}"; do
    #echo sfp_id $sfp_id level $level
    if [ $level != high ]; then
      none_hi_list_tx_fault+=($sfp_id, )
    fi
    sfp_id=$((sfp_id+1))
  done
  
  if [ ${#none_lo_list_rx_los[@]} -eq 0 ] && [ ${#none_hi_list_rx_los[@]} -eq 0 ]; then
    if [ ${#none_lo_list_tx_fault[@]} -eq 0 ] && [ ${#none_hi_list_tx_fault[@]} -eq 0 ]; then
      res=$PASS
      quit $res
    fi
  fi
  
  if [ ${#none_lo_list_rx_los[@]} -ne 0 ]; then
    #remove the last ','
    none_lo_list_rx_los[${#none_lo_list_rx_los[@]}-1]=${none_lo_list_rx_los[${#none_lo_list_rx_los[@]}-1]::-1}
    
    if [ ${#RESULT_RX_LOS_LIST[@]} -gt 1 ]; then
      echo "FAIL: Following SFP's RX_LOS cannot deliver to CPU."
      echo "ID ${none_lo_list_rx_los[@]}"
    else
      echo "FAIL: SFP ID $1 RX_LOS cannot deliver to CPU."
    fi
  fi
  
  if [ ${#none_hi_list_rx_los[@]} -ne 0 ]; then
    #remove the last ','
    none_hi_list_rx_los[${#none_hi_list_rx_los[@]}-1]=${none_hi_list_rx_los[${#none_hi_list_rx_los[@]}-1]::-1}
    
    if [ ${#RESULT_RX_LOS_LIST[@]} -gt 1 ]; then
      echo "FAIL: Following SFP's RX_LOS cannot release."
      echo "ID ${none_hi_list_rx_los[@]}"
    else
      echo "FAIL: SFP ID $1 RX_LOS cannot release."
    fi
  fi
  
  if [ ${#none_lo_list_tx_fault[@]} -ne 0 ]; then
    #remove the last ','
    none_lo_list_tx_fault[${#none_lo_list_tx_fault[@]}-1]=${none_lo_list_tx_fault[${#none_lo_list_tx_fault[@]}-1]::-1}
    
    if [ ${#RESULT_TX_FAULT_LIST[@]} -gt 1 ]; then
      echo "FAIL: Following SFP's TX_FAULT cannot deliver to CPU."
      echo "ID ${none_lo_list_tx_fault[@]}"
    else
      echo "FAIL: SFP ID $1 TX_FAULT cannot deliver to CPU."
    fi
  fi
  
  if [ ${#none_hi_list_tx_fault[@]} -ne 0 ]; then
    #remove the last ','
    none_hi_list_tx_fault[${#none_hi_list_tx_fault[@]}-1]=${none_hi_list_tx_fault[${#none_hi_list_tx_fault[@]}-1]::-1}
    
    if [ ${#RESULT_TX_FAULT_LIST[@]} -gt 1 ]; then
      echo "FAIL: Following SFP's TX_FAULT cannot release."
      echo "ID ${none_hi_list_tx_fault[@]}"
    else
      echo "FAIL: SFP ID $1 TX_FAULT cannot release."
    fi
  fi
  
  #echo $SFP_ID_LIST
  #echo ${RESULT_RX_LOS_LIST[@]}
  #echo ${RELEASE_RX_LOS_LIST[@]}
  #echo ${RESULT_TX_FAULT_LIST[@]}
  #echo ${RELEASE_TX_FAULT_LIST[@]}
  
  if [ ${#RESULT_RX_LOS_LIST[@]} -eq 1 ] || [ ${#RESULT_TX_FAULT_LIST[@]} -eq 1 ]; then
    res=3
  else
    res=1
  fi
  
  quit $res
}

while getopts "hap:" arg; do
  case $arg in
    a) # test all phy.
      get_sfp_id_list
      for id in $SFP_ID_LIST; do
        i2cset -f -y ${BUS_LIST[$id]} 0x51 0x6f 0x0 > /dev/null 2>&1
        generate_RX_LOS_interrupt $id
        release_RX_LOS_interrupt $id
        generate_TX_FAULT_interrupt $id
        release_TX_FAULT_interrupt $id
      done
      confirm_all_result
    ;;
    p) # test specific phy id.
      SFP_ID=${OPTARG}
      get_sfp_id_list
      for id in $SFP_ID_LIST; do
        if [ $id -eq $SFP_ID ]; then
          i2cset -f -y ${BUS_LIST[$id]} 0x51 0x6f 0x0 > /dev/null 2>&1
          generate_RX_LOS_interrupt $id
          release_RX_LOS_interrupt $id
          generate_TX_FAULT_interrupt $id
          release_TX_FAULT_interrupt $id
          confirm_all_result $id
        fi
      done
      echo "FAIL: Invalid SFP ID$SFP_ID for $SKU."
      res=2
      quit $res
    ;;
    h | *) # display usage.
      usage
      quit_ok
    ;;
  esac
done
