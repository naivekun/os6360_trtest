###########################################
##                                       ##
##    Top Make file for CPSS drivers     ##
##                                       ##
###########################################

PROJ_NAME = mainPpDrv

include $(USER_BASE)/gtDefsTopMake.mk 


PROJECT_PATH =  $(BASE_PATH) \
                $(COMMON_PATH)\
                $(OS_INCLUDE) \
                $(OS_PATH)\
                $(TM_API_PATH)


#########################################
#  add Black Box Tool configuration path
#########################################

PROJECT_PATH += $(FIS)$(SW_ROOT)/common/h/cpss/extServices/os$(FIE)

ifeq (EXISTS, $(CHX_FAMILY))
AD_CFLAGS += $(FD)CONFIG_DDR3

PROJECT_PATH += $(LABSERVICE_PATH)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/h$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/common/labServices/port/gop/src/portCtrl/h/$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/common/src/cpss/common/labServices/port/gop/h$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/common/src/cpss/common/labServices/port/gop/h/port$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/common/src/cpss/common/labServices/port/gop/src/portCtrl/h$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/common/src/cpss/common/labServices/port/gop/src/port/serdes/avago/aapl/marvell$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/port/gop/h$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/port/gop/h/port$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/ddr/ddr3libv2/h/Driver$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/ddr/ddr3libv2/h/Driver/ddr3$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/ddr/ddr3libv2/h/Silicon$(FIE)
#PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/generic/labServices/ddr/bap/h$(FIE)
PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/dxCh/dxChxGen/config/config88e1690/driver/include$(FIE)
PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/dxCh/dxChxGen/config/config88e1690/driver/include/h/msApi$(FIE)
PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/dxCh/dxChxGen/config/config88e1690/driver/include/h/platform$(FIE)
PROJECT_PATH += $(FIS)$(SW_ROOT)/$(PROJ_NAME)/src/cpss/dxCh/dxChxGen/config/config88e1690/driver/include/h/driver$(FIE)


endif

ifeq (EXISTS,$(RTOS_ON_SIM))
  PROJECT_PATH += $(SIMULATION_PATH)
endif


##############
## CPSS PP  ##
##############

# check if need to use 'GM_USED'.
#needed when 'force' image to use GM.
#also needed for Puma2,3 where use always GM. (for simulation)
ifeq (EXISTS, $(FORCE_GM_USE))
  AD_CFLAGS += $(FD)GM_USED
else
  ifeq (EXISTS, $(PM_FAMILY))
    ifeq (EXISTS, $(ASIC_SIMULATION))
      AD_CFLAGS += $(FD)GM_USED
    endif
  endif
endif

############
## INLINE ##
############
ifeq (A1, $(DRAGONITE_TYPE))
PROJECT_PATH += $(EXT_DRV_SIM_DRAGONITE_PATH)
endif

#################
## DEBUG FLAGS ##
#################
ifdef PRESTERA_DEBUG
CDEBUG = $(FD)PRESTERA_DEBUG
endif

ifeq (DEBUG_ON, $(CPSS_DEBUG))
ifeq (DEBUG_ON, $(CPSS_DEBUG_VLAN))
CDEBUG += $(FD)GT_VLAN_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_FDB))
CDEBUG += $(FD)GT_MAC_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_TRUNK))
CDEBUG += $(FD)GT_TRUNK_DEBUG
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_FDB_DUMP))
CDEBUG += $(FD)GT_MAC_DEBUG_DUMP
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_IPV4))
CDEBUG += $(FD)GT_DEBUG_IPV4
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_IPV6))
CDEBUG += $(FD)GT_DEBUG_IPV6
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_PCL))
CDEBUG += -DGT_DEBUG_PCL
endif
ifeq (DEBUG_ON, $(CPSS_DEBUG_TCM))
CDEBUG += $(FD)GT_DEBUG_TCM
endif
endif


############
## CFLAGS ##
############
ifeq (gnu.host_gcc, $(TOOL).$(TOOLKIT_MAKE_RULES))
  CFLAGS2 += -Wall -Wextra
endif
CFLAGS += $(CFLAGS1) $(CFLAGS2) $(CFLAGS_OPT) $(OS_DEFINE) $(CPU_FLAGS) $(LFLAGS) $(AD_CFLAGS) $(CDEBUG)
ifeq (visual, $(TOOL))
CFLAGS += /W4
endif
        
include $(USER_BASE)/gtTargetsTopMake.mk 

ifeq (visual,$(TOOL))
  #for visual use 'lib_full' instead of 'lib', use 'elf' instead 'onelib'
  ##full: build_dir dep compile lib_full elf
  full: lib_in_one_step
else
  full: onelib
endif

