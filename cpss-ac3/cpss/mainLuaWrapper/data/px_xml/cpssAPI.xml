<?xml version="1.0" encoding="utf-8"?>
<CpssFunctionPrototypes>
 <Functions count="801">
  <Function name="cmdLibInitDDR3" srcpath="common/h/cpss/common/labServices/port/gop/galtisAgent/wrapHws.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cmdLibInitDDR3 function
* @endinternal
*
* @brief   Library database initialization functions.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on failure.
*
* @note none
*
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssBmPoolCreate" srcpath="common/h/cpssCommon/cpssBuffManagerPool.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssBmPoolCreate function
* @endinternal
*
* @brief   Create pool of buffers. All buffers have the same size.
*
* @param[out] pPoolId                  - Return the pool ID
*
* @retval GT_OK                    - For successful operation.
* @retval GT_BAD_VALUE             - Request for zero number of buffers or
*                                       buffer's size is smaller than the size of
*                                       pointer (usually 4 bytes)
* @retval GT_BAD_PTR               - Bad pointer for the pPoolId
* @retval GT_NO_RESOURCE           - No memory is available to create the pool.
* @retval GT_NOT_INITIALIZED       - In case of un-initialized package.
*
* @note Usage of this function is only during FIRST initialization.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="reqBufferSize" type="GT_U32"/>
    <Param class="enum" dir="IN" name="alignment" type="CPSS_BM_POOL_ALIGNMENT_ENT"/>
    <Param class="int" dir="IN" name="numOfBuffers" type="GT_U32"/>
    <Param class="UNKNOWN" dir="OUT" name="pPoolId" type="CPSS_BM_POOL_ID"/>
   </Params>
  </Function>
  <Function name="cpssBmPoolCreateDma" srcpath="common/h/cpssCommon/cpssBuffManagerPool.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssBmPoolCreateDma function
* @endinternal
*
* @brief   Create pool of buffers. All buffers have the same size.
*         The buffers are created in a phsycally contigious area.
*
* @param[out] pPoolId                  - Return the pool ID
*
* @retval GT_OK                    - For successful operation.
* @retval GT_BAD_VALUE             - Request for zero number of buffers or
*                                       buffer's size is smaller than the size of
*                                       pointer (usually 4 bytes)
* @retval GT_BAD_PTR               - Bad pointer for the pPoolId
* @retval GT_NO_RESOURCE           - No memory is available to create the pool.
* @retval GT_NOT_INITIALIZED       - In case of un-initialized package.
*
* @note Usage of this function is only during FIRST initialization.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="reqBufferSize" type="GT_U32"/>
    <Param class="enum" dir="IN" name="alignment" type="CPSS_BM_POOL_ALIGNMENT_ENT"/>
    <Param class="int" dir="IN" name="numOfBuffers" type="GT_U32"/>
    <Param class="UNKNOWN" dir="OUT" name="pPoolId" type="CPSS_BM_POOL_ID"/>
   </Params>
  </Function>
  <Function name="cpssDragoniteInit" srcpath="mainPpDrv/h/cpss/generic/dragonite/cpssGenDragonite.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDragoniteInit function
* @endinternal
*
* @brief   Initialize DRAGONITE management library:
*         get shared memory base pointer from BSP;
*         get system structure and check version compatibility;
*
* @note   APPLICABLE DEVICES:      xCat; xCat3.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; ExMx; Puma2; Puma3.
*
* @param[in] intVectNum               - DRAGONITE interrupt vector number
* @param[in] intMask                  - DRAGONITE interrupt mask
*
* @retval GT_OK                    - on success
* @retval GT_INIT_ERROR            - if major version of firmware isn't
*                                       equal to CPSS_GEN_DRAGONITE_MAJOR_VERSION_CNS
* @retval GT_NOT_READY             - DRAGONITE controller not finished yet
*                                       copy system structure to shared memory
* @retval GT_BAD_STATE             - data received, but not of System type
* @retval GT_BAD_PTR               - if wrong shared mem base addr
*
* @note This call may return NOT_READY if DRAGONITE manager still not initialized
*       application must set some timeout for this case and try again,
*       it can't do nothing DRAGONITE related till this call not succeeded.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="intVectNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="intMask" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDragoniteReadData" srcpath="mainPpDrv/h/cpss/generic/dragonite/cpssGenDragonite.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDragoniteReadData function
* @endinternal
*
* @brief   Read DRAGONITE data structure
*
* @note   APPLICABLE DEVICES:      xCat; xCat3.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; ExMx; Puma2; Puma3.
*
*
* @param[out] dataPtr                  - pointer to structure, that is actually union,
*                                      where to put data read from shared memory.
*                                      Pay attention dataPtr is just memory pointer - any setting in it
*                                      will be ignorred - this function just returns to application
*                                      what it has read from shared memory, it doesn't check if it's
*                                      what application asked in ReadTrigger or Write called before
*                                       --------------------
*                                       Return codes generated by CPSS API itself:
*                                       --------------------
*
* @retval GT_OK                    - on success
* @retval GT_NOT_READY             - DRAGONITE controller not finished yet
*                                       copy data to shared memory
* @retval GT_BAD_PTR               - Illegal pointer value
*                                       ------------------------
*                                       Following errors returned by DRAGONITE controller communication
*                                       protocol:
*                                       ------------------------
* @retval GT_CHECKSUM_ERROR        - checksum error.
* @retval GT_BAD_SIZE              - Structure length error.
* @retval GT_NOT_SUPPORTED         - Structure version mismatch.
* @retval GT_BAD_PARAM             - Unknown Type. When this bit is set,
*                                       there will be no data structure returned, only the
*                                       header.
* @retval GT_OUT_OF_RANGE          - Out of range value in the structure
*                                       data. The DRAGONITE manager will fill the data in the structure
*                                       with zeros as long as the received data was in range. In
*                                       case of data out of range, the received out of range
*                                       data will be returned.
* @retval GT_BAD_STATE             - Config is not allowed - Application can
*                                       send config structure to DRAGONITE controller only once after
*                                       reset.
* @retval GT_ERROR                 - could happen only if there is something in protocol
*                                       that cpss is not aware of
* @retval GT_NOT_INITIALIZED       - DragoniteInit not executed
*                                       COMMENT:
* @retval Just one error code returned at once - error priority list:
* @retval GT_CHECKSUM_ERROR        - highest priority
*                                       GT_BAD_PARAM
*                                       GT_NOT_SUPPORTED
*                                       GT_BAD_SIZE
*                                       GT_BAD_STATE (specific for Config structure)
*                                       GT_OUT_OF_RANGE (fields with wrong size returned in
*                                       dataPtr)
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="OUT" name="data" type="CPSS_GEN_DRAGONITE_DATA_STC"/>
   </Params>
  </Function>
  <Function name="cpssDragoniteReadTrigger" srcpath="mainPpDrv/h/cpss/generic/dragonite/cpssGenDragonite.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDragoniteReadTrigger function
* @endinternal
*
* @brief   Trigger DRAGONITE controller to put in shared memory data of requested type
*
* @note   APPLICABLE DEVICES:      xCat; xCat3.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; ExMx; Puma2; Puma3.
*
* @param[in] type                     -  of data structure application wants to read
*                                      from DRAGONITE MCU
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on unknown type
* @retval GT_NOT_READY             - DRAGONITE controller not finished yet
*                                       previous operation
* @retval GT_NOT_INITIALIZED       - DragoniteInit not executed
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="type" type="CPSS_GEN_DRAGONITE_DATA_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssDragoniteWrite" srcpath="mainPpDrv/h/cpss/generic/dragonite/cpssGenDragonite.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDragoniteWrite function
* @endinternal
*
* @brief   Write DRAGONITE data structure of requested type
*
* @note   APPLICABLE DEVICES:      xCat; xCat3.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; ExMx; Puma2; Puma3.
*
* @param[in] dataPtr                  - pointer to structure that is actually union,
*                                      contain data to send to DRAGONITE controller
*
* @retval GT_OK                    - on success
* @retval GT_NOT_READY             - if shared memory isn't free yet
* @retval GT_BAD_VALUE             - if one of fields exceeds number of bits for field
* @retval GT_BAD_PARAM             - wrong structure type
* @retval GT_NOT_SUPPORTED         - on try to write to Read Only structure type
* @retval GT_NOT_INITIALIZED       - DragoniteInit not executed
*                                       COMMENT:
*                                       after cpssDxChDragoniteWrite application should
*                                       call cpssDxChDragoniteReadData to ensure there was no
* @retval communication error      - it could be done by polling after
*                                       delay or upon write_done interrupt.
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="IN" name="data" type="CPSS_GEN_DRAGONITE_DATA_STC"/>
   </Params>
  </Function>
  <Function name="cpssDrvHwPpResetAndInitControllerGetRegField" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvHwPpResetAndInitControllerGetRegField function
* @endinternal
*
* @brief   Read a selected register field from the Reset and Init Controller.
*
* @param[in] devNum                   - The PP device number to read from.
* @param[in] regAddr                  - The register's address to read from.
* @param[in] fieldOffset              - The start bit number in the register.
* @param[in] fieldLength              - The number of bits to be read.
*
* @param[out] fieldData                - Data to read from the register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldLength" type="GT_U32"/>
    <Param class="int" dir="OUT" name="fieldData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvHwPpResetAndInitControllerReadReg" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvHwPpResetAndInitControllerReadReg function
* @endinternal
*
* @brief   Read a register value from the Reset and Init Controller.
*
* @param[in] devNum                   - The PP to read from.
* @param[in] regAddr                  - The register's address to read from.
*
* @param[out] data                     - Includes the register value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvHwPpResetAndInitControllerSetRegField" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvHwPpResetAndInitControllerSetRegField function
* @endinternal
*
* @brief   Write value to selected register field of the Reset and Init Controller.
*
* @param[in] devNum                   - The PP device number to write to.
* @param[in] regAddr                  - The register's address to write to.
* @param[in] fieldOffset              - The start bit number in the register.
* @param[in] fieldLength              - The number of bits to be written to register.
* @param[in] fieldData                - Data to be written into the register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*
* @note this function actually read the register modifies the requested field
*       and writes the new value back to the HW.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldLength" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvHwPpResetAndInitControllerWriteReg" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvHwPpResetAndInitControllerWriteReg function
* @endinternal
*
* @brief   Write to the Reset and Init Controller given register.
*
* @param[in] devNum                   - The PP to write to.
* @param[in] regAddr                  - The register's address to write to.
* @param[in] data                     - The value to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwInternalPciRegRead" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwInternalPciRegRead function
* @endinternal
*
* @brief   This function reads from an internal pci register, it's used by the
*         initialization process and the interrupt service routine.
* @param[in] devNum                   - The Pp's device numbers.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to read from.
*
* @param[out] data                     - The read data.
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwInternalPciRegWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwInternalPciRegWrite function
* @endinternal
*
* @brief   This function reads from an internal pci register, it's used by the
*         initialization process and the interrupt service routine.
* @param[in] devNum                   - The Pp's device numbers.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to read from.
* @param[in] data                     - Data to be written.
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwIsrWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwIsrWrite function
* @endinternal
*
* @brief   Write a register value using special interrupt address completion region
*
* @param[in] devNum                   - The PP to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to write to.
*                                      data    - The value to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRamInReverseWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRamInReverseWrite function
* @endinternal
*
* @brief   Writes to PP's RAM in reverse.
*
* @param[in] devNum                   - The PP device number to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] addr                     - Address offset to write to.
* @param[in] length                   - Number of Words (4 byte) to write.
* @param[in] data                     - An array containing the  to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="addr" type="GT_U32"/>
    <Param class="int" dir="IN" name="length" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRamRead" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRamRead function
* @endinternal
*
* @brief   Read from PP's RAM.
*
* @param[in] devNum                   - The PP device number to read from.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] addr                     - Address offset to read from.
* @param[in] length                   - Number of Words (4 byte) to read.
*
* @param[out] data                     - An array containing the read data.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="addr" type="GT_U32"/>
    <Param class="int" dir="IN" name="length" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRamWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRamWrite function
* @endinternal
*
* @brief   Writes to PP's RAM.
*
* @param[in] devNum                   - The PP device number to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] addr                     - Address offset to write to.
* @param[in] length                   - Number of Words (4 byte) to write.
* @param[in] data                     - An array containing the  to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="addr" type="GT_U32"/>
    <Param class="int" dir="IN" name="length" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegBitMaskRead" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegBitMaskRead function
* @endinternal
*
* @brief   Reads the unmasked bits of a register.
*
* @param[in] devNum                   - PP device number to read from.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - Register address to read from.
* @param[in] mask                     - Mask for selecting the read bits.
*
* @param[out] dataPtr                  - Data read from register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*
* @note The bits in value to be read are the masked bit of 'mask'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="mask" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegBitMaskWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegBitMaskWrite function
* @endinternal
*
* @brief   Writes the unmasked bits of a register.
*
* @param[in] devNum                   - PP device number to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - Register address to write to.
* @param[in] mask                     - Mask for selecting the written bits.
* @param[in] value                    - Data to be written to register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*
* @note The bits in value to be written are the masked bit of 'mask'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="mask" type="GT_U32"/>
    <Param class="int" dir="IN" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegFieldGet" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegFieldGet function
* @endinternal
*
* @brief   Read a selected register field.
*
* @param[in] devNum                   - The PP device number to read from.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to read from.
* @param[in] fieldOffset              - The start bit number in the register.
* @param[in] fieldLength              - The number of bits to be read.
*
* @param[out] fieldData                - Data to read from the register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldLength" type="GT_U32"/>
    <Param class="int" dir="OUT" name="fieldData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegFieldSet" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegFieldSet function
* @endinternal
*
* @brief   Write value to selected register field.
*
* @param[in] devNum                   - The PP device number to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to write to.
* @param[in] fieldOffset              - The start bit number in the register.
* @param[in] fieldLength              - The number of bits to be written to register.
* @param[in] fieldData                - Data to be written into the register.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*
* @note this function actually read the register modifies the requested field
*       and writes the new value back to the HW.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldLength" type="GT_U32"/>
    <Param class="int" dir="IN" name="fieldData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegisterRead" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegisterRead function
* @endinternal
*
* @brief   Read a register value from the given PP.
*
* @param[in] devNum                   - The PP to read from.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to read from.
*
* @param[out] data                     - Includes the register value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwRegisterWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwRegisterWrite function
* @endinternal
*
* @brief   Write to a PP's given register.
*
* @param[in] devNum                   - The PP to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] regAddr                  - The register's address to write to.
*                                      data    - The value to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwResourceReadRegister" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwResourceReadRegister function
* @endinternal
*
* @brief   Read a register value from a resource.
*
* @param[in] devNum                   - The PP to read from.
* @param[in] portGroupId              - The port group id. relevant only to 'multi-port-groups'
*                                      devices. Supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
*                                      (APPLICABLE DEVICES Lion; Lion2)
* @param[in] resourceType             - The resource type.
* @param[in] regAddr                  - The register's address to read from.
*
* @param[out] dataPtr                  - Includes the register value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="enum" dir="IN" name="resourceType" type="CPSS_DRV_HW_RESOURCE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwResourceWriteRegister" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwResourceWriteRegister function
* @endinternal
*
* @brief   Write to a resource given register.
*
* @param[in] devNum                   - The PP to write to.
* @param[in] portGroupId              - The port group id. relevant only to 'multi-port-groups'
*                                      devices. Supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
*                                      (APPLICABLE DEVICES Lion; Lion2)
* @param[in] resourceType             - The resource type.
* @param[in] regAddr                  - The register's address to write to.
* @param[in] data                     - The value to be written.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="enum" dir="IN" name="resourceType" type="CPSS_DRV_HW_RESOURCE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssDrvPpHwTraceEnable" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwTraceEnable function
* @endinternal
*
* @brief   This function enables/disables to trace hw access.
*
* @param[in] devNum                   - The Pp's device number.
* @param[in] traceType                - trace access type.
* @param[in] enable                   - GT_TRUE:  hw access info tracing
*                                      GT_FALSE: disable hw access info tracing
*                                       None.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="traceType" type="CPSS_DRV_HW_TRACE_TYPE_ENT"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <ExtFunction name="cpssDrvPpHwVectorRead" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwVectorRead function
* @endinternal
*
* @brief   Read from PP's RAM a vector of addresses.
*
* @param[in] devNum                   - The PP device number to read from.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] addrArr[]                - Address array to read from.
* @param[in] arrLen                   - The size of addrArr/dataArr.
*
* @param[out] dataArr[]                - An array containing the read data.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="addrArr" type="GT_U32"/>
    <Param class="int[]" dir="OUT" name="dataArr" type="GT_U32"/>
    <Param class="int" dir="IN" name="arrLen" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssDrvPpHwVectorWrite" srcpath="common/h/cpssDriver/pp/hardware/cpssDriverPpHw.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDrvPpHwVectorWrite function
* @endinternal
*
* @brief   Writes to PP's RAM a vector of addresses.
*
* @param[in] devNum                   - The PP device number to write to.
* @param[in] portGroupId              - The port group Id. relevant only to 'multi-port-groups' devices.
*                                      (APPLICABLE DEVICES Lion; Lion2)
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] addrArr[]                - Address offset to write to.
* @param[in] dataArr[]                - An array containing the data to be written.
* @param[in] arrLen                   - The size of addrArr/dataArr.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="addrArr" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="dataArr" type="GT_U32"/>
    <Param class="int" dir="IN" name="arrLen" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssDxAddPortToListForTest" srcpath="embeddedCommands/dx/dxEC/h/cpssDxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDxAddPortToListForTest function
* @endinternal
*
* @brief   Function adds ports to list of ports for testing
*
* @note   APPLICABLE DEVICES:      xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3.
*
* @param[in] devNum
* @param[in] startPortNum
* @param[in] endPortNum
* @param[in] numberOfLanes
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="startPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="endPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="numberOfLanes" type="GT_U32"/>
   </Params>
  </Function>
  <ExtFunction name="cpssDxChMultiPortsLinkUpDownSimpleTest" srcpath="embeddedCommands/dx/dxEC/h/cpssDxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDxChMultiPortsLinkUpDownSimpleTest function
* @endinternal
*
* @brief   Function sets Link down-up numberOfIterations  times
*          with msecDelay delay
*
* @note   APPLICABLE DEVICES:      xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3.
*
* @param[in] devNum
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_DX_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssDxChMultiPortsUpDownSimpleTest" srcpath="embeddedCommands/dx/dxEC/h/cpssDxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDxChMultiPortsUpDownSimpleTest function
* @endinternal
*
* @brief   Function sets TX down-up numberOfIterations  times
*          with msecDelay delay
*
* @note   APPLICABLE DEVICES:      xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3.
*
* @param[in] devNum
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_DX_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <Function name="cpssDxChPortListForTestCreate" srcpath="embeddedCommands/dx/dxEC/h/cpssDxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssDxChPortListForTestCreate function
* @endinternal
*
* @brief   Function creates list of ports for testing
*
* @note   APPLICABLE DEVICES:      xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3.
*
* @param[in] devNum
* @param[in] startPortNum
* @param[in] endPortNum
* @param[in] numberOfLanes
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="startPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="endPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="numberOfLanes" type="GT_U32"/>
   </Params>
  </Function>
  <ExtFunction name="cpssEventBind" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventBind function
* @endinternal
*
* @brief   This routine binds a user process to unified event. The routine returns
*         a handle that is used when the application wants to wait for the event
*         (cpssEventSelect), receive the event(cpssEventRecv) or transmit a packet
*         using the Network Interface.
*         NOTE : the function does not mask/unmask the HW events in any device.
*         This is Application responsibility to unmask the relevant events
*         on the needed devices , using function cpssEventDeviceMaskSet or
*         cpssEventDeviceMaskWithEvExtDataSet
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] uniEventArr[]            - The unified event list.
* @param[in] arrLength                - The unified event list length.
*
* @param[out] hndlPtr                  - (pointer to) The user handle for the bounded events.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_OUT_OF_CPU_MEM        - failed to allocate CPU memory,
* @retval GT_FULL                  - when trying to set the "tx buffer queue unify event"
*                                       (CPSS_PP_TX_BUFFER_QUEUE_E) with other events in
*                                       the same handler
* @retval GT_ALREADY_EXIST         - one of the unified events already bound to another
*                                       handler (not applicable to CPSS_PP_TX_BUFFER_QUEUE_E)
*/]]>   </Comment>
   <Params>
    <Param class="enum[]" dir="IN" name="uniEventArr" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="IN" name="arrLength" type="GT_U32"/>
    <Param class="int" dir="OUT" name="hndl" type="GT_UINTPTR"/>
   </Params>
  </ExtFunction>
  <Function name="cpssEventDestroy" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventDestroy function
* @endinternal
*
* @brief   This routine destroy the handle , and this handle is not valid any more.
*         The handle could have been create either by cpssEventIsrBind or cpssEventBind
*         API implementation sequence:
*         1. Signal any locked semaphores (so application's task can continue)
*         2. Release dynamic allocations relate to this event.
*         NOTE : the function does not mask/unmask the HW events in any device.
*         This is Application responsibility to unmask the relevant events
*         on the needed devices , using function cpssEventDeviceMaskSet or
*         cpssEventDeviceMaskWithEvExtDataSet
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] hndl                     - The user handle for the bounded events.
*
* @retval GT_OK                    - success
* @retval GT_FAIL                  - general failure
* @retval GT_BAD_PARAM             - bad hndl parameter , the hndl parameter is not legal
*                                       (was not returned by cpssEventBind(...)/cpssEventIsrBind(...))
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="hndl" type="GT_UINTPTR"/>
   </Params>
  </Function>
  <Function name="cpssEventDeviceGenerate" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventDeviceGenerate function
* @endinternal
*
* @brief   This debug routine configures device to generate unified event for
*         specific element in the event associated with extra data.
*
* @note   APPLICABLE DEVICES:      Bobcat2, Caelum, Aldrin, AC3X, Bobcat3, Aldrin2, Falcon.
* @param[in] devNum                   - device number - PP/FA/Xbar device number -
*                                      depend on the uniEvent
*                                      if the uniEvent is in range of PP events , then devNum relate
*                                      to PP
*                                      if the uniEvent is in range of FA events , then devNum relate
*                                      to FA
*                                      if the uniEvent is in range of XBAR events , then devNum relate
*                                      to XBAR
* @param[in] uniEvent                 - The unified event.
* @param[in] evExtData                - The additional data (port num / priority
*                                      queue number / other ) the event was received upon.
*                                      Use CPSS_PARAM_NOT_USED_CNS to generate events for all supported evExtData.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure.
* @retval GT_BAD_PARAM             - bad unify event value or bad device number
* @retval GT_NOT_FOUND             - the unified event has no interrupts associated with it in
*                                       the device Or the 'extra data' has value that not relate
*                                       to the uniEvent
* @retval GT_NOT_INITIALIZED       - the CPSS was not initialized properly to handle
*                                       this type of event
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported unify event
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="uniEvent" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="IN" name="evExtData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssEventDeviceMaskSet" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventDeviceMaskSet function
* @endinternal
*
* @brief   This routine mask/unmasks an unified event on specific device.
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] devNum                   - device number - PP/FA/Xbar device number -
*                                      depend on the uniEvent
*                                      if the uniEvent is in range of PP events , then devNum relate
*                                      to PP
*                                      if the uniEvent is in range of FA events , then devNum relate
*                                      to FA
*                                      if the uniEvent is in range of XBAR events , then devNum relate
*                                      to XBAR
* @param[in] uniEvent                 - The unified event.
* @param[in] operation                - the operation : mask / unmask
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure.
* @retval GT_BAD_PARAM             - bad unify event value or bad device number
* @retval GT_NOT_FOUND             - the unified event has no interrupts associated with it in
*                                       the device
* @retval GT_NOT_INITIALIZED       - the CPSS was not initialized properly to handle
*                                       this type of event
* @retval GT_HW_ERROR              - on hardware error
*
* @note The OS interrupts and the ExtDrv interrupts are locked during the
*       operation of the function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="uniEvent" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="enum" dir="IN" name="operation" type="CPSS_EVENT_MASK_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssEventDeviceMaskWithEvExtDataGet" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventDeviceMaskWithEvExtDataGet function
* @endinternal
*
* @brief   This routine reads mask status of given unified event, for specific port
*         or other constrain defined by extended data.
*         This routine gets data if an unified event on specific device masked or unmasked
*         for specific element in the event associated with extra data.
*         Since Each unified event may be associated with multiple HW interrupts,
*         each HW interrupt has different 'extra data' in the context of the
*         relevant unified event
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] devNum                   - device number - PP/FA/Xbar device number -
*                                      depend on the uniEvent
*                                      if the uniEvent is in range of PP events , then devNum relate
*                                      to PP
*                                      if the uniEvent is in range of FA events , then devNum relate
*                                      to FA
*                                      if the uniEvent is in range of XBAR events , then devNum relate
*                                      to XBAR
* @param[in] uniEvent                 - The unified event.
* @param[in] evExtData                - The additional data (port num / priority
*                                      queue number / other ) the event was received upon.
*
* @param[out] maskedPtr                - is interrupt masked or unmasked
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure.
* @retval GT_BAD_PARAM             - bad unify event value or bad device number
* @retval GT_NOT_FOUND             - the unified event has no interrupts associated with it in
*                                       the device Or the 'extra data' has value that not relate
*                                       to the uniEvent
* @retval GT_NOT_INITIALIZED       - the CPSS was not initialized properly to handle
*                                       this type of event
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on bad pointer
*
* @note The OS interrupts and the ExtDrv interrupts are locked during the
*       operation of the function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="uniEvent" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="IN" name="evExtData" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="masked" type="CPSS_EVENT_MASK_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssEventDeviceMaskWithEvExtDataSet" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventDeviceMaskWithEvExtDataSet function
* @endinternal
*
* @brief   This routine mask/unmasks an unified event on specific device , for
*         specific element in the event associated with extra data.
*         Since Each unified event may be associated with multiple HW interrupts,
*         each HW interrupt has different 'extra data' in the context of the
*         relevant unified event
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] devNum                   - device number - PP/FA/Xbar device number -
*                                      depend on the uniEvent
*                                      if the uniEvent is in range of PP events , then devNum relate
*                                      to PP
*                                      if the uniEvent is in range of FA events , then devNum relate
*                                      to FA
*                                      if the uniEvent is in range of XBAR events , then devNum relate
*                                      to XBAR
* @param[in] uniEvent                 - The unified event.
* @param[in] evExtData                - The additional data (port num / priority
*                                      queue number / other ) the event was received upon.
* @param[in] operation                - the operation : mask / unmask
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure.
* @retval GT_BAD_PARAM             - bad unify event value or bad device number
* @retval GT_NOT_FOUND             - the unified event has no interrupts associated with it in
*                                       the device Or the 'extra data' has value that not relate
*                                       to the uniEvent
* @retval GT_NOT_INITIALIZED       - the CPSS was not initialized properly to handle
*                                       this type of event
* @retval GT_HW_ERROR              - on hardware error
*
* @note The OS interrupts and the ExtDrv interrupts are locked during the
*       operation of the function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="uniEvent" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="IN" name="evExtData" type="GT_U32"/>
    <Param class="enum" dir="IN" name="operation" type="CPSS_EVENT_MASK_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssEventRecv" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventRecv function
* @endinternal
*
* @brief   This function gets general information about the selected unified event.
*         The function retrieve information about the device number that relate to
*         the event , and extra info about port number / priority queue that
*         relate to the event.
*         The function retrieve the info about the first occurrence of this event
*         in the queue.
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] hndl                     - The user handle for the bounded events.
* @param[in] evCause                  - The specified unify event that info about it's first
*                                      waiting occurrence required.
*
* @param[out] evExtDataPtr             (pointer to)The additional data (port num / priority
*                                      queue number) the event was received upon.
* @param[out] evDevPtr                 - (pointer to)The device the event was received upon
*
* @retval GT_OK                    - success
* @retval GT_FAIL                  - general failure
* @retval GT_NO_MORE               - There is no more info to retrieve about the specified
*                                       event .
* @retval GT_BAD_PARAM             - bad hndl parameter ,
*                                    or hndl bound to CPSS_PP_TX_BUFFER_QUEUE_E --> not allowed
*                                    use dedicated "get tx ended info" function instead
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="hndl" type="GT_UINTPTR"/>
    <Param class="enum" dir="IN" name="evCause" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="OUT" name="evExtData" type="GT_U32"/>
    <Param class="int" dir="OUT" name="evDev" type="GT_U8"/>
   </Params>
  </Function>
  <ExtFunction name="cpssEventSelect" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventSelect function
* @endinternal
*
* @brief   This function waiting for one of the events ,relate to the handler,
*         to happen , and gets a list of events (in array of bitmaps format) that
*         occurred .
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] hndl                     - The user handle for the bounded events.
* @param[in] timeoutPtr               - (pointer to) Wait timeout in milliseconds
*                                      NULL pointer means wait forever.
* @param[in] evBitmapArrLength        - The bitmap array length (in words).
*
* @param[out] evBitmapArr[]            - The bitmap array of the received events.
*
* @retval GT_OK                    - success
* @retval GT_FAIL                  - general failure
* @retval GT_TIMEOUT               - when the "time out" requested by the caller expired and no
*                                       event occurred during this period
* @retval GT_BAD_PARAM             - bad hndl parameter , the hndl parameter is not legal
*                                       (was not returned by cpssEventBind(...))
* @retval GT_BAD_PTR               - evBitmapArr parameter is NULL pointer
*                                       (and evBitmapArrLength != 0)
* @retval GT_EMPTY                 - there are no events to retrieve (relevant when timeoutPtr != NULL).
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="hndl" type="GT_UINTPTR"/>
    <Param class="int" dir="IN" name="timeout" type="GT_U32"/>
    <Param class="int[]" dir="OUT" name="evBitmapArr" type="GT_U32"/>
    <Param class="int" dir="IN" name="evBitmapArrLength" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssEventTreatedEventsClear" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventTreatedEventsClear function
* @endinternal
*
* @brief   remove the events from the waiting queue , that already served
*         (Received) and has no new waiting for All Handler event.
*         The events are unified under a Handler received from the CPSS.
*         NOTE : the function protect itself by internal "interrupts lock" in
*         the start of function , and "interrupts unlock" in the end of
*         function.
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] hndl                     - The user handle.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
* @retval GT_BAD_PARAM             - the hndl parameter is not legal
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="hndl" type="GT_UINTPTR"/>
   </Params>
  </Function>
  <ExtFunction name="cpssEventUnBind" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventUnBind function
* @endinternal
*
* @brief   This routine unbinds a user process from unified events.
*         The routine does not delete the associated handlers.
*         NOTE : the function does not mask/unmask the HW events in any device.
*         This is Application responsibility to unmask the relevant events
*         on the needed devices , using function cpssEventDeviceMaskSet or
*         cpssEventDeviceMaskWithEvExtDataSet
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] uniEventArr[]            - The unified event list.
* @param[in] arrLength                - The unified event list length.
*
* @retval GT_OK                    - success
* @retval GT_FAIL                  - general failure
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="enum[]" dir="IN" name="uniEventArr" type="CPSS_UNI_EV_CAUSE_ENT"/>
    <Param class="int" dir="IN" name="arrLength" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssEventWaitingEventsGet" srcpath="common/h/cpss/generic/events/cpssGenEventRequests.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssEventWaitingEventsGet function
* @endinternal
*
* @brief   This function returns a bitmap reflecting the unified events waiting
*         in queue for the user application.
*         the function get the events from the waiting queue.
*         This function should be called after a call to clear already served
*         events (cpssEventTreatedEventsClear).
*         The application receives a bitmap of events that are waiting.
*
* @note   APPLICABLE DEVICES:      All devices (PP / FA / XBAR)
* @param[in] hndl                     - The user handle.
* @param[in] evBitmapLength           - The size of bitmap array in words.
*
* @param[out] evBitmapArr[]            - The updated bitmap array.(can be NULL if
*                                        evBitmapLength == 0 )
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - the hndl parameter is not legal (was not returned by
*                                       cpssEventIsrBind(...))
* @retval GT_NO_MORE               - no events are waiting
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="hndl" type="GT_UINTPTR"/>
    <Param class="int[]" dir="OUT" name="evBitmapArr" type="GT_U32"/>
    <Param class="int" dir="IN" name="evBitmapLength" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssExtServicesBind" srcpath="common/h/cpss/extServices/cpssExtServices.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssExtServicesBind function
* @endinternal
*
* @brief   bind the cpss with OS , external driver functions.
*
* @param[in] extDrvFuncBindInfoPtr    - (pointer to) set of call back functions
* @param[in] osFuncBindPtr            - (pointer to) set of call back functions
* @param[in] traceFuncBindPtr         - (pointer to) set of call back functions
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
*
* @note function must be called by application before phase 1 init
*
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="IN" name="extDrvFuncBindInfo" type="CPSS_EXT_DRV_FUNC_BIND_STC"/>
    <Param class="struct" dir="IN" name="osFuncBind" type="CPSS_OS_FUNC_BIND_STC"/>
    <Param class="struct" dir="IN" name="traceFuncBind" type="CPSS_TRACE_FUNC_BIND_STC"/>
   </Params>
  </Function>
  <Function name="cpssHsuEventHandleUpdate" srcpath="mainPpDrv/h/cpss/generic/systemRecovery/hsu/cpssGenHsu.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssHsuEventHandleUpdate function
* @endinternal
*
* @brief   This function replace old event handle created after regular init
*         to new event handle that application got during HSU.
*
* @note   APPLICABLE DEVICES:      ALL
* @param[in] oldEvReqHndl             - old event  handle created after regular init.
* @param[in] newEvReqHndl             - new event handle  created during HSU.
*
* @retval GT_OK                    - on success.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="oldEvReqHndl" type="GT_U32"/>
    <Param class="int" dir="IN" name="newEvReqHndl" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssHwDriverPrintList" srcpath="common/h/cpss/generic/hwDriver/cpssHwDriverAPI.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssHwDriverPrintList function
* @endinternal
*
* @brief   Print driver registry
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssLogApiFormatSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogApiFormatSet function
* @endinternal
*
* @brief   The function set format for API related log.
*
* @param[in] format                   -  of API related logs.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - bad parameter format
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="format" type="CPSS_LOG_API_FORMAT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssLogEnableSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_VOID">
   <Comment>
<![CDATA[/**
* @internal cpssLogEnableSet function
* @endinternal
*
* @brief   The function enables/disables Log feature.
*
* @param[in] enable                   - GT_TRUE for log  and GT_False for log disable
*                                       None.
*/]]>   </Comment>
   <Params>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssLogHistoryDump" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogHistoryDump function
* @endinternal
*
* @brief   Dump log history database.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - if history log disabled
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssLogLibEnableGet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogLibEnableGet function
* @endinternal
*
* @brief   The function gets the status of specific type of log information for
*         specific lib (enabled/disabled).
* @param[in] lib                      -  to get the log status for.
* @param[in] type                     - log type.
*
* @param[out] enablePtr                - GT_TRUE - log is enabled for the specific lib and log type.
*                                      GT_FALSE - log is enabled for the specific lib and log type.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - bad pointer enablePtr
* @retval GT_BAD_PARAM             - bad parameter lib or type
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="lib" type="CPSS_LOG_LIB_ENT"/>
    <Param class="enum" dir="IN" name="type" type="CPSS_LOG_TYPE_ENT"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssLogLibEnableSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogLibEnableSet function
* @endinternal
*
* @brief   The function enables/disables specific type of log information for
*         specific or all libs.
* @param[in] lib                      -  to enable/disable log for.
* @param[in] type                     - log type.
* @param[in] enable                   - GT_TRUE for log  and GT_FALSE for log disable
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - bad parameter lib or type
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="lib" type="CPSS_LOG_LIB_ENT"/>
    <Param class="enum" dir="IN" name="type" type="CPSS_LOG_TYPE_ENT"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssLogLineNumberEnableSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_VOID">
   <Comment>
<![CDATA[/**
* @internal cpssLogLineNumberEnableSet function
* @endinternal
*
* @brief   The function enables/disables using of a source code line number by
*         some logging functions
* @param[in] enable                   - GT_TRUE - enable, GT_FALSE - disable
*                                       None.
*/]]>   </Comment>
   <Params>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssLogPointerFormatSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_VOID">
   <Comment>
<![CDATA[/**
* @internal cpssLogPointerFormatSet function
* @endinternal
*
* @brief   Set a format of pointer values
*
* @param[in] value                    - a format type
*                                       None.
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="value" type="CPSS_LOG_POINTER_FORMAT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssLogStackSizeSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogStackSizeSet function
* @endinternal
*
* @brief   Defines the size of the stack, how many function will be logged before
*         an error occurred.
* @param[in] size                     - the amount of functions.
*
* @retval GT_OK                    - on success
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="size" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssLogTimeFormatSet" srcpath="common/h/cpss/generic/log/cpssLog.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssLogTimeFormatSet function
* @endinternal
*
* @brief   The function sets log time format.
*
* @param[in] format                   - log time format.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - bad parameter format
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="format" type="CPSS_LOG_TIME_FORMAT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPhyErrataWaExecute" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhySmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPhyErrataWaExecute function
* @endinternal
*
* @brief   This function execute workaround for PHY errata from a selected list.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device Number.
* @param[in] portNum                  - Port Number.
* @param[in] errataWa                 - the selected workaround to execute
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_INITIALIZED       - on not initialized function pointers for
*                                       read and write phy registers operations.
* @retval GT_BAD_PARAM             - on wrong device, port or requested WA
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="errataWa" type="CPSS_PHY_ERRATA_WA_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPortSerdesCyclicAutoTune" srcpath="common/h/cpss/common/port/cpssPortSerdes.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPortSerdesCyclicAutoTune function
* @endinternal
*
* @brief   Set the tune status of the port.
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; xCat2.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*                                      trainDb      - (pointer to) default training database
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on null pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="INOUT" name="cookieEnclosingDB" type="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC"/>
   </Params>
  </Function>
  <Function name="cpssPortSerdesCyclicAutoTuneDefaultsGet" srcpath="common/h/cpss/common/port/cpssPortSerdes.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPortSerdesCyclicAutoTuneDefaultsGet function
* @endinternal
*
* @brief   Get cyclic tune database defaults.
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; xCat2.
*
* @param[in] devNum                   - physical device number
* @param[in] hwsPortMode              - hws port mode
*                                      trainDb      - (pointer to) default training database
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on null pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="hwsPortMode" type="MV_HWS_PORT_STANDARD"/>
    <Param class="struct" dir="INOUT" name="trainSequenceDb" type="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPortSerdesCyclicAutoTuneDefaultsSet" srcpath="common/h/cpss/common/port/cpssPortSerdes.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPortSerdesCyclicAutoTuneDefaultsSet function
* @endinternal
*
* @brief   Set cyclic tune database defaults.
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; xCat2.
*
* @param[in] devNum                   - physical device number
* @param[in] hwsPortMode              - hws port mode
* @param[in,out] trainDb                  - (pointer to) default training database
* @param[in,out] trainDb                  - (pointer to) default training database to be updated
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on null pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="hwsPortMode" type="MV_HWS_PORT_STANDARD"/>
    <Param class="struct" dir="INOUT" name="trainDb" type="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC"/>
   </Params>
  </Function>
  <Function name="cpssPortSerdesCyclicAutoTuneStatusGet" srcpath="common/h/cpss/common/port/cpssPortSerdes.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPortSerdesCyclicAutoTuneStatusGet function
* @endinternal
*
* @brief   Get the tune status of the port.
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; xCat2.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] tune                     -  mode
*
* @param[out] tuneStatusPtr            - (pointer to) status of tune
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on null pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="tune" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
    <Param class="enum" dir="OUT" name="tuneStatus" type="CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPortTxRxDefaultsDbEntryGet" srcpath="common/h/cpss/common/port/cpssPortSerdes.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPortTxRxDefaultsDbEntryGet function
* @endinternal
*
* @brief   Get SerDes RX and TX default parameters.
*
* @note   APPLICABLE DEVICES:      Lion2; Bobcat2; xCat3; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; xCat2.
*
* @param[in] devNum                   - device number
* @param[in] portMode                 - port mode to override the serdes parameters with.
*                                      (APPLICABLE DEVICES Lion2; Bobcat2; xCat3)
* @param[in] serdesSpeed              - SerDes speed/baud rate
*                                      (APPLICABLE DEVICES Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Pipe)
*
* @param[out] txParamsPtr              - tx parameters
* @param[out] ctleParamsPtr            - rx (CTLE) parameters
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, physicalPortNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="portMode" type="MV_HWS_PORT_STANDARD"/>
    <Param class="enum" dir="IN" name="serdesSpeed" type="MV_HWS_SERDES_SPEED"/>
    <Param class="struct" dir="OUT" name="txParams" type="CPSS_PORT_SERDES_TX_CONFIG_STC"/>
    <Param class="struct" dir="OUT" name="ctleParams" type="CPSS_PORT_SERDES_RX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPpCfgNextDevGet" srcpath="common/h/cpss/common/config/cpssGenCfg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpCfgNextDevGet function
* @endinternal
*
* @brief   Return the number of the next existing device.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to start from. For the first one  should be 0xFF.
*
* @param[out] nextDevNumPtr            - number of next device after devNum.
*
* @retval GT_OK                    - on success.
* @retval GT_NO_MORE               - devNum is the last device. nextDevNumPtr will be set to 0xFF.
* @retval GT_BAD_PARAM             - devNum > max device number
* @retval GT_BAD_PTR               - nextDevNumPtr pointer is NULL.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="nextDevNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPpDestroy" srcpath="common/h/cpss/common/init/cpssInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDestroy function
* @endinternal
*
* @brief   This function destroy the internal DB of the CPSS regarding PPs.
*         This function should be called after all devices have been removed from
*         the CPSS and system need to 'clean up' before restart initialization again.
*         so function must be called before recalling cpssPpInit(...)
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - on failure.
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssPpDump" srcpath="common/h/cpss/common/init/cpssInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDump function
* @endinternal
*
* @brief   Dump function , to print the info on a specific PP.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device Number
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PARAM             - on bad device number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPpDumpMemory" srcpath="common/h/cpssDriver/pp/config/generic/cpssDrvPpGenDump.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDumpMemory function
* @endinternal
*
* @brief   This routine print dump of PP memory.
*
* @param[in] devNum                   - PP's device number .
* @param[in] startAddr                - dump start address (will be aligned to 16 bytes)
* @param[in] dumpType                 - dump line format (16 bytes / 8 shorts / or 4 words)
* @param[in] dumpLength               - dump length in bytes
*
* @retval GT_OK                    - on success (memory dumped successfully)
* @retval GT_FAIL                  - on failure. (memory read error)
* @retval GT_BAD_PARAM             - invalid device number
*
* @note 4 lower bits of startAddr will be zeroed (ignored) for alignment
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="startAddr" type="GT_U32"/>
    <Param class="enum" dir="IN" name="dumpType" type="CPSS_MEMORY_DUMP_TYPE_ENT"/>
    <Param class="int" dir="IN" name="dumpLength" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPpDumpPortGroupRegisters" srcpath="common/h/cpssDriver/pp/config/generic/cpssDrvPpGenDump.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDumpPortGroupRegisters function
* @endinternal
*
* @brief   This routine print dump of PP registers.
*
* @param[in] devNum                   - PP's device number .
* @param[in] portGroupId              - The port group Id.
*                                      relevant only to 'multi-port-groups' devices.
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
*
* @retval GT_OK                    - on success (all Registers dumped successfully)
* @retval GT_FAIL                  - on failure. (at least one register read error)
* @retval GT_BAD_PARAM             - invalid device number
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPpDumpPortGroupTables" srcpath="common/h/cpssDriver/pp/config/generic/cpssDrvPpGenDump.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDumpPortGroupTables function
* @endinternal
*
* @brief   This routine print dump of PP tables.
*
* @param[in] devNum                   - PP's device number .
* @param[in] portGroupId              - The port group Id.
*                                      relevant only to 'multi-port-groups' devices.
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
*
* @retval GT_OK                    - on success (all Registers dumped successfully)
* @retval GT_FAIL                  - on failure. (at least one register read error)
* @retval GT_BAD_PARAM             - invalid device number
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPpDumpRegisters" srcpath="common/h/cpssDriver/pp/config/generic/cpssDrvPpGenDump.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpDumpRegisters function
* @endinternal
*
* @brief   This routine print dump of PP registers.
*
* @param[in] devNum                   - PP's device number .
*
* @retval GT_OK                    - on success (all Registers dumped successfully)
* @retval GT_FAIL                  - on failure. (at least one register read error)
* @retval GT_BAD_PARAM             - invalid device number
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPpInit" srcpath="common/h/cpss/common/init/cpssInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpInit function
* @endinternal
*
* @brief   This function initialize the internal DB of the CPSS regarding PPs.
*         This function must be called before any call to a PP functions ,
*         i.e before calling cpssExMxPmHwPpPhase1Init/cpssDxChHwPpPhase1Init.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - on failure.
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssPpInterruptsDisable" srcpath="common/h/cpss/common/cpssHwInit/cpssHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpInterruptsDisable function
* @endinternal
*
* @brief   This API disable PP interrupts
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The device number.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPpPortGroupDumpMemory" srcpath="common/h/cpssDriver/pp/config/generic/cpssDrvPpGenDump.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPpPortGroupDumpMemory function
* @endinternal
*
* @brief   This routine print dump of PP memory.
*
* @param[in] devNum                   - PP's device number .
* @param[in] portGroupId              - The port group Id.
*                                      relevant only to 'multi-port-groups' devices.
*                                      supports value CPSS_PORT_GROUP_UNAWARE_MODE_CNS
* @param[in] startAddr                - dump start address (will be aligned to 16 bytes)
* @param[in] dumpType                 - dump line format (16 bytes / 8 shorts / or 4 words)
* @param[in] dumpLength               - dump length in bytes
*
* @retval GT_OK                    - on success (memory dumped successfully)
* @retval GT_FAIL                  - on failure. (memory read error)
* @retval GT_BAD_PARAM             - invalid device number
*
* @note 4 lower bits of startAddr will be zeroed (ignored) for alignment
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="startAddr" type="GT_U32"/>
    <Param class="enum" dir="IN" name="dumpType" type="CPSS_MEMORY_DUMP_TYPE_ENT"/>
    <Param class="int" dir="IN" name="dumpLength" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxAddPortToListForTest" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxAddPortToListForTest function
* @endinternal
*
* @brief   Function adds ports to list of ports for testing
*
* @note   APPLICABLE DEVICES:      PIPE
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum
* @param[in] startPortNum
* @param[in] endPortNum
* @param[in] numberOfLanes
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="startPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="endPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="numberOfLanes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgCntrGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgCntrGet function
* @endinternal
*
* @brief   Gets the MCFC counters for specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] counterType              - the specific counter type
*
* @param[out] cntPtr                   - pointer to the number of packets that were counted by MCFC unit
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="counterType" type="CPSS_PX_CFG_CNTR_ENT"/>
    <Param class="int" dir="OUT" name="cnt" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgDevEnable" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgDevEnable function
* @endinternal
*
* @brief   This routine sets the device state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to set.
* @param[in] enable                   - GT_TRUE device enable, GT_FALSE disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgDevEnableGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgDevEnableGet function
* @endinternal
*
* @brief   This routine gets the device state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to set.
*
* @param[out] enablePtr                - GT_TRUE device enable, GT_FALSE disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL ptr
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgDevInfoGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgDevInfoGet function
* @endinternal
*
* @brief   the function returns device static information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number
*
* @param[out] devInfoPtr               - (pointer to) device information
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="devInfo" type="CPSS_PX_CFG_DEV_INFO_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgDevRemove" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgDevRemove function
* @endinternal
*
* @brief   Remove the device from the CPSS.
*         This function we release the DB of CPSS that associated with the PP ,
*         and will "know" that the device is not longer valid.
*         This function will not do any HW actions , and therefore can be called
*         before or after the HW was actually removed.
*         After this function is called the devNum is no longer valid for any API
*         until this devNum is used in the initialization sequence for a "new" PP.
*         NOTE: 1. Application may want to disable the Traffic to the CPU prior to
*         this operation (if the device still exists).
*         2. Application may want to a reset the HW PP , and there for need
*         to call the "hw reset" function (before calling this function)
*         and after calling this function to do the initialization
*         sequence all over again for the device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to remove.
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_BAD_PARAM             - wrong dev
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note This API is "ISR safe".The interrupt are disabled on API entry and enabled on API exit
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgHitlessWriteMethodEnableSet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgHitlessWriteMethodEnableSet function
* @endinternal
*
* @brief   Enable/disable hitless write method.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - GT_TRUE:  hitless write method is enable. In this case write operation
*                                      would be performed only if writing data is not equal with
*                                      affected memory contents.
*                                      GT_FALSE: hitless write method is disable. In this case write operation
*                                      is done at any rate.
*
* @retval GT_OK                    - on success
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgHwDevNumGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgHwDevNumGet function
* @endinternal
*
* @brief   Reads HW device number
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] hwDevNumPtr              - Pointer to HW device number
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad device
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="hwDevNum" type="GT_HW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgLastRegAccessTimeStampGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgLastRegAccessTimeStampGet function
* @endinternal
*
* @brief   Gets the last read/write time stamp counter value that represent the exact
*         timestamp of the last read/write operation to the PP registers.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] timeStampValuePtr        - pointer to timestamp of the last read operation.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum or portGroupsBmp
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="timeStampValue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgNextDevGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgNextDevGet function
* @endinternal
*
* @brief   Return the number of the next existing device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to start from. For the first one  should be 0xFF.
*
* @param[out] nextDevNumPtr            - number of next device after devNum.
*
* @retval GT_OK                    - on success.
* @retval GT_NO_MORE               - devNum is the last device. nextDevNumPtr will be set to 0xFF.
* @retval GT_BAD_PARAM             - devNum > max device number
* @retval GT_BAD_PTR               - nextDevNumPtr pointer is NULL.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="nextDevNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgReNumberDevNum" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgReNumberDevNum function
* @endinternal
*
* @brief   function allow the caller to modify the DB of the cpss ,
*         so all info that was 'attached' to 'oldDevNum' will be moved to 'newDevNum'.
*         NOTE:
*         1. there are no HW operations involved in this API.
*         2. This API is "ISR safe".The interrupt are disabled on API entry and enabled on API exit
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] oldDevNum                - old device number
* @param[in] newDevNum                - new device number (APPLICABLE RANGES: 0..127)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - the device oldDevNum not exist
* @retval GT_OUT_OF_RANGE          - the device newDevNum out of range
* @retval GT_ALREADY_EXIST         - the new device number is already used
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
*
* @note This API is "ISR safe".The interrupt are disabled on API entry and enabled on API exit
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="oldDevNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="newDevNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxCfgTableNumEntriesGet" srcpath="mainPxDrv/h/cpss/px/config/cpssPxCfgInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCfgTableNumEntriesGet function
* @endinternal
*
* @brief   the function return the number of entries of each individual table in
*         the HW
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number
* @param[in] table                    - type of the specific table
*
* @param[out] numEntriesPtr            - (pointer to) number of entries
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="table" type="CPSS_PX_TABLE_ENT"/>
    <Param class="int" dir="OUT" name="numEntries" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCncBlockClientEnableGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncBlockClientEnableGet function
* @endinternal
*
* @brief   The function gets bind/unbind of the selected client to a counter block.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
* @param[in] client                   - CNC client.
*
* @param[out] updateEnablePtr          - (pointer to) the client enable to update the block
*                                      GT_TRUE - enable, GT_FALSE - disable
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="client" type="CPSS_PX_CNC_CLIENT_ENT"/>
    <Param class="bool" dir="OUT" name="updateEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCncBlockClientEnableSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncBlockClientEnableSet function
* @endinternal
*
* @brief   The function binds/unbinds the selected client to/from a counter block.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
* @param[in] client                   - CNC client
* @param[in] updateEnable             - the client enable to update the block
*                                      GT_TRUE - enable, GT_FALSE - disable
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="client" type="CPSS_PX_CNC_CLIENT_ENT"/>
    <Param class="bool" dir="IN" name="updateEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCncBlockClientRangesGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncBlockClientRangesGet function
* @endinternal
*
* @brief   The function gets index ranges per CNC client and Block
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
*
* @param[out] indexRangesBmpPtr        - (pointer to) the counter index ranges bitmap
*                                      Pipe has 10 ranges of counter indexes, each 1024
*                                      indexes i.e. 0..1K-1, 1K..2K-1, ,63K..64K-1.
*                                      the n-th bit 1 value maps the n-th index range
*                                      to the block (1024 counters).
*                                      Allowed to map more then one range to the block
*                                      but it will cause updating the same counters via
*                                      different indexes.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="indexRangesBmp" type="GT_U64"/>
   </Params>
  </Function>
  <Function name="cpssPxCncBlockUploadInProcessGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncBlockUploadInProcessGet function
* @endinternal
*
* @brief   The function gets bitmap of numbers of such counters blocks that upload
*         of them yet in process. The HW cannot keep more then one block in such
*         state, but an API matches the original HW representation of the state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] inProcessBlocksBmpPtr    - (pointer to) bitmap of in-process blocks
*                                      value 1 of the bit#n means that CNC upload
*                                      is not finished yet for block n
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_SUPPORTED         - block upload operation not supported.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="inProcessBlocksBmp" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCncBlockUploadTrigger" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncBlockUploadTrigger function
* @endinternal
*
* @brief   The function triggers the Upload of the given counters block.
*         In order to initialize storage needed for uploaded counters,
*         cpssPxCncUploadInit must be called first.
*         An application may check that CNC upload finished by
*         cpssPxCncBlockUploadInProcessGet.
*         An application may sequentially upload several CNC blocks before start
*         to retrieve uploaded counters.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_NOT_INITIALIZED       - cpssPxCncUploadInit not called
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_STATE             - if the previous CNC upload in process.
* @retval GT_NOT_SUPPORTED         - block upload operation not supported.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCncClientByteCountModeGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncClientByteCountModeGet function
* @endinternal
*
* @brief   The function gets byte count mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] client                   - CNC  (APPLICABLE VALUES: CPSS_PX_CNC_CLIENT_EGRESS_QUEUE_PASS_DROP_QCN_E).
*
* @param[out] modePtr                  - (pointer to) byte count mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="client" type="CPSS_PX_CNC_CLIENT_ENT"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_CNC_BYTE_COUNT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncClientByteCountModeSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncClientByteCountModeSet function
* @endinternal
*
* @brief   The function sets byte count mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] client                   - CNC  (APPLICABLE VALUES: CPSS_PX_CNC_CLIENT_EGRESS_QUEUE_PASS_DROP_QCN_E).
* @param[in] mode                     - byte count mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="client" type="CPSS_PX_CNC_CLIENT_ENT"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_CNC_BYTE_COUNT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterClearByReadEnableGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterClearByReadEnableGet function
* @endinternal
*
* @brief   The function gets clear by read mode status of CNC counters read
*         operation.
*         If clear by read mode is disable the counters after read
*         keep the current value and continue to count normally.
*         If clear by read mode is enable the counters load a globally configured
*         value instead of the current value and continue to count normally.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) enable
*                                      GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterClearByReadEnableSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterClearByReadEnableSet function
* @endinternal
*
* @brief   The function enable/disables clear by read mode of CNC counters read
*         operation.
*         If clear by read mode is disable the counters after read
*         keep the current value and continue to count normally.
*         If clear by read mode is enable the counters load a globally configured
*         value instead of the current value and continue to count normally.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterClearByReadValueGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterClearByReadValueGet function
* @endinternal
*
* @brief   The function gets the counter clear by read globally configured value.
*         If clear by read mode is enable the counters load a globally configured
*         value instead of the current value and continue to count normally.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] format                   - CNC counter HW format.
*
* @param[out] counterPtr               - (pointer to) counter contents
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
    <Param class="struct" dir="OUT" name="counter" type="CPSS_PX_CNC_COUNTER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterClearByReadValueSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterClearByReadValueSet function
* @endinternal
*
* @brief   The function sets the counter clear by read globally configured value.
*         If clear by read mode is enable the counters load a globally configured
*         value instead of the current value and continue to count normally.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] format                   - CNC counter HW format.
* @param[in] counterPtr               - (pointer to) counter contents.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
    <Param class="struct" dir="IN" name="counter" type="CPSS_PX_CNC_COUNTER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterFormatGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterFormatGet function
* @endinternal
*
* @brief   The function gets format of CNC counter
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
*
* @param[out] formatPtr                - (pointer to) CNC counter format
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_STATE             - on wrong counting mode read
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*                                       on not supported client for device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterFormatSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterFormatSet function
* @endinternal
*
* @brief   The function sets format of CNC counter
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
* @param[in] format                   - CNC counter format.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterGet function
* @endinternal
*
* @brief   The function gets the counter contents
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
* @param[in] index                    - counter  in the block
*                                      (APPLICABLE RANGES: 0..1023).
* @param[in] format                   - CNC counter HW format.
*
* @param[out] counterPtr               - (pointer to) received CNC counter value.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="enum" dir="IN" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
    <Param class="struct" dir="OUT" name="counter" type="CPSS_PX_CNC_COUNTER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterWraparoundEnableGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterWraparoundEnableGet function
* @endinternal
*
* @brief   The function gets status of wraparound for all CNC counters
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) enable
*                                      GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCncCounterWraparoundEnableSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterWraparoundEnableSet function
* @endinternal
*
* @brief   The function enables/disables wraparound for all CNC counters
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxCncCounterWraparoundIndexesGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncCounterWraparoundIndexesGet function
* @endinternal
*
* @brief   The function gets the counter Wrap Around last 8 indexes
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] blockNum                 - CNC block number (APPLICABLE RANGES: 0..1).
* @param[in,out] indexNumPtr              - (pointer to) maximal size of array of indexes.
* @param[in,out] indexNumPtr              - (pointer to) actual size of array of indexes.
*
* @param[out] indexesArr[]             - (pointer to) array of indexes of counters wrapped around.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The wraparound indexes are cleared on read.
*       Since in the HW each pair of wraparound indexes resides in one register,
*       cleared by read, in case not all the 8 possible indexes are read at once,
*       some data may be lost.
*       Recommendation: Always request 8 indexes => indexNumPtr=8 as input.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="blockNum" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="indexNum" type="GT_U32"/>
    <Param class="int[]" dir="OUT" name="indexesArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxCncEgressQueueClientModeGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncEgressQueueClientModeGet function
* @endinternal
*
* @brief   The function gets Egress Queue client counting mode
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] modePtr                  - (pointer to) Egress Queue client counting mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncEgressQueueClientModeSet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncEgressQueueClientModeSet function
* @endinternal
*
* @brief   The function sets Egress Queue client counting mode
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] mode                     - Egress Queue client counting mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxCncUploadedBlockGet" srcpath="mainPxDrv/h/cpss/px/cnc/cpssPxCnc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCncUploadedBlockGet function
* @endinternal
*
* @brief   The function return a block (array) of CNC counter values,
*         the maximal number of elements defined by the caller.
*         The CNC upload may triggered by cpssPxCncBlockUploadTrigger.
*         The CNC upload transfers whole CNC block (1K CNC counters)
*         to address upload queue. An application must get all transferred
*         counters. An application may sequentially upload several CNC blocks
*         before start to retrieve uploaded counters.
*         The device may transfer only part of CNC block because of DMA queue
*         full. In this case the cpssPxCncUploadedBlockGet may return only part of
*         the CNC block with return GT_OK. An application must to call
*         cpssPxCncUploadedBlockGet one more time to get rest of the block.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in,out] numOfCounterValuesPtr    - (pointer to) maximal number of CNC counters
*                                      values to get.This is the size of
* @param[in] counterValuesPtr         array allocated by caller.
* @param[in] format                   - CNC counter HW format.
* @param[in,out] numOfCounterValuesPtr    - (pointer to) actual number of CNC
*                                      counters values in counterValuesPtr.
*
* @param[out] counterValuesPtr         - (pointer to) array that holds received CNC
*                                      counters values. Array must be allocated by
*                                      caller.
*
* @retval GT_OK                    - on success
* @retval GT_NO_MORE               - the action succeeded and there are no more
*                                       waiting
*                                       CNC counter value
* @retval GT_NOT_READY             - Upload started after upload trigger or
*                                       continued after queue rewind but yet
*                                       not paused due to queue full and yet not finished.
*                                       The part of queue memory does not contain uploaded counters yet.
*                                       No counters retrieved.
* @retval GT_FAIL                  - on failure
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - block upload operation not supported
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="INOUT" name="numOfCounterValues" type="GT_U32"/>
    <Param class="enum" dir="IN" name="format" type="CPSS_PX_CNC_COUNTER_FORMAT_ENT"/>
    <Param class="struct" dir="OUT" name="counterValues" type="CPSS_PX_CNC_COUNTER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosDsaMappingGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosDsaMappingGet function
* @endinternal
*
* @brief   Get CoS Attributes mapping from DSA header.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] dsaIndex                 - CoS bits extracted from packet DSA header.
*                                      (APPLICABLE RANGE: 0..127)
*
* @param[out] cosAttributesPtr         - (Pointer to) CoS Attributes for this index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_DSA'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="dsaIndex" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosDsaMappingSet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosDsaMappingSet function
* @endinternal
*
* @brief   Set CoS Attributes mapping from DSA header.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] dsaIndex                 - CoS bits extracted from packet DSA header.
*                                      (APPLICABLE RANGE: 0..127)
* @param[in] cosAttributesPtr         - (Pointer to) CoS Attributes for this index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_DSA'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="dsaIndex" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosFormatEntryGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosFormatEntryGet function
* @endinternal
*
* @brief   Get CoS Mode and Attributes per Packet Type.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] packetType               - Packet Type.
*                                      (APPLICABLE RANGE: 0..31)
*
* @param[out] cosFormatEntryPtr        - (Pointer to) CoS Format Entry for this packet type.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note packetType is the one obtained from Packet Type lookup.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="OUT" name="cosFormatEntry" type="CPSS_PX_COS_FORMAT_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosFormatEntrySet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosFormatEntrySet function
* @endinternal
*
* @brief   Set CoS Mode and Attributes per Packet Type.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] packetType               - Packet Type.
*                                      (APPLICABLE RANGE: 0..31)
* @param[in] cosFormatEntryPtr        - (Pointer to) CoS Format Entry for this packet type.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note packetType is the one obtained from Packet Type lookup.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="IN" name="cosFormatEntry" type="CPSS_PX_COS_FORMAT_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosL3MappingGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosL3MappingGet function
* @endinternal
*
* @brief   Get CoS Attributes mapping per L3 DSCP.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] l3Index                  - L3 DSCP bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..63)
*
* @param[out] cosAttributesPtr         - (Pointer to) CoS Attributes for this L3 DSCP index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_L3'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="l3Index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosL3MappingSet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosL3MappingSet function
* @endinternal
*
* @brief   Set CoS Attributes mapping per L3 DSCP.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] l3Index                  - L3 DSCP bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..63)
* @param[in] cosAttributesPtr         - (Pointer to) CoS Attributes for this L3 DSCP index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_L3'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="l3Index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosMplsMappingGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosMplsMappingGet function
* @endinternal
*
* @brief   Get CoS Attributes mapping per MPLS EXP.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] mplsIndex                - MPLS EXP bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..7)
*
* @param[out] cosAttributesPtr         - (Pointer to) CoS Attributes for this MPLS EXP index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_MPLS'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="mplsIndex" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosMplsMappingSet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosMplsMappingSet function
* @endinternal
*
* @brief   Set CoS Attributes mapping per MPLS EXP.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] mplsIndex                - MPLS EXP bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..7)
* @param[in] cosAttributesPtr         - (Pointer to) CoS Attributes for this MPLS EXP index.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_MPLS'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="mplsIndex" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosPortAttributesGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosPortAttributesGet function
* @endinternal
*
* @brief   Get CoS Attributes per Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] portNum                  - Source port number.
*
* @param[out] cosAttributesPtr         - (Pointer to) CoS Attributes for this source port.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Port'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosPortAttributesSet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosPortAttributesSet function
* @endinternal
*
* @brief   Set CoS Attributes per Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] portNum                  - Source port number.
* @param[in] cosAttributesPtr         - (Pointer to) CoS Attributes for this source port.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Port'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosPortL2MappingGet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosPortL2MappingGet function
* @endinternal
*
* @brief   Get CoS L2 Attributes mapping per Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] portNum                  - Source port number.
* @param[in] l2Index                  - L2 CoS bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..15)
*
* @param[out] cosAttributesPtr         - (Pointer to) CoS L2 Attributes for this source port.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_L2'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="l2Index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCosPortL2MappingSet" srcpath="mainPxDrv/h/cpss/px/cos/cpssPxCos.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCosPortL2MappingSet function
* @endinternal
*
* @brief   Set CoS L2 Attributes mapping per Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] portNum                  - Source port number.
* @param[in] l2Index                  - L2 CoS bits extracted from packet.
*                                      (APPLICABLE RANGE: 0..15)
* @param[in] cosAttributesPtr         - (Pointer to) CoS L2 Attributes for this source port.
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Mapping used on packet types whose CoS mode is 'Packet_L2'.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="l2Index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughMaxBuffersLimitGet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughMaxBuffersLimitGet function
* @endinternal
*
* @brief   Get max buffers limit for Cut-Through packets.
*         Packets are handled as non-Cut-Through when number of allocated buffers more then limit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] portNum                  - physical port number including CPU port.
* @param[in] devNum                   - device number.
*
* @param[out] buffersLimitPtr          - (pointer to)Max buffers limit for Cut-Through traffic.
*                                      The resolution is one buffer.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_BAD_PTR               - on Null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="buffersLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughMaxBuffersLimitSet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughMaxBuffersLimitSet function
* @endinternal
*
* @brief   Set max buffers limit for Cut-Through packets.
*         Packets are handled as non-Cut-Through when number of allocated buffers more then limit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number including CPU port.
* @param[in] buffersLimit             - Max buffers limit for Cut-Through traffic.
*                                      The resolution is one buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_OUT_OF_RANGE          - on wrong maxSharedBuffersLimit
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="buffersLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughPortEnableGet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughPortEnableGet function
* @endinternal
*
* @brief   Get Cut Through forwarding mode on the specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number including CPU port.
*
* @param[out] enablePtr                - pointer to Cut Through forwarding mode status:
*                                      - GT_TRUE:  Enable the port for Cut Through.
*                                      GT_FALSE: Disable the port for Cut Through.
* @param[out] untaggedEnablePtr        - pointer to Cut Through forwarding mode status
*                                      for untagged packets.
*                                      Used only if enablePtr == GT_TRUE.
*                                      GT_TRUE:  Enable Cut Through forwarding for
*                                      untagged packets received on the port.
*                                      GT_FALSE: Disable Cut Through forwarding for
*                                      untagged packets received on the port.
*                                      Untagged packets for Cut Through purposes - packets
*                                      that don't have VLAN tag or its ethertype isn't equal
*                                      to one of two configurable VLAN ethertypes.
*                                      See cpssPxCutThroughVlanEthertypeSet.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum or port
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="untaggedEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughPortEnableSet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughPortEnableSet function
* @endinternal
*
* @brief   Enable/Disable Cut Through forwarding for packets received on the port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number including CPU port.
* @param[in] enable                   - GT_TRUE:  Enable the port for Cut Through.
*                                      GT_FALSE: Disable the port for Cut Through.
* @param[in] untaggedEnable           -  GT_TRUE:  Enable Cut Through forwarding for
*                                      untagged packets received on the port.
*                                      GT_FALSE: Disable Cut Through forwarding for
*                                      untagged packets received on the port.
*                                      Used only if enable == GT_TRUE.
*                                      Untagged packets for Cut Through purposes - packets
*                                      that don't have VLAN tag or its ethertype isn't equal
*                                      to one of two configurable VLAN ethertypes.
*                                      See cpssPxCutThroughVlanEthertypeSet.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum or port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Cut Through forwarding for tagged packets is enabled
*       per source port and UP. See cpssPxCutThroughUpEnableSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="untaggedEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughUpEnableGet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughUpEnableGet function
* @endinternal
*
* @brief   Get Cut Through forwarding mode for tagged packets
*         with the specified UP.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] up                       - user priority of a VLAN or DSA tagged
*                                      packet (APPLICABLE RANGES: 0..7).
*
* @param[out] enablePtr                - pointer to Cut Through forwarding mode status
*                                      for tagged packets, with the specified UP.:
*                                      - GT_TRUE:  tagged packets, with the specified UP
*                                      may be subject to Cut Through forwarding.
*                                      GT_FALSE: tagged packets, with the specified UP
*                                      aren't subject to Cut Through forwarding.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum or up
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="up" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughUpEnableSet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughUpEnableSet function
* @endinternal
*
* @brief   Enable / Disable tagged packets with the specified UP
*         to be Cut Through.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] up                       - user priority of a VLAN or DSA tagged
*                                      packet (APPLICABLE RANGES: 0..7).
* @param[in] enable                   - GT_TRUE:  tagged packets, with the specified UP
*                                      may be subject to Cut Through forwarding.
*                                      GT_FALSE: tagged packets, with the specified UP
*                                      aren't subject to Cut Through forwarding.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum or up.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The ingress port should be enabled for Cut Through forwarding.
*       Use cpssPxCutThroughPortEnableSet for it.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="up" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughVlanEthertypeGet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughVlanEthertypeGet function
* @endinternal
*
* @brief   Get VLAN Ethertype in order to identify tagged packets.
*         A packed is identified as VLAN tagged for cut-through purposes.
*         Packet considered as tagged if packet's Ethertype equals to one of two
*         configurable VLAN Ethertypes.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] etherType0Ptr            - Pointer to VLAN EtherType0
* @param[out] etherType1Ptr            - Pointer to VLAN EtherType1.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="etherType0" type="GT_U32"/>
    <Param class="int" dir="OUT" name="etherType1" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxCutThroughVlanEthertypeSet" srcpath="mainPxDrv/h/cpss/px/cutThrough/cpssPxCutThrough.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxCutThroughVlanEthertypeSet function
* @endinternal
*
* @brief   Set VLAN Ethertype in order to identify tagged packets.
*         A packed is identified as VLAN tagged for cut-through purposes.
*         Packet considered as tagged if packet's Ethertype equals to one of two
*         configurable VLAN Ethertypes.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] etherType0               - VLAN EtherType0 (APPLICABLE RANGES: 0..0xFFFF)
* @param[in] etherType1               - VLAN EtherType1 (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_OUT_OF_RANGE          - on wrong etherType0 or etherType1
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="etherType0" type="GT_U32"/>
    <Param class="int" dir="IN" name="etherType1" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagAllRegTest" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagAllRegTest function
* @endinternal
*
* @brief   Tests the device read/write ability of all the registers.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The device number
*
* @param[out] testStatusPtr            -is GT_FALSE. Irrelevant if testStatusPtr
* @param[out] badRegPtr                - (pointer to) address of the register which caused the failure if
* @param[out] testStatusPtr            is GT_FALSE. Irrelevant if
*                                      is GT_TRUE.
* @param[out] readValPtr               - (pointer to) value read from the register which caused the
*                                      failure if testStatusPtr is GT_FALSE. Irrelevant if
* @param[out] testStatusPtr            is GT_TRUE
* @param[out] writeValPtr              - (pointer to) value written to the register which caused the
*                                      failure if testStatusPtr is GT_FALSE. Irrelevant if
* @param[out] testStatusPtr            is GT_TRUE
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The test is done by invoking cpssPxDiagRegTest in loop for all the
*       diagnostics registers and for all the patterns.
*       After each register is tested, the original value prior to the test is
*       restored.
*       The function may be called after Phase 1 initialization.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="testStatus" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="badReg" type="GT_U32"/>
    <Param class="int" dir="OUT" name="readVal" type="GT_U32"/>
    <Param class="int" dir="OUT" name="writeVal" type="GT_U32"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxDiagBistResultsGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagBistResultsGet function
* @endinternal
*
* @brief   Retrieve the BIST results.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - PP device number
* @param[in,out] resultsNumPtr        - in: max num of results that can be
*                                           reported due to size limit of resultsArr[].
*                                       out: the number of failures detected.
*                                            Relevant only if BIST failed.
* @param[out] resultsStatusPtr         - (pointer to) the status of the BIST.
* @param[out] resultsArr[]             - (pointer to) the BIST failures.
*                                      Relevant only if BIST failed.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_FAIL                  - on SW error, code that never be reached.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="resultsStatus" type="CPSS_PX_DIAG_BIST_STATUS_ENT"/>
    <Param class="struct[]" dir="OUT" name="resultsArr" type="CPSS_PX_DIAG_BIST_RESULT_STC"/>
    <Param class="int" dir="INOUT" name="resultsNum" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxDiagBistTriggerAllSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagBistTriggerAllSet function
* @endinternal
*
* @brief   Trigger the starting of BIST on device physical RAMs.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                - PP device number
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Triggering the BIST will cause memory content corruption!!!
*       Executing BIST cause multiple CPSS_PP_DATA_INTEGRITY_ERROR_E events
*       which can be masked by the application using cpssEventDeviceMaskSet API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxDiagDataIntegrityEventsGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiagDataIntegrity.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDataIntegrityEventsGet function
* @endinternal
*
* @brief   Function returns array of data integrity events.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - PP device number
* @param[in] evExtData                - event external data
* @param[in,out] eventsNumPtr        - in : max num of enabled events to
*                                      retrieve - this value refer to the number of
*                                      members that the array of eventsArr[]
*                                      can retrieve.
*                                      out: (pointer to) the actual num of found events
*
* @param[out] eventsArr[]              - array of ECC/parity events
* @param[out] isNoMoreEventsPtr        - (pointer to) status of events scan process
*                                      GT_TRUE - no more events found
*                                      GT_FALSE - there are more events found
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device, portGroup
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="evExtData" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="eventsNum" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="eventsArr" type="CPSS_PX_DIAG_DATA_INTEGRITY_EVENT_STC"/>
    <Param class="bool" dir="OUT" name="isNoMoreEvents" type="GT_BOOL"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxDiagDeviceTemperatureGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceTemperatureGet function
* @endinternal
*
* @brief   Gets the PP temperature.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] temperaturePtr           - (pointer to) temperature in Celsius degrees
*                                      (can be negative)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong parameter
* @retval GT_BAD_PTR               - null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="temperature" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagDeviceTemperatureSensorsSelectGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceTemperatureSensorsSelectGet function
* @endinternal
*
* @brief   Get Temperature Sensors Select.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] sensorTypePtr            - Pointer to Sensor type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="sensorType" type="CPSS_PX_DIAG_TEMPERATURE_SENSOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagDeviceTemperatureSensorsSelectSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceTemperatureSensorsSelectSet function
* @endinternal
*
* @brief   Select Temperature Sensors.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] sensorType               - Sensor type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum, sensorType
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="sensorType" type="CPSS_PX_DIAG_TEMPERATURE_SENSOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagDeviceTemperatureThresholdGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceTemperatureThresholdGet function
* @endinternal
*
* @brief   Get Threshold for Interrupt. If Temperature Sensors is equal or above
*         the threshold, interrupt is activated.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] thresholdValuePtr        - pointer to Threshold value in Celsius degrees.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="thresholdValue" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagDeviceTemperatureThresholdSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceTemperatureThresholdSet function
* @endinternal
*
* @brief   Set Threshold for Interrupt. If Temperature Sensors is equal or above
*         the threshold, interrupt is activated.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] thresholdValue           - Threshold value in Celsius degrees.
*                                      APPLICABLE RANGES: -277..198
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_OUT_OF_RANGE          - on wrong thresholdValue
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="thresholdValue" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagDeviceVoltageGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagDeviceVoltageGet function
* @endinternal
*
* @brief   Gets the PP sensor voltage.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] sensorNum                - sensor number (APPLICABLE RANGES: 0..3)
*
* @param[out] voltagePtr               - (pointer to) voltage in milivolts
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong parameter
* @retval GT_BAD_PTR               - null pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="sensorNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="voltage" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPacketGeneratorBurstTransmitStatusGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiagPacketGenerator.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPacketGeneratorBurstTransmitStatusGet function
* @endinternal
*
* @brief   Get burst transmission status on specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] burstTransmitDonePtr     - (pointer to) burst transmit done status
*                                      GT_TRUE:  burst transmission done
*                                      GT_FALSE: burst transmission not done
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_STATE             - on port not connected to packet generator
* @retval GT_NOT_INITIALIZED       - on port is not initialized (interface/speed)
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. Burst transmission status is clear on read.
*       2. Before calling this function the port must be connected to packet
*       generator (cpssPxDiagPacketGeneratorConnectSet),
*       otherwise GT_BAD_STATE is returned.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="burstTransmitDone" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPacketGeneratorConnectGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiagPacketGenerator.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPacketGeneratorConnectGet function
* @endinternal
*
* @brief   Get the connect status of specified port. Get packet generator's
*         configurations.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number to connect its MAC to packet
*                                      generator.
*
* @param[out] connectPtr               - (pointer to) port connection state
*                                      GT_TRUE:  port connected to packet generator.
*                                      GT_FALSE: port not connected to packet generator.
* @param[out] configPtr                - (pointer to) packet generator configurations.
*                                      Relevant only if enable == GT_TRUE
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - on port is not initialized (interface/speed)
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="connect" type="GT_BOOL"/>
    <Param class="struct" dir="OUT" name="config" type="CPSS_PX_DIAG_PG_CONFIGURATIONS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPacketGeneratorConnectSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiagPacketGenerator.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPacketGeneratorConnectSet function
* @endinternal
*
* @brief   Connect/Disconnect port to packet generator. Set packet generator's
*         configurations.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number to connect its MAC to packet
*                                      generator.
* @param[in] connect                  - GT_TRUE:   the given port's MAC to packet
*                                      generator.
*                                      GT_FALSE: disconnect the given port's MAC from
*                                      packet generator; return the port's MAC
*                                      to normal egress pipe.
* @param[in] configPtr                - (pointer to) packet generator configurations.
*                                      Relevant only if enable == GT_TRUE
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - on port is not initialized (interface/speed)
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on not supported port
*
* @note 1. In case packet generator connected to other port the function perfroms
*       the following:
*       - stops traffic.
*       - connects packet generator to new port
*       - overrides packet generator's configurations
*       2. Before enabling the packet generator, port must be initialized,
*       i.e. port interface and speed must be set.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="connect" type="GT_BOOL"/>
    <Param class="struct" dir="IN" name="config" type="CPSS_PX_DIAG_PG_CONFIGURATIONS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPacketGeneratorTransmitEnable" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiagPacketGenerator.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPacketGeneratorTransmitEnable function
* @endinternal
*
* @brief   Enable/Disable(Start/Stop) transmission on specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] enable                   - GT_TRUE:   (start) transmission
*                                      GT_FALSE: disable (stop) transmission
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_STATE             - on port not connected to packet generator
* @retval GT_NOT_INITIALIZED       - on port is not initialized (interface/speed)
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on not supported port
*
* @note 1. Before calling this function the port must be connected to packet
*       generator (cpssPxDiagPacketGeneratorConnectSet),
*       otherwise GT_BAD_STATE is returned.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxDiagPrbsCyclicDataGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsCyclicDataGet function
* @endinternal
*
* @brief   Get cylic data for transmition. See cpssPxDiagPrbsPortTransmitModeSet.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number
*
* @param[out] cyclicDataArr[4]         - cyclic data array
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for the XAUI/HGS ports.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="int[4]" dir="OUT" name="cyclicDataArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxDiagPrbsCyclicDataSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsCyclicDataSet function
* @endinternal
*
* @brief   Set cylic data for transmition. See cpssPxDiagPrbsPortTransmitModeSet.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number
* @param[in] cyclicDataArr[4]         - cyclic data array
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for the XAUI/HGS ports.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="int[4]" dir="IN" name="cyclicDataArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxDiagPrbsPortCheckEnableGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortCheckEnableGet function
* @endinternal
*
* @brief   Get the status (enabled or disabled) of PRBS (Pseudo Random Bit Generator)
*         checker per port and per lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
*
* @param[out] enablePtr                - (pointer to) PRBS checker state.
*                                      GT_TRUE - PRBS checker is enabled
*                                      GT_FALSE - PRBS checker is disabled
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for Tri-speed and XAUI/HGS ports of all Px devices.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortCheckEnableSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortCheckEnableSet function
* @endinternal
*
* @brief   Enable/Disable PRBS (Pseudo Random Bit Generator) checker per port and
*         per lane.
*         When the checker is enabled, it seeks to lock onto the incoming bit
*         stream, and once this is achieved the PRBS checker starts counting the
*         number of bit errors. Tne number of errors can be retrieved by
*         cpssPxDiagPrbsGigPortStatusGet API.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
* @param[in] enable                   - GT_TRUE - PRBS checker is enabled
*                                      GT_FALSE - PRBS checker is disabled
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for Tri-speed and XAUI/HGS ports of all Px devices.
*       When operating, enable the PRBS checker before the generator.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortCheckReadyGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortCheckReadyGet function
* @endinternal
*
* @brief   Get the PRBS checker ready status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] isReadyPtr               - (pointer to) PRBS checker state.
*                                      GT_TRUE - PRBS checker is ready.
*                                      PRBS checker has completed the initialization phase.
*                                      GT_FALSE - PRBS checker is not ready.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for the Tri-speed ports.
*       The Check ready status indicates that the PRBS checker has completed
*       the initialization phase. The PRBS generator at the transmit side may
*       be enabled.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isReady" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortGenerateEnableGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortGenerateEnableGet function
* @endinternal
*
* @brief   Get the status of PRBS (Pseudo Random Bit Generator) pattern generation
*         per port and per lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
*
* @param[out] enablePtr                - GT_TRUE - PRBS pattern generation is enabled
*                                      GT_FALSE - PRBS pattern generation is disabled
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for Tri-speed and XAUI/HGS ports of all Px devices.
*       CPU port doesn't support the transmit mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortGenerateEnableSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortGenerateEnableSet function
* @endinternal
*
* @brief   Enable/Disable PRBS (Pseudo Random Bit Generator) pattern generation
*         per Port and per lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
* @param[in] enable                   - GT_TRUE - PRBS pattern generation is enabled
*                                      GT_FALSE - PRBS pattern generation is disabled
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for Tri-speed ports of all Px devices
*       When operating, enable the PRBS checker before the generator.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortStatusGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortStatusGet function
* @endinternal
*
* @brief   Get PRBS (Pseudo Random Bit Generator) Error Counter and Checker Locked
*         status per port and per lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
*
* @param[out] checkerLockedPtr         - (pointer to) checker locked state.
*                                      GT_TRUE - checker is locked on the sequence stream.
*                                      GT_FALSE - checker isn't locked on the sequence
*                                      stream.
* @param[out] errorCntrPtr             - (pointer to) PRBS Error counter. This counter represents
*                                      the number of bit mismatches detected since
*                                      the PRBS checker of the port has locked.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note PRBS Error counter is cleared on read.
        Applicable only for Tri-speed and XAUI/HGS ports of all Px devices.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="checkerLocked" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="errorCntr" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortTransmitModeGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortTransmitModeGet function
* @endinternal
*
* @brief   Get transmit mode for specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
*
* @param[out] modePtr                  - (pointer to) transmit mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_DIAG_TRANSMIT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsPortTransmitModeSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsPortTransmitModeSet function
* @endinternal
*
* @brief   Set transmit mode for specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, relevant only for XAUI/HGS port
* @param[in] mode                     - transmit mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or mode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this device type.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable only for Tri-speed and XAUI/HGS ports of all Px devices.
*       CPU port doesn't support the transmit mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_DIAG_TRANSMIT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesCounterClearOnReadEnableGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesCounterClearOnReadEnableGet function
* @endinternal
*
* @brief   Get Prbs Counter Clear on read enable or disable status per port and lane
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number
*
* @param[out] enablePtr                - (pointer to) enable
*                                      GT_TRUE - enable, GT_FALSE - disable
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesCounterClearOnReadEnableSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesCounterClearOnReadEnableSet function
* @endinternal
*
* @brief   Enable or disable Prbs Counter Clear on read status per port and lane
*         Can be run after port creation.
*         After port reconfiguration (cpssPxPortModeSpeedSet) Should be run once again.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number
* @param[in] enable                   - GT_TRUE - enable, GT_FALSE - disable
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesStatusGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesStatusGet function
* @endinternal
*
* @brief   Get SERDES PRBS (Pseudo Random Bit Generator) pattern detector state,
*         error counter and pattern counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, (APPLICABLE RANGES: 0..3)
*
* @param[out] lockedPtr                - (pointer to) Pattern detector state.
*                                      GT_TRUE - Pattern detector had locked onto the pattern.
*                                      GT_FALSE - Pattern detector is not locked onto
*                                      the pattern.
* @param[out] errorCntrPtr             - (pointer to) PRBS Error counter. This counter represents
*                                      the number of bit mismatches detected since
*                                      the PRBS checker of the port has locked.
* @param[out] patternCntrPtr           - (pointer to) Pattern counter. Number of 40-bit patterns
*                                      received since acquiring pattern lock.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number, device or lane number
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="locked" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="errorCntr" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="patternCntr" type="GT_U64"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesTestEnableGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesTestEnableGet function
* @endinternal
*
* @brief   Get the status of PRBS (Pseudo Random Bit Generator) test mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, (APPLICABLE RANGES: 0..3)
*
* @param[out] enablePtr                - GT_TRUE - test enabled
*                                      GT_FALSE - test disabled
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number, device or lane number
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesTestEnableSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesTestEnableSet function
* @endinternal
*
* @brief   Enable/Disable SERDES PRBS (Pseudo Random Bit Generator) test mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, (APPLICABLE RANGES: 0..3)
* @param[in] enable                   - GT_TRUE - test enabled
*                                      GT_FALSE - test disabled
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong port number, device or lane number
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.Transmit mode should be set before enabling test mode.
*       See test cpssPxDiagPrbsSerdesTransmitModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesTransmitModeGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesTransmitModeGet function
* @endinternal
*
* @brief   Get transmit mode for SERDES PRBS on specified port/lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, (APPLICABLE RANGES: 0..3)
*
* @param[out] modePtr                  - transmit mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device or lane number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_STATE             - on unkonown transmit mode
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_DIAG_TRANSMIT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagPrbsSerdesTransmitModeSet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagPrbsSerdesTransmitModeSet function
* @endinternal
*
* @brief   Set transmit mode for SERDES PRBS on specified port/lane.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - lane number, (APPLICABLE RANGES: 0..3)
* @param[in] mode                     - transmit mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device or lane number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - request is not supported for this port type
*                                       or unsupported transmit mode.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_DIAG_TRANSMIT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagRegRead" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagRegRead function
* @endinternal
*
* @brief   Performs single 32 bit data read from one of the PP PCI configuration or
*         registers.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] baseAddr                 - The base address to access the device
* @param[in] ifChannel                - interface channel (PCI/SMI/TWSI)
* @param[in] regType                  - The register type
* @param[in] offset                   - the register offset
* @param[in] doByteSwap               - GT_TRUE:  byte swap will be done on the read data
*                                      GT_FALSE: byte swap will not be done on the read data
*
* @param[out] dataPtr                  - read data
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong input parameter
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note The function may be called before Phase 1 initialization and
*       can NOT be used after cpssHwPpPhase1 to read/write registers
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="baseAddr" type="GT_UINTPTR"/>
    <Param class="enum" dir="IN" name="ifChannel" type="CPSS_PP_INTERFACE_CHANNEL_ENT"/>
    <Param class="enum" dir="IN" name="regType" type="CPSS_DIAG_PP_REG_TYPE_ENT"/>
    <Param class="int" dir="IN" name="offset" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
    <Param class="bool" dir="IN" name="doByteSwap" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagRegTest" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagRegTest function
* @endinternal
*
* @brief   Tests the device read/write ability of a specific register.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The device number
* @param[in] regAddr                  - Register to test
* @param[in] regMask                  - Register mask. The test verifies only the non-masked
*                                      bits. Use 0xFFFFFFFF to test all bits.
* @param[in] profile                  - The test profile
*
* @param[out] testStatusPtr            - (pointer to) to test result. GT_TRUE if the test succeeded or GT_FALSE for failure
* @param[out] readValPtr               - (pointer to) value read from the register if testStatusPtr is
*                                      GT_FALSE. Irrelevant if testStatusPtr is GT_TRUE.
* @param[out] writeValPtr              - (pointer to) value written to the register if testStatusPtr is
*                                      GT_FALSE. Irrelevant if testStatusPtr is GT_TRUE.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong devNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function may be called after Phase 1 initialization.
*       After the register is tested, the original value prior to the test is
*       restored.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regMask" type="GT_U32"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_DIAG_TEST_PROFILE_ENT"/>
    <Param class="bool" dir="OUT" name="testStatus" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="readVal" type="GT_U32"/>
    <Param class="int" dir="OUT" name="writeVal" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagRegWrite" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagRegWrite function
* @endinternal
*
* @brief   Performs single 32 bit data write to one of the PP PCI configuration or
*         registers.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] baseAddr                 - The base address to access the device
* @param[in] ifChannel                - interface channel (PCI/SMI/TWSI)
* @param[in] regType                  - The register type
* @param[in] offset                   - the register offset
* @param[in] data                     -  to write
* @param[in] doByteSwap               - GT_TRUE:  byte swap will be done on the written data
*                                      GT_FALSE: byte swap will not be done on the written data
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong input parameter
*
* @note The function may be called before Phase 1 initialization and
*       can NOT be used after cpssHwPpPhase1 to read/write registers
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="baseAddr" type="GT_UINTPTR"/>
    <Param class="enum" dir="IN" name="ifChannel" type="CPSS_PP_INTERFACE_CHANNEL_ENT"/>
    <Param class="enum" dir="IN" name="regType" type="CPSS_DIAG_PP_REG_TYPE_ENT"/>
    <Param class="int" dir="IN" name="offset" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
    <Param class="bool" dir="IN" name="doByteSwap" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagRegsDump" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagRegsDump function
* @endinternal
*
* @brief   Dumps the device register addresses and values according to the given
*         starting offset and number of registers to dump.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - the device number.
* @param[in,out] regsNumPtr               - (pointer to) number of registers to dump.
*                                      This number must not be bigger
*                                      than the number of registers that can be dumped
*                                      (starting at offset).
* @param[in] offset                   - the first register address to dump.
* @param[in,out] regsNumPtr               - (pointer to) number of registers that were dumped.
*
* @param[out] regAddrPtr               - (pointer to) addresses of the dumped registers.
*                                      The addresses are taken from the register DB.
* @param[out] regDataPtr               - (pointer to) data in the dumped registers.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function may be called after Phase 1 initialization.
*       To dump all the registers the user may call cpssPxDiagRegsNumGet in
*       order to get the number of registers of the PP.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="INOUT" name="regsNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="offset" type="GT_U32"/>
    <Param class="int" dir="OUT" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="regData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagRegsNumGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagRegsNumGet function
* @endinternal
*
* @brief   Gets the number of registers for the PP.
*         Used to allocate memory for cpssPxDiagRegsDump.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - the device number
*
* @param[out] regsNumPtr               - (pointer to) number of registers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function may be called after Phase 1 initialization.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="regsNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagResetAndInitControllerRegsDump" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagResetAndInitControllerRegsDump function
* @endinternal
*
* @brief   Dumps the Reset and Init controller register addresses and values
*         according to the given starting offset and number of registers to dump.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - the device number.
* @param[in,out] regsNumPtr               - (pointer to) number of registers to dump.
*                                      This number must not be bigger
*                                      than the number of registers that can be dumped
*                                      (starting at offset).
* @param[in] offset                   - the first register address to dump.
* @param[in,out] regsNumPtr               - (pointer to) number of registers that were dumped.
*
* @param[out] regAddrPtr               - (pointer to) addresses of the dumped registers.
*                                      The addresses are taken from the register DB.
* @param[out] regDataPtr               - (pointer to) data in the dumped registers.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function may be called after Phase 1 initialization.
*       To dump all the registers the user may call
*       cpssPxDiagResetAndInitControllerRegsNumGet in order to get the number
*       of registers of the Reset and Init Controller.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="INOUT" name="regsNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="offset" type="GT_U32"/>
    <Param class="int" dir="OUT" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="regData" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxDiagResetAndInitControllerRegsNumGet" srcpath="mainPxDrv/h/cpss/px/diag/cpssPxDiag.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxDiagResetAndInitControllerRegsNumGet function
* @endinternal
*
* @brief   Gets the number of registers for the Reset and Init Controller.
*         Used to allocate memory for cpssPxDiagResetAndInitControllerRegsDump.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - the device number
*
* @param[out] regsNumPtr               - (pointer to) number of registers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function may be called after Phase 1 initialization.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="regsNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressBypassModeGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressBypassModeGet function
* @endinternal
*
* @brief   Get bypass enable/disable of the egress processing and is the PPA clock
*         disable for power saving when 'bypass' the egress processing.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
*
* @param[out] phaBypassEnablePtr       - (pointer to)
*                                      GT_TRUE  -     bypass the programmable header alteration (PHA).
*                                      GT_FALSE - not bypass the programmable header alteration (PHA).
* @param[out] ppaClockEnablePtr        - (pointer to)
*                                      GT_TRUE  - the PPA clock is enabled.
*                                      GT_FALSE - the PPA clock is disabled.(for power saving).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="phaBypassEnable" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="ppaClockEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressBypassModeSet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressBypassModeSet function
* @endinternal
*
* @brief   Enable/disable bypass of the egress processing and option to disable
*         PPA clock for power saving when 'bypass' the egress processing.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] phaBypassEnable          GT_TRUE  -     bypass the programmable header alteration (PHA).
*                                      GT_FALSE - not bypass the programmable header alteration (PHA).
* @param[in] ppaClockEnable           - The PPA clock can be disabled for power saving.
*                                      The PPA clock can be disabled only when the phaBypassEnable == GT_TRUE.
*                                      GT_TRUE  - the PPA clock is enabled.
*                                      GT_FALSE - the PPA clock is disabled.(for power saving).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="phaBypassEnable" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="ppaClockEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressHeaderAlterationEntryGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressHeaderAlterationEntryGet function
* @endinternal
*
* @brief   Get per target port and per packet type the header alteration entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - target physical port number.
* @param[in] packetType               - the packet type (that was assigned by ingress processing).
*                                      (APPLICABLE RANGE: 0..31)
*
* @param[out] operationTypePtr         - (pointer to) the type of operation that this entry need to do.
*                                      NOTE: this is the type of the firmware thread that should handle the egress packet.
* @param[out] operationInfoPtr         - (pointer to) union of operation information related to the 'operationType'
*                                      NOTE: this is the template that is needed by the firmware thread
*                                      that should handle the egress packet.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or packetType
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="enum" dir="OUT" name="operationType" type="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_ENT"/>
    <Param class="union" dir="OUT" name="operationInfo" type="CPSS_PX_EGRESS_HEADER_ALTERATION_ENTRY_UNT"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressSourcePortEntryGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressSourcePortEntryGet function
* @endinternal
*
* @brief   Get per source port the entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - source physical port number.
*
* @param[out] infoTypePtr              - (pointer to) the type of source port info.
* @param[out] portInfoPtr              - (pointer to) the entry info.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - the port was not initialized with valid info
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="infoType" type="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_ENT"/>
    <Param class="union" dir="OUT" name="portInfo" type="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_UNT"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressTargetPortEntryGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressTargetPortEntryGet function
* @endinternal
*
* @brief   Get per target port the entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - target physical port number.
*
* @param[out] infoTypePtr              - (pointer to) the type of target port info.
* @param[out] portInfoPtr              - (pointer to) the entry info.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - the port was not initialized with valid info
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="infoType" type="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_ENT"/>
    <Param class="union" dir="OUT" name="portInfo" type="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_UNT"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressTimestampModeGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressTimestampModeGet function
* @endinternal
*
* @brief   Get if the time of day (TOD) information used instead of source and target port
*         configuration for specific packet type.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] packetType               - the packet type (that was assigned by ingress processing).
*                                      (APPLICABLE RANGE: 0..31)
*
* @param[out] useTodPtr                - (pointer to)
*                                      GT_TRUE  - the time of day (TOD) information instead of .
*                                      GT_FALSE - the source and target port information instead of the time of day (TOD).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong or device or packetType
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="OUT" name="useTod" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressTimestampModeSet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressTimestampModeSet function
* @endinternal
*
* @brief   Set if the time of day (TOD) information used instead of source and target port
*         configuration for specific packet type.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] packetType               - the packet type (that was assigned by ingress processing).
*                                      (APPLICABLE RANGE: 0..31)
* @param[in] useTod                   - GT_TRUE  - the time of day (TOD) information instead of .
*                                      GT_FALSE - the source and target port information instead of the time of day (TOD).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong or device or packetType
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="IN" name="useTod" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressVlanTagStateEntryGet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressVlanTagStateEntryGet function
* @endinternal
*
* @brief   Gets VLAN tag state entry for target ports.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] vlanId                   - VLAN Id
*                                      (APPLICABLE RANGE: 0..4095)
*
* @param[out] portsTaggingPtr          - (pointer to) bitmap of physical ports tagged in the VLAN.
*                                      Every bit in bitmap represents VLAN tag state per target port:
*                                      0 - Egress tag state is untagged. Packet's VLAN tag is removed
*                                      1 - Egress tag state is tagged. Packet's VLAN tag is not removed
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on out of range parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="vlanId" type="GT_U32"/>
    <Param class="int" dir="OUT" name="portsTagging" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxEgressVlanTagStateEntrySet" srcpath="mainPxDrv/h/cpss/px/egress/cpssPxEgress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxEgressVlanTagStateEntrySet function
* @endinternal
*
* @brief   Sets VLAN tag state entry for target ports.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] vlanId                   - VLAN Id
*                                      (APPLICABLE RANGE: 0..4095)
* @param[in] portsTagging             - bitmap of physical ports tagged in the VLAN.
*                                      Every bit in bitmap represents VLAN tag state per target port:
*                                      0 - Egress tag state is untagged. Packet's VLAN tag is removed
*                                      1 - Egress tag state is tagged. Packet's VLAN tag is not removed
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on out of range parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="vlanId" type="GT_U32"/>
    <Param class="int" dir="IN" name="portsTagging" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxHwCoreClockGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwCoreClockGet function
* @endinternal
*
* @brief   This function returns the core clock value from HW.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The Pp's device number.
*
* @param[out] coreClkPtr               - Pp's core clock from HW and aligned with CPSS DB (MHz)
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="coreClk" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxHwDescSizeGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwDescSizeGet function
* @endinternal
*
* @brief   This function returns the size in bytes of a several descriptor sizes,
*         for a given device.
*         the size needed for rx descriptors for packet to the CPU.
*         the alignment needed for rx buffer for packet to the CPU.
*         the size needed for tx descriptors for packets from the CPU.
*         the size needed for CNC descriptors (pair of counters each) for CNC fast dump.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devType                  - The PP's device type to return the descriptor's size for.
*
* @param[out] rxDescSizePtr            - (pointer to) The Rx  descrptor's size (in bytes).
*                                      ignored if NULL
* @param[out] rxBufAlignmentPtr        - (pointer to) The Rx buffer alignment size (in bytes).
*                                      ignored if NULL
* @param[out] txDescSizePtr            - (pointer to) The Tx  descrptor's size (in bytes).
*                                      ignored if NULL
* @param[out] cncDescSizePtr           - (pointer to) The Cnc descrptor's size (in bytes).
*                                      ignored if NULL
*
* @retval GT_OK                    - on success,
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devType" type="CPSS_PP_DEVICE_TYPE"/>
    <Param class="int" dir="OUT" name="rxDescSize" type="GT_U32"/>
    <Param class="int" dir="OUT" name="rxBufAlignment" type="GT_U32"/>
    <Param class="int" dir="OUT" name="txDescSize" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cncDescSize" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxHwInterruptCoalescingGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwInterruptCoalescingGet function
* @endinternal
*
* @brief   Gets the interrupt coalescing configuration parameters.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) GT_TRUE: interrupt coalescing is enabled
*                                      GT_FALSE: interrupt coalescing is disabled
* @param[out] periodPtr                - (pointer to) Minimal IDLE period between two consecutive
*                                      interrupts. The units are in nSec with resolution of
*                                      320nSec (due to HW resolution) and is relevant only in
*                                      case interrupt coalescing is enabled (enablePtr == GT_TRUE).
*                                      (APPLICABLE RANGES: 320..5242560).
* @param[out] linkChangeOverridePtr    - (pointer to)
*                                      GT_TRUE: A link change in one of the ports
*                                      results interrupt regardless of the (coalescing)
*                                      period.
*                                      GT_FALSE: A link change in one of the ports
*                                      does not results interrupt immediately but
*                                      according to the (coalescing) period.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The HW resolution for the interrupt coalescing period is 0.32uSec.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="period" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="linkChangeOverride" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxHwInterruptCoalescingSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwInterruptCoalescingSet function
* @endinternal
*
* @brief   Configures the interrupt coalescing parameters and enable\disable the
*         functionality.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - GT_TRUE: interrupt coalescing is enabled
*                                      GT_FALSE: interrupt coalescing is disabled
* @param[in] period                   - Minimal IDLE  between two consecutive interrupts.
*                                      The units of this input parameter is in nSec, the
*                                      resolution is in 320 nSec (the HW resolution for the
*                                      interrupt coalescing period is 0.32uSec). In case interrupt
*                                      coalescing is enabled (enable == GT_TRUE)
*                                      (APPLICABLE RANGES: 320..5242560).
*                                      Otherwise (enable == GT_FALSE), ignored.
* @param[in] linkChangeOverride       - GT_TRUE: A link change in one of the ports
*                                      results interrupt regardless of the (coalescing)
* @param[in] period
*                                      GT_FALSE: A link change in one of the ports
*                                      does not results interrupt immediately but
*                                      according to the (coalescing) period.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - parameter out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="IN" name="period" type="GT_U32"/>
    <Param class="bool" dir="IN" name="linkChangeOverride" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxHwPpInitStageGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwPpInitStageGet function
* @endinternal
*
* @brief   Indicates the initialization stage of the device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to reset.
*
* @param[out] initStagePtr             - pointer to the stage of the device
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="initStage" type="CPSS_HW_PP_INIT_STAGE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxHwPpSoftResetSkipParamGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwPpSoftResetSkipParamGet function
* @endinternal
*
* @brief   This routine return configuration of skip parameters related to soft reset.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] skipType                 - the skip parameter to set
*                                      see comments in CPSS_HW_PP_RESET_SKIP_TYPE_ENT.
*
* @param[out] skipEnablePtr            - GT_FALSE: Do Not Skip
*                                      GT_TRUE:  Skip
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum, or skipType
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="skipType" type="CPSS_HW_PP_RESET_SKIP_TYPE_ENT"/>
    <Param class="bool" dir="OUT" name="skipEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxHwPpSoftResetSkipParamSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwPpSoftResetSkipParamSet function
* @endinternal
*
* @brief   This routine configure skip parameters related to soft reset.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] skipType                 - the skip parameter to set
*                                      see comments in CPSS_HW_PP_RESET_SKIP_TYPE_ENT.
* @param[in] skipEnable               - GT_FALSE: Do Not Skip
*                                      GT_TRUE:  Skip
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum, or skipType
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="skipType" type="CPSS_HW_PP_RESET_SKIP_TYPE_ENT"/>
    <Param class="bool" dir="IN" name="skipEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxHwPpSoftResetTrigger" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxHwPpSoftResetTrigger function
* @endinternal
*
* @brief   This routine issue soft reset for a specific device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number to reset.
*
* @retval GT_OK                    - on success,
* @retval GT_FAIL                  - otherwise.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Soft reset is the process in which selected entities (as configured by
*       using the cpssPxHwPpSoftResetSkipParamSet API) are reset to their
*       default values.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressEtherTypeGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressEtherTypeGet function
* @endinternal
*
* @brief   Get global ethertype configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] configType               - type of ethertype
*
* @param[out] etherTypePtr             - (pointer to) EtherType for protocol recognition.
* @param[out] validPtr                 - (pointer to) EtherType entry status
*                                      GT_TRUE     - EtherType is valid,
*                                      GT_FALSE    - EtherType is not valid.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="configType" type="CPSS_PX_INGRESS_ETHERTYPE_ENT"/>
    <Param class="int" dir="OUT" name="etherType" type="GT_U16"/>
    <Param class="bool" dir="OUT" name="valid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressEtherTypeSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressEtherTypeSet function
* @endinternal
*
* @brief   Set global ethertype configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] configType               - type of ethertype to be configured
* @param[in] etherType                - EtherType for protocol recognition.
* @param[in] valid                    - EtherType entry status
*                                      GT_TRUE     - EtherType is valid,
*                                      GT_FALSE    - EtherType is not valid.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="configType" type="CPSS_PX_INGRESS_ETHERTYPE_ENT"/>
    <Param class="int" dir="IN" name="etherType" type="GT_U16"/>
    <Param class="bool" dir="IN" name="valid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressFilteringEnableGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressFilteringEnableGet function
* @endinternal
*
* @brief   Get port filtering enabled state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] direction                - direction: ingress or egress.
* @param[in] packetType               - packet type.
*
* @param[out] enablePtr                - (pointer to) enabled state
*                                      GT_TRUE   - port filtering is enabled
*                                      GT_FALSE  - port filtering is disabled
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="direction" type="CPSS_DIRECTION_ENT"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressFilteringEnableSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressFilteringEnableSet function
* @endinternal
*
* @brief   Set port filtering enabled state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] direction                - direction.
* @param[in] packetType               - packet type.
* @param[in] enable                   -  or disable port filtering
*                                      GT_TRUE   - port filtering is enabled
*                                      GT_FALSE  - port filtering is disabled
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="direction" type="CPSS_DIRECTION_ENT"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressForwardingPortMapExceptionGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressForwardingPortMapExceptionGet function
* @endinternal
*
* @brief   Get exception Source/Destination port map.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
*
* @param[out] portsBmpPtr              - (pointer to) the bitmap of ports.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="OUT" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressForwardingPortMapExceptionSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressForwardingPortMapExceptionSet function
* @endinternal
*
* @brief   Set exception Source/Destination forwarding port map.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
* @param[in] portsBmp                 - the bitmap of ports.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashDesignatedPortsEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashDesignatedPortsEntryGet function
* @endinternal
*
* @brief   Gets entry in LAG designated ports table.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index
*                                      (APPLICABLE RANGES: 0..255).
*
* @param[out] portsBmpPtr              - (pointer to) member port bitmap.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="int" dir="OUT" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashDesignatedPortsEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashDesignatedPortsEntrySet function
* @endinternal
*
* @brief   Sets entry in LAG designated ports table.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index
*                                      (APPLICABLE RANGES: 0..255).
* @param[in] portsBmp                 - member port bitmap.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashLagTableModeGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashLagTableModeGet function
* @endinternal
*
* @brief   Gets global LAG Designated Port Table mode
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] lagTableModePtr          - (pointer to) LAG table mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="lagTableMode" type="CPSS_PX_INGRESS_HASH_LAG_TABLE_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashLagTableModeSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashLagTableModeSet function
* @endinternal
*
* @brief   Sets global LAG Designated Port Table mode
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] lagTableMode             - LAG table mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="lagTableMode" type="CPSS_PX_INGRESS_HASH_LAG_TABLE_MODE_ENT"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxIngressHashPacketTypeEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeEntryGet function
* @endinternal
*
* @brief   Get packet hash key configuration for selected packet type
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type.
*
* @param[out] udbpArr[CPSS_PX_INGRESS_HASH_UDBP_MAX_CNS] - user-defined byte pairs array of 21 elements.
* @param[out] sourcePortEnablePtr      - (pointer to) enable usage of source port in
*                                      packet hash.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_STATE             - on invalid anchor field read
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="struct[]" dir="OUT" name="udbpArr" type="CPSS_PX_INGRESS_HASH_UDBP_STC"/>
    <Param class="bool" dir="OUT" name="sourcePortEnable" type="GT_BOOL"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxIngressHashPacketTypeEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeEntrySet function
* @endinternal
*
* @brief   Sets up packet hash key configuration for selected packet type
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type.
* @param[in] udbpArr[CPSS_PX_INGRESS_HASH_UDBP_MAX_CNS] - user-defined byte pairs array of 21 elements.
* @param[in] sourcePortEnable         - enable usage of source port in packet hash.
*                                      GT_TRUE  - source port is used in hash
*                                      calculation.
*                                      GT_FALSE - source port is not used in hash
*                                      calculation.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_OUT_OF_RANGE          - on offset in udbpArr is out of range
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="struct[]" dir="IN" name="udbpArr" type="CPSS_PX_INGRESS_HASH_UDBP_STC"/>
    <Param class="bool" dir="IN" name="sourcePortEnable" type="GT_BOOL"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxIngressHashPacketTypeHashModeGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeHashModeGet function
* @endinternal
*
* @brief   Gets hash calculation mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type.
*
* @param[out] hashModePtr              - (pointer to) hash calculation mode.
* @param[out] bitOffsetsArr[CPSS_PX_INGRESS_HASH_SELECTED_BITS_MAX_CNS] - (pointer to) array of offsets (8 elements) of hash
*                                      bits to be extracted from 43 bytes of hash key.
*                                      Relevant only when hashMode == 'SELECTED_BITS'.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="enum" dir="OUT" name="hashMode" type="CPSS_PX_INGRESS_HASH_MODE_ENT"/>
    <Param class="int[]" dir="OUT" name="bitOffsetsArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxIngressHashPacketTypeHashModeSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeHashModeSet function
* @endinternal
*
* @brief   Sets up hash calculation mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type.
* @param[in] hashMode                 - hash calculation mode
* @param[in] bitOffsetsArr[CPSS_PX_INGRESS_HASH_SELECTED_BITS_MAX_CNS] - array of offsets (8 elements) of hash bits to be
*                                      extracted from 43 bytes of hash key. Relevant only
*                                      when hashMode == 'SELECTED BITS'
*                                      (APPLICABLE RANGES: 0..343)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_OUT_OF_RANGE          - bitOffsetsArr member is out of range
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="enum" dir="IN" name="hashMode" type="CPSS_PX_INGRESS_HASH_MODE_ENT"/>
    <Param class="int[]" dir="IN" name="bitOffsetsArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxIngressHashPacketTypeLagTableNumberGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeLagTableNumberGet function
* @endinternal
*
* @brief   Gets LAG table number for specific packet type
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] lagTableNumberPtr        - (pointer to) the LAG table number.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="int" dir="OUT" name="lagTableNumber" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashPacketTypeLagTableNumberSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPacketTypeLagTableNumberSet function
* @endinternal
*
* @brief   Sets LAG table number for specific packet type
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] lagTableNumber           - the LAG table number.
*                                      (APPLICABLE RANGES: 0..1)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="int" dir="IN" name="lagTableNumber" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashPortIndexModeGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPortIndexModeGet function
* @endinternal
*
* @brief   Gets LAG designated port table indexing mode for selected source
*         port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] indexModePtr             - designated port table indexing mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="indexMode" type="CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashPortIndexModeSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashPortIndexModeSet function
* @endinternal
*
* @brief   Sets up LAG designated port table indexing mode for selected source
*         port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] indexMode                - designated port table indexing mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="indexMode" type="CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashSeedGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashSeedGet function
* @endinternal
*
* @brief   Get CRC32 seed for hash calculation
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] crc32SeedPtr             - (pointer to) seed for CRC32 packet hash
*                                      calculation.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="crc32Seed" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashSeedSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashSeedSet function
* @endinternal
*
* @brief   Sets up CRC32 seed for hash calculation
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] crc32Seed                - seed for CRC32 packet hash calculation.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="crc32Seed" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashUdeEthertypeGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashUdeEthertypeGet function
* @endinternal
*
* @brief   Get user-defined ethertypes (in addition to predefined types) for hash packet classificator.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type. (APPLICABLE VALUES:
*                                      CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE1_E;
*                                      CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE2_E)
*
* @param[out] etherTypePtr             - (pointer to) ethertype.
* @param[out] validPtr                 - (pointer to) validity of the ethertype.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="int" dir="OUT" name="etherType" type="GT_U16"/>
    <Param class="bool" dir="OUT" name="valid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressHashUdeEthertypeSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngressHash.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressHashUdeEthertypeSet function
* @endinternal
*
* @brief   Set user-defined ethertypes (in addition to predefined types) for hash
*         packet classificator.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] hashPacketType           - hash packet type. (APPLICABLE VALUES:
*                                      CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE1_E;
*                                      CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE2_E)
* @param[in] etherType                - ethertype.
* @param[in] valid                    - validity of the record.
*                                      GT_TRUE  - ethertype is valid.
*                                      GT_FALSE - ethertype is invalid.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="hashPacketType" type="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT"/>
    <Param class="int" dir="IN" name="etherType" type="GT_U16"/>
    <Param class="bool" dir="IN" name="valid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressIp2MeEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressIp2MeEntryGet function
* @endinternal
*
* @brief   Get IP2ME table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index for IP2ME table (APPLICABLE RANGES: 1..7).
*
* @param[out] ip2meEntryPtr            - (pointer to) IP2ME entry.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="ip2meEntry" type="CPSS_PX_INGRESS_IP2ME_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressIp2MeEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressIp2MeEntrySet function
* @endinternal
*
* @brief   Set IP2ME table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index for IP2ME table (APPLICABLE RANGES: 1..7).
* @param[in] ip2meEntryPtr            - (pointer to) IP2ME entry
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Applicable starting from revision A1.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="struct" dir="IN" name="ip2meEntry" type="CPSS_PX_INGRESS_IP2ME_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPacketTypeErrorGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPacketTypeErrorGet function
* @endinternal
*
* @brief   Get unmatched packet type error counter and key.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] errorCounterPtr          - (pointer to) unmatched packet type counter.
* @param[out] errorKeyPtr              - (pointer to) unmatched packet type key.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="errorCounter" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="errorKey" type="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPacketTypeKeyEntryEnableGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPacketTypeKeyEntryEnableGet function
* @endinternal
*
* @brief   Get status of the packet type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] enablePtr                - (pointer to) state of the packet type key table entry
*                                      GT_TRUE - enable packet type key table entry,
*                                      GT_FALSE - disable packet type key table entry.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPacketTypeKeyEntryEnableSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPacketTypeKeyEntryEnableSet function
* @endinternal
*
* @brief   Enable/disable packet type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] enable                   - Enable or disable packet type key table entry
*                                      GT_TRUE - enable packet type key table entry,
*                                      GT_FALSE - disable packet type key table entry.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPacketTypeKeyEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPacketTypeKeyEntryGet function
* @endinternal
*
* @brief   Get packet type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] keyDataPtr               - (pointer to) 17 bytes packet type key pattern.
* @param[out] keyMaskPtr               - (pointer to) 17 bytes packet type key mask.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="OUT" name="keyData" type="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC"/>
    <Param class="struct" dir="OUT" name="keyMask" type="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPacketTypeKeyEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPacketTypeKeyEntrySet function
* @endinternal
*
* @brief   Set packet type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] keyDataPtr               - (pointer to) 17 bytes packet type key data.
* @param[in] keyMaskPtr               - (pointer to) 17 bytes packet type key mask.
*                                      The packet type key mask is AND styled one.
*                                      Mask bit's 0 means don't care bit (corresponding bit in
*                                      the pattern is not using in the TCAM like lookup).
*                                      Mask bit's 1 means that corresponding bit in the
*                                      pattern is using in the TCAM like lookup.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="IN" name="keyData" type="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC"/>
    <Param class="struct" dir="IN" name="keyMask" type="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortDsaTagEnableGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortDsaTagEnableGet function
* @endinternal
*
* @brief   Get DSA-tagged packets receiving status on the source port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] enablePtr                - (pointer to) DSA-tagged packets receiving status on the source port
*                                      GT_TRUE   - enable the port for DSA-tagged packets,
*                                      GT_FALSE  - disable the port for DSA-tagged packets
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortDsaTagEnableSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortDsaTagEnableSet function
* @endinternal
*
* @brief   Enable/disable the source port for DSA-tagged packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] enable                   -  or disable the source port for DSA-tagged packets
*                                      GT_TRUE   - enable the port for DSA-tagged packets,
*                                      GT_FALSE  - disable the port for DSA-tagged packets
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMacDaByteOffsetGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMacDaByteOffsetGet function
* @endinternal
*
* @brief   Get byte offset of MAC DA for specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] offsetPtr                - (pointer to) byte offset of MAC DA.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="offset" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMacDaByteOffsetSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMacDaByteOffsetSet function
* @endinternal
*
* @brief   Set byte offset of MAC DA on specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] offset                   - byte  of MAC DA.
*                                      Only even values are applicable.
*                                      (APPLICABLE RANGES: 0..30)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="offset" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMapEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMapEntryGet function
* @endinternal
*
* @brief   Gets Source/Destination port map table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
* @param[in] entryIndex               - port map entry index.
*                                      Index calculated by packet type source/destination format.
*                                      Destination table -
*                                      (APPLICABLE RANGES: 0..8191)
*                                      Source table -
*                                      (APPLICABLE RANGES: 0..4095)
*
* @param[out] portsBmpPtr              - (pointer to) the bitmap of ports.
* @param[out] bypassLagDesignatedBitmapPtr
*                                      - (pointer to) the bypass status of LAG Designated Port selection for this entry.
*                                      Relevant only for destination port map table.
*                                      GT_TRUE     -  The LAG Designated Port selection is bypassed for this entry
*                                      GT_FALSE    -  The LAG Designated Port selection is applied for this entry
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="int" dir="OUT" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
    <Param class="bool" dir="OUT" name="bypassLagDesignatedBitmap" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMapEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMapEntrySet function
* @endinternal
*
* @brief   Set Source/Destination port map table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
* @param[in] entryIndex               - port map entry index.
*                                      Index calculated by packet type source/destination format.
*                                      Destination table -
*                                      (APPLICABLE RANGES: 0..8191)
*                                      Source table -
*                                      (APPLICABLE RANGES: 0..4095)
* @param[in] portsBmp                 - the bitmap of ports.
* @param[in] bypassLagDesignatedBitmap
*                                      - enables bypass of LAG Designated Port selection for this entry.
*                                      Relevant only for destination port map table.
*                                      GT_TRUE     -  The LAG Designated Port selection is bypassed for this entry
*                                      GT_FALSE    -  The LAG Designated Port selection is applied for this entry
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
    <Param class="bool" dir="IN" name="bypassLagDesignatedBitmap" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMapExceptionCounterGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMapExceptionCounterGet function
* @endinternal
*
* @brief   Get Source/Destination index exception counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
*
* @param[out] errorCounterPtr          - (pointer to) Source/Destination index exception counter.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="OUT" name="errorCounter" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMapPacketTypeFormatEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMapPacketTypeFormatEntryGet function
* @endinternal
*
* @brief   Get Source/Destination information for packet type in the format table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
* @param[in] packetType               - index of the packet type format
*                                      in the Source/Destination format table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] packetTypeFormatPtr      - (pointer to) Source/Destination packet type format
*                                      in the Source/Destination format table.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="OUT" name="packetTypeFormat" type="CPSS_PX_INGRESS_PORT_MAP_PACKET_TYPE_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortMapPacketTypeFormatEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortMapPacketTypeFormatEntrySet function
* @endinternal
*
* @brief   Set Source/Destination information for packet type in the format table,
*         used to extract the information from the packet forwarding tag (DSA or E-Tag).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] tableType                - Source/Destination port map table.
* @param[in] packetType               - index of the packet type format.
*                                      in the Source/Destination format table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] packetTypeFormatPtr      - (pointer to) Source/Destination packet type format
*                                      in the Source/Destination format table.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="tableType" type="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="struct" dir="IN" name="packetTypeFormat" type="CPSS_PX_INGRESS_PORT_MAP_PACKET_TYPE_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortPacketTypeKeyGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortPacketTypeKeyGet function
* @endinternal
*
* @brief   Get packet type key generation info:
*         - source profile
*         - UDB pairs information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] portKeyPtr               - (pointer to) packet type key.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portKey" type="CPSS_PX_INGRESS_PORT_PACKET_TYPE_KEY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortPacketTypeKeySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortPacketTypeKeySet function
* @endinternal
*
* @brief   Set port packet type key generation info:
*         - source profile
*         - UDB pairs information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] portKeyPtr               - (pointer to) port packet type key.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="portKey" type="CPSS_PX_INGRESS_PORT_PACKET_TYPE_KEY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortRedirectSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortRedirectSet function
* @endinternal
*
* @brief   Set redirecting of the all packets from ingress port to list of
*         egress ports.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - ingress physical port number.
* @param[in] targetPortsBmp           - the bitmap of egress ports.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="targetPortsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortTargetEnableGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortTargetEnableGet function
* @endinternal
*
* @brief   Get state of the forwarding target port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] enablePtr                - (pointer to) state of the target port.
*                                      GT_TRUE - Enables packet forwarding to the target port,
*                                      GT_FALSE - Filters all traffic to the target port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressPortTargetEnableSet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressPortTargetEnableSet function
* @endinternal
*
* @brief   Enable/disable forwarding to the target port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] enable                   -  or disable forwarding to the target port.
*                                      GT_TRUE - Enables packet forwarding to the target port,
*                                      GT_FALSE - Filters all traffic to the target port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressTpidEntryGet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressTpidEntryGet function
* @endinternal
*
* @brief   Get global TPID table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index for TPID table (APPLICABLE RANGES: 0..3).
*
* @param[out] tpidEntryPtr             - (pointer to) global TPID entry
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="tpidEntry" type="CPSS_PX_INGRESS_TPID_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxIngressTpidEntrySet" srcpath="mainPxDrv/h/cpss/px/ingress/cpssPxIngress.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxIngressTpidEntrySet function
* @endinternal
*
* @brief   Set global TPID table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - entry index for TPID table (APPLICABLE RANGES: 0..3).
* @param[in] tpidEntryPtr             - (pointer to) global TPID entry
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U32"/>
    <Param class="struct" dir="IN" name="tpidEntry" type="CPSS_PX_INGRESS_TPID_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamClassManipulationGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamClassManipulationGet function
* @endinternal
*
* @brief   This routine gets a LED stream class manipulation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] classNum                 - class number. (APPLICABLE RANGES: 0..5)
*
* @param[out] classParamsPtr           - (pointer to) class manipulation parameters
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="classNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="classParams" type="CPSS_PX_LED_CLASS_MANIPULATION_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamClassManipulationSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamClassManipulationSet function
* @endinternal
*
* @brief   This routine configures a LED stream class manipulation.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] classNum                 - class number. (APPLICABLE RANGES: 0..5)
* @param[in] classParamsPtr           - (pointer to) class manipulation parameters
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="classNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="classParams" type="CPSS_PX_LED_CLASS_MANIPULATION_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamConfigGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamConfigGet function
* @endinternal
*
* @brief   This routine gets the LED stream configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
*
* @param[out] ledConfPtr               - (pointer to) LED stream configuration parameters.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_STATE             - on bad hardware value
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="ledConf" type="CPSS_PX_LED_CONF_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamConfigSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamConfigSet function
* @endinternal
*
* @brief   This routine configures the LED stream.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] ledConfPtr               - (pointer to) LED stream configuration parameters.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_OUT_OF_RANGE          - ledStart or ledEnd out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="ledConf" type="CPSS_PX_LED_CONF_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamGroupConfigGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamGroupConfigGet function
* @endinternal
*
* @brief   This routine gets a LED stream group configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] groupNum                 - group number. (APPLICABLE RANGES: 0..1)
*
* @param[out] groupParamsPtr           - (pointer to) group configuration parameters
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="groupNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="groupParams" type="CPSS_LED_GROUP_CONF_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamGroupConfigSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamGroupConfigSet function
* @endinternal
*
* @brief   This routine configures a LED stream group.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] groupNum                 - group number. (APPLICABLE RANGES: 0..1)
* @param[in] groupParamsPtr           - (pointer to) group configuration parameters
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_OUT_OF_RANGE          - on out of range class number
*                                       (allowable class range o..5)
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="groupNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="groupParams" type="CPSS_LED_GROUP_CONF_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamPortClassPolarityInvertEnableGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamPortClassPolarityInvertEnableGet function
* @endinternal
*
* @brief   This routine set the polarity of the selected indications
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number.
* @param[in] classNum                 - class number. (APPLICABLE RANGES: 0..5)
*
* @param[out] invertEnablePtr          - (pointer to) status of the selected polarity indication.
*                                      GT_TRUE  - polarity inverted
*                                      GT_FALSE - polarity not inverted
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="classNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="invertEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamPortClassPolarityInvertEnableSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamPortClassPolarityInvertEnableSet function
* @endinternal
*
* @brief   This routine set the polarity of the selected indications
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number.
* @param[in] classNum                 - class number. (APPLICABLE RANGES: 0..5)
* @param[in] invertEnable             - status of the selected polarity indication.
*                                      GT_TRUE  - polarity inverted
*                                      GT_FALSE - polarity not inverted
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="classNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="invertEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamPortPositionGet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamPortPositionGet function
* @endinternal
*
* @brief   Gets number of the port in the LED's chain.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_OUT_OF_RANGE          - position out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="position" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxLedStreamPortPositionSet" srcpath="mainPxDrv/h/cpss/px/cpssHwInit/cpssPxHwInitLedCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxLedStreamPortPositionSet function
* @endinternal
*
* @brief   Sets number of the port in the LED's chain.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
* @param[in] position                 - port  index in LED stream
*                                      (APPLICABLE RANGES: 0..63)
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_OUT_OF_RANGE          - position out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - otherwise
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="position" type="GT_U32"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxMultiPortLpEnableDisableTest" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxMultiPortLpEnableDisableTest function
* @endinternal
*
* @brief   Function configures range of ports sets FEC mode
*          implements enhanced tune, checks that all links are up and after
*          that sets referenced loopback enable-disable
*          numberOfIterations times with msecDelay delay
*
* @note   APPLICABLE DEVICES:      PIPE
* @note   NOT APPLICABLE DEVICES:  none
*
* @param[in] devNum
* @param[in] mode
* @param[in] speed
* @param[in] fec
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="enum" dir="IN" name="fec" type="CPSS_PORT_FEC_MODE_ENT"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="enum" dir="IN" name="hwUnit" type="CPSS_EMBEDDED_COMMANDS_HW_UNIT_ENT"/>
    <Param class="int" dir="IN" name="lpMode" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxMultiPortUpDownTest" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxMultiPortUpDownTest function
* @endinternal
*
* @brief   Function configures range of ports sets FEC mode
*          implements enhanced tune, checks that all links are up and after
*          that sets ports/TX down-up numberOfIterations  times
*          with msecDelay delay
*
* @note   APPLICABLE DEVICES:      PIPE.
* @note   NOT APPLICABLE DEVICES:  none.
*
* @param[in] devNum
* @param[in] mode
* @param[in] speed
* @param[in] fec
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="testType" type="CPSS_EMBEDDED_COMMANDS_TEST_TYPE_ENT"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="enum" dir="IN" name="fec" type="CPSS_PORT_FEC_MODE_ENT"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxMultiPortsLinkUpDownSimpleTest" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxMultiPortsLinkUpDownSimpleTest function
* @endinternal
*
* @brief   Function sets Link down-up numberOfIterations  times
*          with msecDelay delay
*
* @note   APPLICABLE DEVICES:      PIPE
* @note   NOT APPLICABLE DEVICES:  none
* @param[in] devNum
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxMultiPortsUpDownSimpleTest" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxMultiPortsUpDownSimpleTest function
* @endinternal
*
* @brief   Function sets TX down-up numberOfIterations  times
*          with msecDelay delay
*
* @note   APPLICABLE DEVICES:      PIPE.
* @note   NOT APPLICABLE DEVICES:  none.
*
* @param[in] devNum
* @param[in] numberOfIterations
* @param[in] msecDelay
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="numberOfIterations" type="GT_U32"/>
    <Param class="int" dir="IN" name="msecDelay" type="GT_U32"/>
    <Param class="struct[]" dir="OUT" name="result" type="CPSS_EMBEDDED_COMMAND_TEST_RESULT_STC"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxNetIfRxBufFree" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfRxBufFree function
* @endinternal
*
* @brief   Frees a list of buffers, that where previously passed to the upper layer
*         in an Rx event.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The device number through which these buffers where
*                                      received.
* @param[in] rxQueue                  - The Rx queue number through which these buffers where
*                                      received (APPLICABLE RANGES: 0..7).
* @param[in] rxBuffList[]             - List of Rx buffers to be freed.
* @param[in] buffListLen              - Length of rxBufList.
*                                       GT_OK on success, or
*                                       GT_FAIL otherwise.
*
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - the library was not initialized
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. This function is not supported in CPSS_RX_BUFF_NO_ALLOC_E buffer
*       allocation method, GT_NOT_SUPPORTED returned.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="rxBuffList" type="GT_U8"/>
    <Param class="int" dir="IN" name="buffListLen" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxNetIfRxBufFreeWithSize" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfRxBufFreeWithSize function
* @endinternal
*
* @brief   Frees a list of buffers, that where previously passed to the upper layer
*         in an Rx event.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - The device number through which these buffers where
*                                      received.
* @param[in] rxQueue                  - The Rx queue number through which these buffers where
*                                      received (APPLICABLE RANGES: 0..7).
* @param[in] rxBuffList[]             - List of Rx buffers to be freed.
* @param[in] rxBuffSizeList[]         - List of Rx Buffers sizes.
* @param[in] buffListLen              - Length of rxBuffList and rxBuffSize lists.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_INITIALIZED       - the library was not initialized
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on not supported buffer allocation method
*
* @note 1. This function supported only in CPSS_RX_BUFF_NO_ALLOC_E buffer
*       allocation method, otherwise GT_NOT_SUPPORTED returned.
*       2. Buffer size must be multiple of 8 bytes and buffer address must be
*       128-byte aligned, otherwise GT_BAD_PARAM returned.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="rxBuffList" type="GT_U8"/>
    <Param class="int[]" dir="IN" name="rxBuffSizeList" type="GT_U32"/>
    <Param class="int" dir="IN" name="buffListLen" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxNetIfSdmaRxCountersGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxCountersGet function
* @endinternal
*
* @brief   For each packet processor, get the Rx packet counters from its SDMA
*         packet interface. Return the aggregate counter values for the given
*         traffic class queue. -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] rxQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
*
* @param[out] rxCountersPtr            - (pointer to) rx counters on this queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Counters are reset on every read.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="rxCounters" type="CPSS_PX_NET_SDMA_RX_COUNTERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaRxErrorCountGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxErrorCountGet function
* @endinternal
*
* @brief   Returns the total number of Rx resource errors that occurred on a given
*         Rx queue . -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] rxErrCountPtr            - (pointer to) The total number of Rx resource errors on
*                                      the device for all the queues.
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - otherwise.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The counters returned by this function reflects the number of Rx errors
*       that occurred since the last call to this function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="rxErrCount" type="CPSS_NET_SDMA_RX_ERROR_COUNTERS_STC"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxNetIfSdmaRxPacketGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxPacketGet function
* @endinternal
*
* @brief   This function returns packets from PP destined to the CPU port.
*         -- SDMA relate.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] rxQueue                  - The queue from which this packet was received (APPLICABLE RANGES: 0..7).
* @param[in,out] numOfBuffPtr             Num of buffs in packetBuffsArrPtr.
* @param[in,out] numOfBuffPtr             - Num of used buffs in packetBuffsArrPtr.
*
* @param[out] packetBuffsArrPtr[]      - (pointer to)The received packet buffers list.
* @param[out] buffLenArr[]             - List of buffer lengths for packetBuffsArrPtr.
*                                      rxParamsPtr         - (Pointer to)information parameters of received packets
*
* @retval GT_NO_MORE               - no more packets on the device/queue
* @retval GT_OK                    - packet got with no error.
* @retval GT_FAIL                  - failed to get the packet
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - wrong devNum,portNum,rxQueue.
* @retval GT_NOT_INITIALIZED       - the library was not initialized
* @retval GT_DSA_PARSING_ERROR     - DSA tag parsing error.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note It is recommended to call cpssPxNetIfRxBufFree for this queue
*       i.e. return the buffer to their original queue.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="numOfBuff" type="GT_U32"/>
    <Param class="int[]" dir="OUT" name="packetBuffsArrPtr" type="GT_U8"/>
    <Param class="int[]" dir="OUT" name="buffLenArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxNetIfSdmaRxQueueEnable" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxQueueEnable function
* @endinternal
*
* @brief   Enable/Disable the specified traffic class queue for RX
*         on all packet processors in the system. -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] rxQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
* @param[in] enable                   - GT_TRUE,  queue
*                                      GT_FALSE, disable queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaRxQueueEnableGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxQueueEnableGet function
* @endinternal
*
* @brief   Get status of the specified traffic class queue for RX
*         packets in CPU. -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] rxQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
*
* @param[out] enablePtr                - GT_TRUE, enable queue
*                                      GT_FALSE, disable queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL ptr
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="rxQueue" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaRxResourceErrorModeGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxResourceErrorModeGet function
* @endinternal
*
* @brief   Get a bit per TC queue which defines the behavior in case of
*         RX resource error
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] queue                    - traffic class  (APPLICABLE RANGES: 0..7)
*
* @param[out] modePtr                  - current packet mode: retry to send or abort
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad device number, queue, mode
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - the request is not supported
* @retval GT_BAD_PTR               - on NULL ptr
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="queue" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_NET_RESOURCE_ERROR_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaRxResourceErrorModeSet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaRxResourceErrorModeSet function
* @endinternal
*
* @brief   Set a bit per TC queue which defines the behavior in case of
*         RX resource error
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] queue                    - traffic class  (APPLICABLE RANGES: 0..7)
* @param[in] mode                     - current packet mode: retry to send or abort
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad device number, queue, mode
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - the request is not supported
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="queue" type="GT_U32"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_NET_RESOURCE_ERROR_MODE_ENT"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxNetIfSdmaSyncTxPacketSend" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/*******************************************************************************
* cpssPxNetIfSdmaSyncTxPacketSend
*
*       This function transmit packet from the CPU to the PP via the SDMA interface.
*       Prepared descriptors to the PP's SDMA TX queues.
*       After the transmit ends, all transmitted packets descriptors are freed.
*        -- SDMA relate.
*       function activates Tx SDMA , function wait for PP to finish processing
*       the buffer(s).
*
* APPLICABLE DEVICES:
*        Pipe.
*
* NOT APPLICABLE DEVICES:
*        None.
*
* INPUTS:
*       devNum       - Device number.
*       pcktParamsPtr- The internal packet params to be set into the packet
*                      descriptors.
*       buffList     - The packet data buffers list.
*       buffLenList  - A list of the buffers len in buffList.
*       numOfBufs    - Length of buffList.
*
* OUTPUTS:
*       None
*
* RETURNS:
*       GT_OK          - on success, or
*       GT_NO_RESOURCE - if there is not enough free elements in the fifo
*                        associated with the Event Request Handle.
*       GT_EMPTY       - if there are not enough descriptors to do the sending.
*       GT_HW_ERROR    - when after transmission last descriptor own bit wasn't
*                        changed for long time.
*       GT_BAD_PARAM   - the data buffer is longer than allowed.
*                        Buffer data can occupied up to the maximum number of descriptors defined.
*       GT_BAD_PTR               - one of the parameters is NULL pointer
*       GT_NOT_INITIALIZED       - the library was not initialized
*       GT_NOT_APPLICABLE_DEVICE - on not applicable device
*       GT_FAIL otherwise.
*
* COMMENTS:
*
*******************************************************************************/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="pcktParams" type="CPSS_PX_NET_TX_PARAMS_STC"/>
    <Param class="int[]" dir="IN" name="buffList" type="GT_U8"/>
    <Param class="int[]" dir="IN" name="buffLenList" type="GT_U32"/>
    <Param class="int" dir="IN" name="numOfBufs" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxNetIfSdmaTxFreeDescripotrsNumberGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaTxFreeDescripotrsNumberGet function
* @endinternal
*
* @brief   This function return the number of free Tx descriptors for given
*         device and txQueue
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device number.
* @param[in] txQueue                  - Tx queue number.
*
* @param[out] numberOfFreeTxDescriptorsPtr - pointer to number of free
*                                      descriptors for the given queue.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad device or queue
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_INITIALIZED       - the library was not initialized
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="txQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="numberOfFreeTxDescriptors" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaTxQueueEnable" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaTxQueueEnable function
* @endinternal
*
* @brief   Enable/Disable the specified traffic class queue for TX
*         on all packet processors in the system. -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*                                      queue     - traffic class queue (APPLICABLE RANGES: 0..7)
* @param[in] enable                   - GT_TRUE,  queue
*                                      GT_FALSE, disable queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_STATE             - on CPU port is not SDMA
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="txQueue" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxNetIfSdmaTxQueueEnableGet" srcpath="mainPxDrv/h/cpss/px/networkIf/cpssPxNetIf.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxNetIfSdmaTxQueueEnableGet function
* @endinternal
*
* @brief   Get status of the specified traffic class queue for TX
*         packets from CPU. -- SDMA relate
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] queue                    - traffic class queue
*
* @param[out] enablePtr                - GT_TRUE, enable queue
*                                      GT_FALSE, disable queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_STATE             - on CPU port is not SDMA
* @retval GT_BAD_PTR               - on NULL ptr
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="queue" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPhySmiMdcDivisionFactorGet" srcpath="mainPxDrv/h/cpss/px/phy/cpssPxPhySmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPhySmiMdcDivisionFactorGet function
* @endinternal
*
* @brief   Gets fast MDC Division Selector
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
*
* @param[out] divisionFactorPtr        - (pointer to) division factor of the core clock
*                                      to get the MDC (Serial Management Interface Clock)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="divisionFactor" type="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPhySmiMdcDivisionFactorSet" srcpath="mainPxDrv/h/cpss/px/phy/cpssPxPhySmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPhySmiMdcDivisionFactorSet function
* @endinternal
*
* @brief   Sets fast MDC Division Selector
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] divisionFactor           - division factor of the core clock
*                                      to get the MDC (Serial Management Interface Clock)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="divisionFactor" type="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPhyXsmiMdcDivisionFactorGet" srcpath="mainPxDrv/h/cpss/px/phy/cpssPxPhySmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPhyXsmiMdcDivisionFactorGet function
* @endinternal
*
* @brief   Gets MDC frequency for Master XSMI Interface.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
*
* @param[out] divisionFactorPtr        - (pointer to) division factor of the core clock
*                                      to get the MDC (Serial Management Interface Clock)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="divisionFactor" type="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPhyXsmiMdcDivisionFactorSet" srcpath="mainPxDrv/h/cpss/px/phy/cpssPxPhySmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPhyXsmiMdcDivisionFactorSet function
* @endinternal
*
* @brief   Sets MDC frequency for Master XSMI Interface
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] divisionFactor           - division factor of the core clock
*                                      to get the MDC (Serial Management Interface Clock).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="divisionFactor" type="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApDebugInfoGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApDebugInfoGet function
* @endinternal
*
* @brief   Print AP port real-time log information stored in system
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - number of physical port
* @param[in] cpssLog                  - boolean value indicate if log will be part of CPSS log mechanism or terminal print
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong port number or device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="cpssLog" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApEnableGet function
* @endinternal
*
* @brief   Get AP engine enabled and functional on port group (local core) status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_BAD_PTR               - enabledPtr is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enabled" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApEnableSet function
* @endinternal
*
* @brief   Enable/disable AP engine (loads AP code into shared memory and starts AP
*         engine).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] enable                   - GT_TRUE  -  AP on port group
*                                      GT_FALSE - disbale
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApIntropGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApIntropGet function
* @endinternal
*
* @brief   Returns AP port introp information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - number of physical port
*
* @param[out] apIntropPtr              - (ptr to) AP introp parameters
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - apIntropPtr is NULL
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="apIntrop" type="CPSS_PX_PORT_AP_INTROP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApIntropSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApIntropSet function
* @endinternal
*
* @brief   Set AP port introp information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - number of physical port
* @param[in] apIntropPtr              - (ptr to) AP introp parameters
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - apIntropPtr is NULL
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="apIntrop" type="CPSS_PX_PORT_AP_INTROP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApPortConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApPortConfigGet function
* @endinternal
*
* @brief   Get AP configuration of port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] apEnablePtr              - AP enable/disable on port
* @param[out] apParamsPtr              - (ptr to) AP parameters of port
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - apEnablePtr or apParamsPtr is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="apEnable" type="GT_BOOL"/>
    <Param class="struct" dir="OUT" name="apParams" type="CPSS_PX_PORT_AP_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApPortConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApPortConfigSet function
* @endinternal
*
* @brief   Enable/disable AP process on port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - number of physical port
* @param[in] apEnable                 - AP enable/disable on port
* @param[in] apParamsPtr              - (ptr to) AP parameters for port
*                                      (NULL - for CPSS defaults).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="apEnable" type="GT_BOOL"/>
    <Param class="struct" dir="IN" name="apParams" type="CPSS_PX_PORT_AP_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApPortEnableCtrlGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApPortEnableCtrlGet function
* @endinternal
*
* @brief   Get the entity responsible to preform port enable after training
*         Host or Service CPU (default value service CPU)
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
*
* @param[out] srvCpuEnablePtr          - (ptr to) port enable parmeter - if TRUE Service CPU responsible to preform port
*                                      enable after training, if FALSE Host
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong port number or device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="srvCpuEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApPortEnableCtrlSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApPortEnableCtrlSet function
* @endinternal
*
* @brief   Set the entity responsible to preform port enable after training
*         Host or Service CPU (default value service CPU)
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] srvCpuEnable             - if TRUE Service CPU responsible to preform port enable after training,
*                                      if FALSE Host
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong port number or device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="srvCpuEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApPortStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApPortStatusGet function
* @endinternal
*
* @brief   Get status of AP on port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] apStatusPtr              - (ptr to) AP parameters for port
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - apStatusPtr is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_INITIALIZED       - AP engine not run
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="apStatus" type="CPSS_PX_PORT_AP_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApSerdesRxParametersManualSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApSerdesRxParametersManualSet function
* @endinternal
*
* @brief   Set serdes RX parameters . Those offsets
*         will take place after TRX training.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - serdes lane number to configure the offsets to
* @param[in] serdesLane               - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
* @param[in] rxOverrideParamsPtr      - (pointer to) parameters data
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesLane" type="GT_U8"/>
    <Param class="struct" dir="IN" name="rxOverrideParams" type="CPSS_PORT_AP_SERDES_RX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApSerdesTxParametersOffsetSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApSerdesTxParametersOffsetSet function
* @endinternal
*
* @brief   Set serdes TX parameters offsets (negative of positive). Those offsets
*         will take place after resolution and prior to running TRX training.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - serdes lane number to configure the offsets to
* @param[in] serdesLane               - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
* @param[in] serdesTxOffsetsPtr       - (pointer to) parameters data
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note Offsets are limited to the range of minimum -7 and maximum +7
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesLane" type="GT_U8"/>
    <Param class="struct" dir="IN" name="serdesTxOffsets" type="CPSS_PORT_AP_SERDES_TX_OFFSETS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApStatsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApStatsGet function
* @endinternal
*
* @brief   Returns the AP port statistics information.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] apStatsPtr               - (ptr to) AP statistics information
* @param[out] intropAbilityMaxIntervalPtr - (ptr to) Introp Ability Max Interval
*                                      parameter - will help to represent
*                                      number of failed HCD cycles
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - apEnablePtr or apParamsPtr is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="apStats" type="CPSS_PX_PORT_AP_STATS_STC"/>
    <Param class="int" dir="OUT" name="intropAbilityMaxInterval" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssPxPortApStatsReset" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortAp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortApStatsReset function
* @endinternal
*
* @brief   Reset AP port statistics information
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @retval GT_OK                    - on success - port not in use by AP processor
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_INITIALIZED       - AP engine or library not initialized
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortAttributesOnPortGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortAttributesOnPortGet function
* @endinternal
*
* @brief   Gets port attributes for particular logical port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number (or CPU port)
*
* @param[out] portAttributSetArrayPtr  - Pointer to attributes values array.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portAttributSetArray" type="CPSS_PORT_ATTRIBUTES_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortAutoNegAdvertismentConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortAutoNegAdvertismentConfigGet function
* @endinternal
*
* @brief   Getting <TX Config Reg> data for Auto-Negotiation.
*         When Auto-Negotiation Master Mode and code word enable,
*         The device sends out <TX Config Reg> as the
*         Auto-Negotiation code word. This mode is used when there is no PHY
*         between link partners.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] portAnAdvertismentPtr    - pointer to structure with port link status, speed and duplex mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on wrong port mode
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_BAD_VALUE             - on wrong speed value in the register
*
* @note Auto-Negotiation Master Mode and code word can be enabled on SGMII.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portAnAdvertisment" type="CPSS_PX_PORT_AUTONEG_ADVERTISMENT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortAutoNegAdvertismentConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortAutoNegAdvertismentConfigSet function
* @endinternal
*
* @brief   Configure <TX Config Reg> for Auto-Negotiation.
*         When Auto-Negotiation Master Mode and code word enable,
*         The device sends out <TX Config Reg> as the
*         Auto-Negotiation code word. This mode is used when there is no PHY
*         between link partners.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] portAnAdvertismentPtr    - pointer to structure with port link status, speed and duplex mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - the request is not supported for this port mode
* @retval GT_NOT_APPLICABLE_DEVICE - the request is not supported for this device
*
* @note Auto-Negotiation Master Mode and code word can be enabled on SGMII.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="portAnAdvertisment" type="CPSS_PX_PORT_AUTONEG_ADVERTISMENT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortAutoNegMasterModeEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortAutoNegMasterModeEnableGet function
* @endinternal
*
* @brief   Get Enable/Disable status for Auto-Negotiation Master Mode and code word.
*         When enable, the device sends out <TX Config Reg> as the
*         Auto-Negotiation code word. This mode is used when there is no PHY
*         between link partners.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_NOT_SUPPORTED         - the request is not supported for this port mode
* @retval GT_NOT_APPLICABLE_DEVICE - the request is not supported for this device
*
* @note Auto-Negotiation Master Mode and code word can be enabled on SGMII.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortAutoNegMasterModeEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortAutoNegMasterModeEnableSet function
* @endinternal
*
* @brief   Set Enable/Disable status for Auto-Negotiation Master Mode and code word.
*         When enable, the device sends out <TX Config Reg> as the
*         Auto-Negotiation code word. This mode is used when there is no PHY
*         between link partners.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  Pipe.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] enable                   - GT_TRUE   -  Auto-Negotiation Master Mode and code word
*                                      GT_FALSE  - device defines Auto-Negotiation code word
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_NOT_INITIALIZED       - if the driver was not initialized
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_NOT_SUPPORTED         - the request is not supported for this port mode
* @retval GT_NOT_APPLICABLE_DEVICE - the request is not supported for this device
*
* @note Auto-Negotiation Master Mode and code word can be enabled on SGMII.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBackPressureEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBackPressureEnableGet function
* @endinternal
*
* @brief   Gets the state of Back Pressure in half-duplex on specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] enablePtr                - pointer to back pressure enable/disable state:
*                                      - GT_TRUE to enable Back Pressure
*                                      - GT_FALSE to disable Back Pressure.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. Although for XGMII (10 Gbps) ports feature is not supported the
*       function let application to configure it, in case GE mac unit exists
*       for this port
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBackPressureEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBackPressureEnableSet function
* @endinternal
*
* @brief   Enable/disable of Back Pressure in half-duplex on specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] state                    - GT_TRUE for enable Back Pressure, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - if feature not supported by port
*
* @note 1. Although for XGMII (10 Gbps) ports feature is not supported the
*       function let application to configure it, in case GE mac unit exists
*       for this port
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalPacketNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalPacketNumberGet function
* @endinternal
*
* @brief   Gets total number of unique packets currently in the system.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numOfPacketsPtr          - (pointer to) number of packets
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="numOfPackets" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalRxBufNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalRxBufNumberGet function
* @endinternal
*
* @brief   Gets total number of buffers currently allocated.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numOfBuffersPtr          - (pointer to) number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="numOfBuffers" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalXoffLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalXoffLimitGet function
* @endinternal
*
* @brief   Gets the Global Xoff limit value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] xoffLimitPtr             - (pointer to) the X-OFF limit value in resolution
*                                      of 1 buffer.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong devNum.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="xoffLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalXoffLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalXoffLimitSet function
* @endinternal
*
* @brief   Sets the Global Xoff limit value. Enables global control over the
*         number of buffers allocated for all ports by Global Xoff limit setting.
*         When the total number of buffers allocated reaches this threshold
*         (xoffLimit), all ports that support 802.3x Flow Control send a pause
*         frame.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] xoffLimit                - X-OFF limit in resolution of 1 buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong devNum.
* @retval GT_OUT_OF_RANGE          - on wrong xoffLimit.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="xoffLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalXonLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalXonLimitGet function
* @endinternal
*
* @brief   Gets the Global Xon limit value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] xonLimitPtr              - (pointer to) the X-ON limit value in resolution
*                                      of 1 buffer.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong devNum.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="xonLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgGlobalXonLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgGlobalXonLimitSet function
* @endinternal
*
* @brief   Sets the Global Xon limit value. Enables global control over the
*         number of buffers allocated for all ports by Global Xon limit setting.
*         When the total number of buffers allocated reaches this threshold
*         (xonLimit), all ports that support 802.3x Flow Control send an Xon
*         frame.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] xonLimit                 - X-ON limit in resolution of 1 buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong devNum.
* @retval GT_OUT_OF_RANGE          - on wrong xonLimit.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The Global Xon limit must be not be greater than Global Xoff Limit.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="xonLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileRxBufLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileRxBufLimitGet function
* @endinternal
*
* @brief   Gets the receive buffer limit threshold for the specified profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
*
* @param[out] rxBufLimitPtr            - (pointer to) the rx buffer limit value in resolution
*                                      of 1 buffer.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="OUT" name="rxBufLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileRxBufLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileRxBufLimitSet function
* @endinternal
*
* @brief   Sets receive buffer limit threshold for the specified profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
* @param[in] rxBufLimit               - buffer limit threshold in resolution of 1 buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval OUT_OF_RANGE             - on wrong rxBufLimit
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="rxBufLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileXoffLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileXoffLimitGet function
* @endinternal
*
* @brief   Gets the X-OFF port limit. When Flow Control is enabled, X-OFF packet
*         sent when the number of buffers for this port is less than xoffLimit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
*
* @param[out] xoffLimitPtr             - (pointer to) the X-OFF limit value in resolution
*                                      of 1 buffer.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="OUT" name="xoffLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileXoffLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileXoffLimitSet function
* @endinternal
*
* @brief   Sets X-OFF port limit. When Flow Control is enabled, X-OFF packet sent
*         when the number of buffers for this port is less than xoffLimit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
* @param[in] xoffLimit                - X-OFF limit in resolution of 1 buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval OUT_OF_RANGE             - on wrong xoffLimit
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="xoffLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileXonLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileXonLimitGet function
* @endinternal
*
* @brief   Gets the X-ON port limit. When Flow Control is enabled, X-ON packet
*         sent when the number of buffers for this port is less than xonLimit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters of
*                                      are associated.
*
* @param[out] xonLimitPtr              - (pointer to) the X-ON limit value in resolution
*                                      of 1 buffer.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="OUT" name="xonLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgProfileXonLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgProfileXonLimitSet function
* @endinternal
*
* @brief   Sets X-ON port limit. When Flow Control is enabled, X-ON packet sent
*         when the number of buffers for this port is less than xonLimit.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
* @param[in] xonLimit                 - X-ON limit in resolution of 1 buffer.
*                                      (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong profileSet or device
* @retval OUT_OF_RANGE             - on wrong xonLimit
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="xonLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgRxBufNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgRxBufNumberGet function
* @endinternal
*
* @brief   Gets total number of buffers currently allocated for the specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
*
* @param[out] numOfBuffersPtr          - (pointer to) number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="numOfBuffers" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgRxMcCntrGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgRxMcCntrGet function
* @endinternal
*
* @brief   Gets multicast counter of a certain buffer.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrIdx                  - counter index
*                                      (APPLICABLE RANGES 0..16383)
*
* @param[out] mcCntrPtr                - (pointer to) multicast counter of a certain buffer
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device or cntrIdx
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrIdx" type="GT_U32"/>
    <Param class="int" dir="OUT" name="mcCntr" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgRxProfileGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgRxProfileGet function
* @endinternal
*
* @brief   Get the port's flow control profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] profileSetPtr            - (pointer to) the Profile Set in which the Flow Control
*                                      Parameters are associated.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgRxProfileSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgRxProfileSet function
* @endinternal
*
* @brief   Bind a port to a flow control profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] profileSet               - the Profile Set in which the Flow Control Parameters are
*                                      associated.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or profileSet
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PORT_RX_FC_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgTxDmaBurstLimitEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgTxDmaBurstLimitEnableGet function
* @endinternal
*
* @brief   Gets the current status for a given port of TXDMA burst limit thresholds use.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port supported as well).
*
* @param[out] enablePtr                - (pointer to)
*                                      GT_TRUE: TXDMA burst limit thresholds are used.
*                                      GT_FALSE: TXDMA burst limit thresholds are not used.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgTxDmaBurstLimitEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgTxDmaBurstLimitEnableSet function
* @endinternal
*
* @brief   For a given port Enable/Disable TXDMA burst limit thresholds use.
*         When enabled: instruct the TxDMA to throttle the Transmit Queue Scheduler
*         as a function of the TxDMA FIFOs fill level measured in bytes and descriptor.
*         When disabled: the TxDMA throttles the Transmit Queue Scheduler
*         based on FIFOs fill level measured in descriptors only.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port supported as well).
* @param[in] enable                   - GT_TRUE: TXDMA burst limit thresholds are used.
*                                      GT_FALSE: TXDMA burst limit thresholds are not used.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgTxDmaBurstLimitThresholdsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgTxDmaBurstLimitThresholdsGet function
* @endinternal
*
* @brief   Gets the TXDMA burst limit thresholds for a given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port supported as well).
*
* @param[out] almostFullThresholdPtr   - (pointer to) almost full threshold in Bytes.
* @param[out] fullThresholdPtr         - (pointer to) full threshold in Bytes.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="almostFullThreshold" type="GT_U32"/>
    <Param class="int" dir="OUT" name="fullThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortBufMgTxDmaBurstLimitThresholdsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortBufMg.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortBufMgTxDmaBurstLimitThresholdsSet function
* @endinternal
*
* @brief   Sets the TXDMA burst limit thresholds for a given port.
*         The TxDMA supports three throttling levels: Normal, Slow and OFF.
*         The levels are controlled using two thresholds (almostFullThreshold and
*         fullThreshold) measuring the FIFOs fill level.
*         Normal - the Transmit Queue scheduler is not throttled.
*         Slow - the Transmit Queue scheduler is throttled.
*         OFF - the Transmit Queue scheduler is paused.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port supported as well).
* @param[in] almostFullThreshold      - almost full threshold in Bytes (0..(0x80  0xFFFF)).
* @param[in] fullThreshold            - full threshold in Bytes (0..(0x80  0xFFFF)).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Resolution of almostFullThreshold and fullThreshold fields in hardware
*       is 128 Bytes.
*       The value is rounded down before write to HW.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="almostFullThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="fullThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnAvailableBuffGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnAvailableBuffGet function
* @endinternal
*
* @brief   Get amount of buffers available for dynamic allocation for CN.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] availableBuffPtr         - pointer to amount of buffers available for dynamic
*                                      allocation for CN.
*                                      RETURN:
*                                      GT_OK                    - on success
*                                      GT_FAIL                  - on error
*                                      GT_BAD_PTR               - on NULL pointer
*                                      GT_BAD_PARAM             - on wrong device number
*                                      GT_HW_ERROR              - on hardware error
*                                      GT_NOT_APPLICABLE_DEVICE - on not applicable device
*                                      COMMENTS:
*                                      None.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="availableBuff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnAvailableBuffSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnAvailableBuffSet function
* @endinternal
*
* @brief   Set amount of buffers available for dynamic allocation for CN.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] availableBuff            - amount of buffers available for dynamic allocation for
*                                      CN (APPLICABLE RANGES: 0..0x0FFFFF).
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="availableBuff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFbCalcConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFbCalcConfigGet function
* @endinternal
*
* @brief   Get Fb (Feedback) calculation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] fbCalcCfgPtr             - (pointer to) feedback Calculation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="fbCalcCfg" type="CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFbCalcConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFbCalcConfigSet function
* @endinternal
*
* @brief   Set Fb (Feedback) calculation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] fbCalcCfgPtr             - (pointer to) feedback Calculation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="fbCalcCfg" type="CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFcEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFcEnableGet function
* @endinternal
*
* @brief   Get the status of generation of flow control packets as result of CN
*         frame termination or Panic Pause on a given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] enablePtr                - (pointer to) state of specific port to generate
*                                      flow control packets.
*                                      GT_TRUE:  enable. Flow control packets is issued.
*                                      GT_FALSE: disable. Flow control packets is not issued.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFcEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFcEnableSet function
* @endinternal
*
* @brief   Enable/Disable generation of flow control packets as result of CN
*         frame termination or Panic Pause.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] enable                   - Enable/Disable generation of flow control packets
*                                      on specific port.
*                                      GT_TRUE:  enable. Flow control packets can be issued.
*                                      GT_FALSE: disable. Flow control packets can't be issued.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFcTimerGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFcTimerGet function
* @endinternal
*
* @brief   Get timer value for the IEEE 802.3x/PFC frame issued as result
*         of CN frame termination.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] index                    -  (APPLICABLE RANGES: 0..7)
*
* @param[out] timerPtr                 - (pointer to) 802.3x/PFC Pause time.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong port number, device or speed index
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="OUT" name="timer" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnFcTimerSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnFcTimerSet function
* @endinternal
*
* @brief   Set timer value for the IEEE 802.3x/PFC frame issued as result
*         of CN frame termination.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] index                    -  (APPLICABLE RANGES: 0..7)
* @param[in] timer                    - 802.3x/PFC pause time (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device or speed index
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="IN" name="timer" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageGenerationConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageGenerationConfigGet function
* @endinternal
*
* @brief   Get CNM generation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] cnmGenerationCfgPtr      - (pointer to) CNM generation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="cnmGenerationCfg" type="CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageGenerationConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageGenerationConfigSet function
* @endinternal
*
* @brief   Set CNM generation configuration.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] cnmGenerationCfgPtr      - (pointer to) CNM generation configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="cnmGenerationCfg" type="CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessagePortMapEntryGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessagePortMapEntryGet function
* @endinternal
*
* @brief   Get port map configuration per target port
*         for the triggered QCN incoming descriptor.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical target port number.
*
* @param[out] portsBmpPtr              - (pointer to) the bitmap of ports represent the target port number.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessagePortMapEntrySet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessagePortMapEntrySet function
* @endinternal
*
* @brief   Set port map configuration per target port
*         for the triggered QCN incoming descriptor.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical target port number.
* @param[in] portsBmp                 - the bitmap of ports represent the target port number.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="portsBmp" type="CPSS_PX_PORTS_BMP"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageTriggeringStateGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageTriggeringStateGet function
* @endinternal
*
* @brief   Get CNM Triggering State Variables
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @param[out] qcnSampleIntervalPtr     -  (pointer to) parameter that defines the probability to trigger
*                                      the next CN frame based on the current value of the
*                                      calculated feedback (Fb), measured in Bytes.
* @param[out] qlenOldPtr               - (pointer to) snapshot of current length of the queue in buffers,
*                                      taken when the QcnSampleInterval expires.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note qlenOld reset value and QcnSampleInterval init value must be set by the
*       application prior to configuring the queue to be CN aware
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U8"/>
    <Param class="int" dir="OUT" name="qcnSampleInterval" type="GT_U32"/>
    <Param class="int" dir="OUT" name="qlenOld" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageTriggeringStateSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageTriggeringStateSet function
* @endinternal
*
* @brief   Set CNM Triggering State Variables
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] tcQueue                  - traffic class queue (0..7).
* @param[in] qcnSampleInterval        -  parameter that defines the probability to trigger
*                                      the next CN frame based on the current value of the
*                                      calculated feedback (Fb), measured in Bytes.
*                                      (APPLICABLE RANGES: 0..0xFFFFF)
* @param[in] qlenOld                  - a snapshot of current length of the queue in buffers,
*                                      taken when the QcnSampleInterval expires.
*                                      (APPLICABLE RANGES: 0..0xFFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on out of range values
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note qlenOld reset value and QcnSampleInterval init value must be set by the
*       application prior to configuring the queue to be CN aware
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U8"/>
    <Param class="int" dir="IN" name="qcnSampleInterval" type="GT_U32"/>
    <Param class="int" dir="IN" name="qlenOld" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageTypeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageTypeGet function
* @endinternal
*
* @brief   Gets congestion notification message type - QCN or CCFC
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] mTypePtr                 - (pointer to) CN message type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="mType" type="CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnMessageTypeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnMessageTypeSet function
* @endinternal
*
* @brief   Sets congestion notification message type - QCN or CCFC
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] mType                    - CN message type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="mType" type="CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnModeEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnModeEnableGet function
* @endinternal
*
* @brief   Get the current status of Congestion Notification (CN) mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) status of congestion notification mechanism
*                                      GT_TRUE    - congestion notification mechanism is enabled.
*                                      GT_FALSE   - congestion notification mechanism is disabled.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnModeEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnModeEnableSet function
* @endinternal
*
* @brief   Enable/Disable Congestion Notification (CN) mechanism.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - Enable/disable congestion notification mechanism.
*                                      GT_TRUE    - Enable congestion notification mechanism.
*                                      GT_FALSE   - Disable congestion notification mechanism.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnPacketLengthGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnPacketLengthGet function
* @endinternal
*
* @brief   Get packet length used by the CN frames triggering logic.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] packetLengthPtr          - (pointer to) packet length.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="packetLength" type="CPSS_PX_PORT_CN_PACKET_LENGTH_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnPacketLengthSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnPacketLengthSet function
* @endinternal
*
* @brief   Set packet length used by the CN frames triggering logic.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] packetLength             - packet length.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or packet length.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="packetLength" type="CPSS_PX_PORT_CN_PACKET_LENGTH_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnProfileQueueConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnProfileQueueConfigGet function
* @endinternal
*
* @brief   Gets CN profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - profile set.
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @param[out] cnProfileCfgPtr          - pointer to CN Profile configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number, profile set
*                                       or traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="cnProfileCfg" type="CPSS_PX_PORT_CN_PROFILE_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnProfileQueueConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnProfileQueueConfigSet function
* @endinternal
*
* @brief   Sets CN profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - profile set.
* @param[in] tcQueue                  - traffic class queue (0..7).
* @param[in] cnProfileCfgPtr          - pointer to CN Profile configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number, profile set
*                                       or traffic class queue
* @retval GT_OUT_OF_RANGE          - on out of range threshold value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note CN Profile is part of the Tail-Drop Profile.
*       To bind port to Tail-Drop Profile use cpssPxPortTxTailDropProfileIdSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cnProfileCfg" type="CPSS_PX_PORT_CN_PROFILE_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnQueueStatusModeEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnQueueStatusModeEnableGet function
* @endinternal
*
* @brief   Gets the current status of queue status mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) status of queue status mode.
*                                      GT_TRUE: CNM is sent to a targetDev/targetPort.
*                                      GT_FALSE: CNM is sent to a sampled packet's source.
* @param[out] targetPortPtr            - (pointer to) Target port for the CNM.
*                                      Relevant only if enable==GT_TRUE.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="targetPort" type="GT_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnQueueStatusModeEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnQueueStatusModeEnableSet function
* @endinternal
*
* @brief   Enable/Disable queue status mode. When enabled, CNM is sent to a
*         configurable target that examines the queue status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE: CNM is sent to a targetDev/targetPort.
*                                      GT_FALSE: CNM is sent to a sampled packet's source.
* @param[in] targetPort               - Target port for the CNM.
*                                      Relevant only if enable==GT_TRUE.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="IN" name="targetPort" type="GT_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnSampleEntryGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnSampleEntryGet function
* @endinternal
*
* @brief   Get CN sample interval entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - index: qFb 3 msb. (0..7)
*
* @param[out] entryPtr                 - (pointer to) entry settings.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number, or entry index
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="entry" type="CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnSampleEntrySet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnSampleEntrySet function
* @endinternal
*
* @brief   Set CN sample interval entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] entryIndex               - index: qFb 3 msb. (0..7)
* @param[in] entryPtr                 - (pointer to) entry settings.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number, or entry index
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.To implement CCFC functionality set entryPtr fields to:
*       interval = (MTU+256b)/16
*       randBitmap = 0
*       2.To achieve uniform distribution of random values,
*       set the Interval LSbits to be randomized to 1.
*       For example, if Interval = 0xF0 and RndRange = 0x0F
*       then the Sampling Interval is a random value in [0xF0, 0xFF].
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="entryIndex" type="GT_U8"/>
    <Param class="struct" dir="IN" name="entry" type="CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnTerminationEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnTerminationEnableGet function
* @endinternal
*
* @brief   Gets the status of CNM termination on given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] enablePtr                - (pointer to)
*                                      GT_TRUE: enable. CNM is terminated, i.e not transmited on this port.
*                                      GT_FALSE: disable. CNM isn't terminated, i.e transmited on this port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number or port
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCnTerminationEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCnTerminationEnableSet function
* @endinternal
*
* @brief   Enable/Disable termination of CNM (Congestion Notification Message) on given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] enable                   - GT_TRUE: enable. CNM is terminated, i.e not transmited on this port.
*                                      GT_FALSE: disable. CNM isn't terminated, i.e transmited on this port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or port number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCpllCfgInit" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCpllCfgInit function
* @endinternal
*
* @brief   CPLL unit initialization routine.
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] cpllNum                  - CPLL unit index
*                                      (APPLICABLE RANGES: 0)
* @param[in] inputFreq                - CPLL input frequency
* @param[in] outputFreq               - CPLL output frequency
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note API should be called before any port with CPLL as reference clock
*       was created.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cpllNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="inputFreq" type="CPSS_PX_PORT_CPLL_INPUT_FREQUENCY_ENT"/>
    <Param class="enum" dir="IN" name="outputFreq" type="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCrcCheckEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCrcCheckEnableGet function
* @endinternal
*
* @brief   Get CRC checking (Enable/Disable) state for received packets.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] enablePtr                - Pointer to the CRS checking state :
*                                      GT_TRUE  - CRC checking is enable,
*                                      GT_FALSE - CRC checking is disable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCrcCheckEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCrcCheckEnableSet function
* @endinternal
*
* @brief   Enable/Disable 32-bit the CRC checking.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] enable                   - If GT_TRUE,  CRC checking
*                                      If GT_FALSE, disable CRC checking
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCrcNumBytesGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCrcNumBytesGet function
* @endinternal
*
* @brief   Get CRC num of bytes.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  none.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
* @param[in] portDirection            - TX/RX cascade port direction (ingress or egress)
*
* @param[out] numCrcBytesPtr           - num of crc bytes
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL ptr
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="portDirection" type="CPSS_PORT_DIRECTION_ENT"/>
    <Param class="int" dir="OUT" name="numCrcBytes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCrcNumBytesSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCrcNumBytesSet function
* @endinternal
*
* @brief   Set CRC num of bytes .
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  none.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
* @param[in] portDirection            - TX/RX cascade port direction
* @param[in] numCrcBytes              - number of crc bytes
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="portDirection" type="CPSS_PORT_DIRECTION_ENT"/>
    <Param class="int" dir="IN" name="numCrcBytes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCtleBiasOverrideEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCtleBiasOverrideEnableGet function
* @endinternal
*
* @brief   Set the override mode and the value of the CTLE Bias parameter per port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device Number.
* @param[in] portNum                  - port Number.
*
* @param[out] overrideEnablePtr        - pointer to override mode
* @param[out] ctleBiasValuePtr         - pointer to value of Ctle Bias [0..1]
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="overrideEnable" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="ctleBiasValue" type="CPSS_PX_PORT_CTLE_BIAS_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortCtleBiasOverrideEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortCtleBiasOverrideEnableSet function
* @endinternal
*
* @brief   Set the override mode and the value of the CTLE Bias parameter per port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - Device Number.
* @param[in] portNum                  - port Number.
* @param[in] overrideEnable           - override the CTLE default value
* @param[in] ctleBiasValue            - value of Ctle Bias [0..1]
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="overrideEnable" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="ctleBiasValue" type="CPSS_PX_PORT_CTLE_BIAS_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDuplexAutoNegEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDuplexAutoNegEnableGet function
* @endinternal
*
* @brief   Get enable/disable status of an Auto-Negotiation for MAC duplex mode
*         per port.
*         When duplex Auto-Negotiation is enabled, the port's duplex mode is
*         resolved via Auto-Negotiation. The Auto-Negotiation advertised duplex
*         mode is full-duplex.
*         When duplex cpssPxPortDuplexModeSet
*         The function does not configure the PHY connected to the port. It
*         configures only the MAC layer of the port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 - GT_TRUE for enable Auto-Negotiation for duplex mode,
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDuplexAutoNegEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDuplexAutoNegEnableSet function
* @endinternal
*
* @brief   Enable/disable an Auto-Negotiation for duplex mode on specified port on
*         specified device.
*         When duplex Auto-Negotiation is enabled, the port's duplex mode is
*         resolved via Auto-Negotiation. The Auto-Negotiation advertised duplex
*         mode is full-duplex.
*         When duplex Auto-Negotiation is disabled, the port's duplex mode is set
*         via cpssPxPortDuplexModeSet
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] state                    - GT_TRUE for enable Auto-Negotiation for duplex mode,
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported state
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.CPU port not supports the duplex auto negotiation
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDuplexModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDuplexModeGet function
* @endinternal
*
* @brief   Gets duplex mode for specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] dModePtr                 - duplex mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="dMode" type="CPSS_PORT_DUPLEX_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDuplexModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDuplexModeSet function
* @endinternal
*
* @brief   Set the port to enable and the port mode to half- or full-duplex mode.
*         When port is disabled it does not transmit pending packets and
*         drops packets received from the line.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number or CPU port
* @param[in] dMode                    - 0 = The port operates in half-duplex mode.
*                                      1 = The port operates in full-duplex mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or dMode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported duplex mode
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The <SetFullDx> bit is meaningless when <ANDuplex> is set.
*       For CPU port, this field must be set to reflect this port Duplex mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="dMode" type="CPSS_PORT_DUPLEX_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDynamicPizzaArbiterIfWorkConservingModeGet" srcpath="mainPxDrv/h/cpss/px/port/PizzaArbiter/DynamicPizzaArbiter/cpssPxPortDynamicPizzaArbiterWorkConserving.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDynamicPizzaArbiterIfWorkConservingModeGet function
* @endinternal
*
* @brief   get work conserving mode of one units
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] unit                     - RxDMA/TxDMA/TXQ/Tx-FIFO
*
* @param[out] statusPtr                - pointer to status.: enable (1) disable (0)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_SUPPORTED         - not supported
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="unit" type="CPSS_PX_PA_UNIT_ENT"/>
    <Param class="bool" dir="OUT" name="status" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortDynamicPizzaArbiterIfWorkConservingModeSet" srcpath="mainPxDrv/h/cpss/px/port/PizzaArbiter/DynamicPizzaArbiter/cpssPxPortDynamicPizzaArbiterWorkConserving.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortDynamicPizzaArbiterIfWorkConservingModeSet function
* @endinternal
*
* @brief   Configure work conserving mode at one or all units
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] unit                     - RxDMA/TxDMA/TXQ/Tx-FIFO or CPSS_PX_PA_UNIT_UNDEFINED_E (meaning all !!)
* @param[in] status                   - enable (1) disable (0)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_SUPPORTED         - not supported
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="unit" type="CPSS_PX_PA_UNIT_ENT"/>
    <Param class="bool" dir="IN" name="status" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEcnMarkingEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortEcn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEcnMarkingEnableGet function
* @endinternal
*
* @brief   Get status of ECN marking.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] protocolStack            - type of IP stack
*
* @param[out] enablePtr                - GT_TRUE: ECN marking enable
*                                      GT_FALSE: ECN marking disable
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on other error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum or protocolStack parameter
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="protocolStack" type="CPSS_IP_PROTOCOL_STACK_ENT"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEcnMarkingEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortEcn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEcnMarkingEnableSet function
* @endinternal
*
* @brief   Enable/Disable ECN marking.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] protocolStack            - type of IP stack
* @param[in] enable                   - GT_TRUE: ECN marking enable
*                                      GT_FALSE: ECN marking disable
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on other error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum or protocolStack parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="protocolStack" type="CPSS_IP_PROTOCOL_STACK_ENT"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEcnMarkingTailDropProfileEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortEcn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEcnMarkingTailDropProfileEnableGet function
* @endinternal
*
* @brief   Get Enable/Disable ECN marking per profile according to Tail Drop limits.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - tail drop profile ID
*
* @param[out] enablersPtr              - (pointer to) struct of enablers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on other error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum or profileSet
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="struct" dir="OUT" name="enablers" type="CPSS_PX_PORT_ECN_ENABLERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEcnMarkingTailDropProfileEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortEcn.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEcnMarkingTailDropProfileEnableSet function
* @endinternal
*
* @brief   Enable/Disable ECN marking per profile according to Tail Drop limits.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - tail drop profile ID
* @param[in] enablersPtr              - (pointer to) struct of enablers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on other error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - wrong devNum or profileSet
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="struct" dir="IN" name="enablers" type="CPSS_PX_PORT_ECN_ENABLERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEgressCntrModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEgressCntrModeGet function
* @endinternal
*
* @brief   Get configuration of egress counters set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrSetNum               - counter set number.
*                                      (APPLICABLE RANGE: 0..1).
*
* @param[out] setModeBmpPtr            - Pointer to counter mode bitmap. Supported counter mode:
*                                      CPSS_EGRESS_CNT_TC_E,
*                                      CPSS_EGRESS_CNT_DP_E,
*                                      CPSS_EGRESS_CNT_PORT_E.
* @param[out] portNumPtr               - Pointer to the egress port of the packets counted by
*                                      the set of counters
* @param[out] tcPtr                    - Pointer to the tc of the packets counted by the set
*                                      of counters.
* @param[out] dpLevelPtr               - Pointer to the dp of the packets counted by the set
*                                      of counters.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrSetNum" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="setModeBmp" type="CPSS_PORT_EGRESS_CNT_MODE_ENT"/>
    <Param class="int" dir="OUT" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="tc" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="dpLevel" type="CPSS_DP_LEVEL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEgressCntrModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEgressCntrModeSet function
* @endinternal
*
* @brief   Configure a set of egress counters that work in specified egress
*         counters mode on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrSetNum               - counter set number.
*                                      (APPLICABLE RANGE: 0..1).
* @param[in] setModeBmp               - counter mode bitmap. Supported counter mode:
*                                      CPSS_EGRESS_CNT_TC_E,
*                                      CPSS_EGRESS_CNT_DP_E,
*                                      CPSS_EGRESS_CNT_PORT_E.
*                                      Example:
*                                      CPSS_EGRESS_CNT_TC_E | CPSS_EGRESS_CNT_DP_E.
* @param[in] portNum                  - physical port number, if corresponding bit in setModeBmp is 1.
* @param[in] tc                       - traffic class queue, if corresponding bit in setModeBmp is 1.
*                                      (APPLICABLE RANGE: 0..7).
* @param[in] dpLevel                  - drop precedence level, if corresponding bit in setModeBmp is 1.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Supported DP levels:
*       CPSS_DP_GREEN_E,
*       CPSS_DP_RED_E.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrSetNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="setModeBmp" type="CPSS_PORT_EGRESS_CNT_MODE_ENT"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="enum" dir="IN" name="dpLevel" type="CPSS_DP_LEVEL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEgressCntrsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEgressCntrsGet function
* @endinternal
*
* @brief   Gets a egress counters from specific counter-set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrSetNum               - counter set number.
*                                      (APPLICABLE RANGE: 0..1).
*
* @param[out] egrCntrPtr               - (pointer to) structure of egress counters current values.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrSetNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="egrCntr" type="CPSS_PX_PORT_EGRESS_CNTR_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEnableGet function
* @endinternal
*
* @brief   Get the Enable/Disable status of a specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 - Pointer to the Get Enable/disable state of the port.
*                                      GT_TRUE for enabled port, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEnableSet function
* @endinternal
*
* @brief   Enable/disable a specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] enable                   - GT_TRUE:   port,
*                                      GT_FALSE: disable port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEomBaudRateGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEomBaudRateGet function
* @endinternal
*
* @brief   Returns the current system baud rate.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - system device number
* @param[in] portNum                  - port  number
* @param[in] serdesNum                - local serdes number
*
* @param[out] baudRatePtr              - current system baud rate in pico-seconds.
*
* @retval GT_OK                    - on success
* @retval else                     - on error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="baudRate" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortEomDfeResGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortEomDfeResGet function
* @endinternal
*
* @brief   Returns the current DFE parameters.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - system device number
* @param[in] portNum                  - port  number
* @param[in] serdesNum                - local serdes number
*
* @param[out] dfeResPtr                - current DFE V in millivolts
*
* @retval GT_OK                    - on success
* @retval else                     - on error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="dfeRes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortExcessiveCollisionDropEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortExcessiveCollisionDropEnableGet function
* @endinternal
*
* @brief   Gets status of excessive collision packets drop.
*         In half duplex mode if a collision occurs the device tries to transmit
*         the packet again. If the number of collisions on the same packet is 16
*         and excessive collision packets drop is enabled,
*         the packet is dropped.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port).
*
* @param[out] enablePtr                - pointer to status of excessive collision packets drop.
*                                      - GT_TRUE  - if the number of collisions on the same packet
*                                      is 16 the packet is dropped.
*                                      - GT_FALSE - A collided packet will be retransmitted by
*                                      device until it is transmitted
*                                      without collisions, regardless of the number
*                                      of collisions on the packet.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*
* @note 1. Not relevant in full duplex mode
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortExcessiveCollisionDropEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortExcessiveCollisionDropEnableSet function
* @endinternal
*
* @brief   Enable/Disable excessive collision packets drop.
*         In half duplex mode if a collision occurs the device tries to transmit
*         the packet again. If the number of collisions on the same packet is 16
*         and excessive collision packets drop is enabled,
*         the packet is dropped.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port).
* @param[in] enable                   - GT_TRUE  - if the number of collisions on the same packet
*                                      is 16 the packet is dropped.
*                                      - GT_FALSE - A collided packet will be retransmitted by device
*                                      until it is transmitted without collisions,
*                                      regardless of the number of collisions on the packet.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
*
* @note The setting is not relevant in full duplex mode
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortExtraIpgGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortExtraIpgGet function
* @endinternal
*
* @brief   Gets the number of 32-bit words to add to the 12-byte IPG.
*         Hence, 12+4ExtraIPG is the basis for the entire IPG calculation.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] numberPtr                -  pointer to number of words
*                                      (APPLICABLE RANGES: 0..127)
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - the number is out of range
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPxPortExtraIpgSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortExtraIpgSet function
* @endinternal
*
* @brief   Sets the number of 32-bit words to add to the 12-byte IPG.
*         Hence, 12+4ExtraIPG is the basis for the entire IPG calculation.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] number                   -   of words
*                                      (APPLICABLE RANGES: 0..127)
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - the number is out of range
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="number" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFaultSendSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFaultSendSet function
* @endinternal
*
* @brief   Configure the port to start or stop sending fault signals to partner.
*         When port is configured to send, link on both sides will be down.
*
* @note   APPLICABLE DEVICES:      Pipe;
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] ifMode                   - port interface mode
* @param[in] speed                    - port speed
* @param[in] send                     - or stop sending
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="bool" dir="IN" name="send" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFecModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFecModeGet function
* @endinternal
*
* @brief   Read current Forward error correction (FEC) mode of port
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] modePtr                  - current Forward error correction mode
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_INITIALIZED       - if port not configured
* @retval GT_BAD_PTR               - modePtr == NULL
* @retval GT_NOT_SUPPORTED         - if FEC not supported on interface mode defined now on port
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFecModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFecModeSet function
* @endinternal
*
* @brief   Configure Forward error correction (FEC) mode of port
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] mode                     - Forward error correction mode
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_INITIALIZED       - if port not configured
* @retval GT_NOT_SUPPORTED         - if FEC not supported on interface mode defined now on port
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowCntrlAutoNegEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowCntrlAutoNegEnableGet function
* @endinternal
*
* @brief   Get Auto-Negotiation enable/disable state for Flow Control per port
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 -   GT_TRUE for enable Auto-Negotiation for Flow Control
*                                      GT_FALSE otherwise
* @param[out] pauseAdvertisePtr        - Advertise symmetric flow control support in
*                                      Auto-Negotiation. 0 = Disable, 1 = Enable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note CPU port not supports the flow control auto negotiation
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="pauseAdvertise" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowCntrlAutoNegEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowCntrlAutoNegEnableSet function
* @endinternal
*
* @brief   Enable/disable an Auto-Negotiation for Flow Control on
*         specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] state                    - GT_TRUE for enable Auto-Negotiation for Flow Control
*                                      GT_FALSE otherwise
* @param[in] pauseAdvertise           - Advertise symmetric flow control support in
*                                      Auto-Negotiation. 0 = Disable, 1 = Enable.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported state
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.CPU port not supports the flow control auto negotiation
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="pauseAdvertise" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowControlEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowControlEnableGet function
* @endinternal
*
* @brief   Get status of 802.3x Flow Control on specific logical port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] statePtr                 - Pointer to Flow Control state: Both disabled,
*                                      Both enabled, Only Rx or Only Tx enabled.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="state" type="CPSS_PORT_FLOW_CONTROL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowControlEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowControlEnableSet function
* @endinternal
*
* @brief   Enable/disable receiving and transmission of 802.3x Flow Control frames
*         in full duplex on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] state                    - Flow Control state: Both disabled,
*                                      Both enabled, Only Rx or Only Tx enabled.
*                                      Note: only XG ports can be configured in all 4 options,
*                                      Tri-Speed ports may use only first two.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, state or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Before calling cpssPxPortFlowControlEnableSet,
*       cpssPxPortPeriodicFlowControlCounterSet should be called
*       to set the interval between the transmission of two consecutive
*       Flow Control packets according to port speed
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="state" type="CPSS_PORT_FLOW_CONTROL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowControlModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowControlModeGet function
* @endinternal
*
* @brief   Gets Flow Control mode on given port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number, CPU port number.
*
* @param[out] fcModePtr                - flow control mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="fcMode" type="CPSS_PX_PORT_FC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortFlowControlModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortFlowControlModeSet function
* @endinternal
*
* @brief   Sets Flow Control mode on given port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number, CPU port number.
* @param[in] fcMode                   - flow control mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note This function also configures insertion of DSA tag for PFC frames.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="fcMode" type="CPSS_PX_PORT_FC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForceLinkDownEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForceLinkDownEnableGet function
* @endinternal
*
* @brief   Get Force Link Down on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 - (ptr to) current force link down state:
*                                      GT_TRUE for force link down, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - NULL pointer in statePtr
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForceLinkDownEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForceLinkDownEnableSet function
* @endinternal
*
* @brief   Enable/disable Force Link Down on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] state                    - GT_TRUE for force link down, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForceLinkPassEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForceLinkPassEnableGet function
* @endinternal
*
* @brief   Get Force Link Pass on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 - (ptr to) current force link pass state:
*                                      GT_TRUE for force link pass, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - NULL pointer in statePtr
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForceLinkPassEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForceLinkPassEnableSet function
* @endinternal
*
* @brief   Enable/disable Force Link Pass on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] state                    - GT_TRUE for force link pass, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForward802_3xEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForward802_3xEnableGet function
* @endinternal
*
* @brief   Get status of 802.3x frames forwarding on a specified port
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port not supported)
*
* @param[out] enablePtr                - status of 802.3x frames forwarding
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note A packet is considered a valid Flow Control packet (i.e., it may be used
*       to halt the port�s packet transmission if it is an XOFF packet, or to
*       resume the port�s packets transmission, if it is an XON packet) if all of
*       the following are true:
*       - Packet�s Length/EtherType field is 88-08
*       - Packet�s OpCode field is 00-01
*       - Packet�s MAC DA is 01-80-C2-00-00-01 or the port�s configured MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForward802_3xEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForward802_3xEnableSet function
* @endinternal
*
* @brief   Enable/disable forwarding of 802.3x Flow Control frames to the ingress
*         pipeline of a specified port. Processing of 802.3x Flow Control frames
*         is done like regular data frames if forwarding enabled.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port not supported)
* @param[in] enable                   - GT_TRUE:  forward 802.3x frames to the ingress pipe,
*                                      GT_FALSE: do not forward 802.3x frames to the ingress pipe.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note A packet is considered a valid Flow Control packet (i.e., it may be used
*       to halt the port�s packet transmission if it is an XOFF packet, or to
*       resume the port�s packets transmission, if it is an XON packet) if all of
*       the following are true:
*       - Packet�s Length/EtherType field is 88-08
*       - Packet�s OpCode field is 00-01
*       - Packet�s MAC DA is 01-80-C2-00-00-01 or the port�s configured MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForwardUnknownMacControlFramesEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForwardUnknownMacControlFramesEnableGet function
* @endinternal
*
* @brief   Get current status of unknown MAC control frames
*         forwarding on a specified port
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port not supported)
*
* @param[out] enablePtr                - status of unknown MAC control frames forwarding
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note A packet is considered as an unknown MAC control frame if all of
*       the following are true:
*       - Packet�s Length/EtherType field is 88-08
*       - Packet�s OpCode field is not 00-01 and not 01-01
*       OR
*       Packet�s MAC DA is not 01-80-C2-00-00-01 and not the port�s configured
*       MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortForwardUnknownMacControlFramesEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortForwardUnknownMacControlFramesEnableSet function
* @endinternal
*
* @brief   Enable/disable forwarding of unknown MAC control frames to the ingress
*         pipeline of a specified port. Processing of unknown MAC control frames
*         is done like regular data frames if forwarding enabled.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (CPU port not supported)
* @param[in] enable                   - GT_TRUE:  forward unknown MAC control frames to the ingress pipe,
*                                      GT_FALSE: do not forward unknown MAC control frames to
*                                      the ingress pipe.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note A packet is considered as an unknown MAC control frame if all of
*       the following are true:
*       - Packet�s Length/EtherType field is 88-08
*       - Packet�s OpCode field is not 00-01 and not 01-01
*       OR
*       Packet�s MAC DA is not 01-80-C2-00-00-01 and not the port�s configured
*       MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInBandAutoNegBypassEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInBandAutoNegBypassEnableGet function
* @endinternal
*
* @brief   Gets Auto-Negotiation by pass status.
*         If the link partner doesn't respond to Auto-Negotiation process,
*         the link is established by bypassing the Auto-Negotiation procedure.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
*
* @param[out] enablePtr                - pointer to Auto-Negotiation by pass status.
*                                      - GT_TRUE  - Auto-Negotiation can't be bypassed.
*                                      - GT_FALSE - Auto-Negotiation is bypassed.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_NOT_SUPPORTED         - The feature is not supported the port/device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*
* @note Relevant when Inband Auto-Negotiation is enabled.
*       (See cpssPxPortInbandAutoNegEnableSet.)
*       Although for XGMII (10 Gbps) ports feature is not supported the function
*       lets application to configure it
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInBandAutoNegBypassEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInBandAutoNegBypassEnableSet function
* @endinternal
*
* @brief   Enable/Disable Auto-Negotiation by pass.
*         If the link partner doesn't respond to Auto-Negotiation process,
*         the link is established by bypassing the Auto-Negotiation procedure.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
* @param[in] enable                   - GT_TRUE  - Auto-Negotiation can't be bypassed.
*                                      - GT_FALSE - Auto-Negotiation is bypassed.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_NOT_SUPPORTED         - The feature is not supported the port/device
* @retval GT_FAIL                  - on error
*
* @note Relevant when Inband Auto-Negotiation is enabled.
*       (See cpssPxPortInbandAutoNegEnableSet.)
*       Although for XGMII (10 Gbps) ports feature is not supported the function
*       lets application to configure it
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInbandAutoNegEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInbandAutoNegEnableGet function
* @endinternal
*
* @brief   Gets Auto-Negotiation mode of MAC for a port.
*         The Tri-Speed port MAC may operate in one of the following two modes:
*         - SGMII Mode - In this mode, Auto-Negotiation may be performed
*         out-of-band via the device's Master SMI interface or in-band.
*         The function sets the mode of Auto-Negotiation to in-band or
*         out-of-band.
*         - 1000BASE-X mode - In this mode, the port operates at 1000 Mbps,
*         full-duplex only and supports in-band Auto-Negotiation for link and
*         for Flow Control.
*         The function set in-band Auto-Negotiation mode only.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] enablePtr                - GT_TRUE  - Auto-Negotiation works in in-band mode.
*                                      GT_FALSE - Auto-Negotiation works in out-of-band via
*                                      the device's Master SMI interface mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - The feature is not supported the port/device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Not supported for CPU port.
*       SGMII port In-band Auto-Negotiation is performed by the PCS layer to
*       establish link, speed, and duplex mode.
*       1000BASE-X port In-band Auto-Negotiation is performed by the PCS layer
*       to establish link and flow control support.
*       Although for XGMII (10 Gbps) ports feature is not supported the function
*       lets application to configure it
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInbandAutoNegEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInbandAutoNegEnableSet function
* @endinternal
*
* @brief   Configure Auto-Negotiation mode of MAC for a port.
*         The Tri-Speed port MAC may operate in one of the following two modes:
*         - SGMII Mode - In this mode, Auto-Negotiation may be performed
*         out-of-band via the device's Master SMI interface or in-band.
*         The function sets the mode of Auto-Negotiation to in-band or
*         out-of-band.
*         - 1000BASE-X mode - In this mode, the port operates at 1000 Mbps,
*         full-duplex only and supports in-band Auto-Negotiation for link and
*         for Flow Control.
*         The function set in-band Auto-Negotiation mode only.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] enable                   - GT_TRUE  - Auto-Negotiation works in in-band mode.
*                                      GT_FALSE - Auto-Negotiation works in out-of-band via
*                                      the device's Master SMI interface mode.
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - The feature is not supported the port/device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Not supported for CPU port.
*       SGMII port In-band Auto-Negotiation is performed by the PCS layer to
*       establish link, speed, and duplex mode.
*       1000BASE-X port In-band Auto-Negotiation is performed by the PCS layer
*       to establish link and flow control support.
*       The change of the Auto-Negotiation causes temporary change of the link
*       to down and up for ports with link up.
*       Although for XGMII (10 Gbps) ports feature is not supported the function
*       lets application to configure it
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInbandAutoNegRestart" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInbandAutoNegRestart function
* @endinternal
*
* @brief   Restart inband auto-negotiation. Relevant only when inband auto-neg.
*         enabled.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - The feature is not supported the port/device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInterfaceModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInterfaceModeGet function
* @endinternal
*
* @brief   Gets Interface mode on a specified port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] ifModePtr                - interface mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - wrong media interface mode value received
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInterfaceSpeedSupportGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInterfaceSpeedSupportGet function
* @endinternal
*
* @brief   Check if given pair ifMode and speed supported by given port on
*         given device
*
* @note   APPLICABLE DEVICES:      pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number (not CPU port)
* @param[in] ifMode                   - interface mode
* @param[in] speed                    - port data speed
*
* @param[out] supportedPtr             ? GT_TRUE ? (ifMode; speed) supported
*                                      GT_FALSE ? (ifMode; speed) not supported
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - if one of input parameters wrong
* @retval GT_BAD_PTR               - if supportedPtr is NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="bool" dir="OUT" name="supported" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInternalLoopbackEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInternalLoopbackEnableGet function
* @endinternal
*
* @brief   Get the internal Loopback state in the packet processor MAC port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] enablePtr                - Pointer to the Loopback state.
*                                      If GT_TRUE, loopback is enabled
*                                      If GT_FALSE, loopback is disabled
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortInternalLoopbackEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortInternalLoopbackEnableSet function
* @endinternal
*
* @brief   Set the internal Loopback state in the packet processor MAC port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] enable                   - If GT_TRUE,  loopback
*                                      If GT_FALSE, disable loopback
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortIpgBaseGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortIpgBaseGet function
* @endinternal
*
* @brief   Gets IPG base for fixed IPG mode on XG ports.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] ipgBasePtr               - pointer to IPG base
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*
* @note Relevant only when XG Port is in CPSS_PORT_XGMII_FIXED_E mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="ipgBase" type="CPSS_PORT_XG_FIXED_IPG_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortIpgBaseSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortIpgBaseSet function
* @endinternal
*
* @brief   Sets IPG base for fixed IPG mode on XG ports.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] ipgBase                  - IPG base
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device or ipgBase
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Relevant only when XG Port is in CPSS_PORT_XGMII_FIXED_E mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ipgBase" type="CPSS_PORT_XG_FIXED_IPG_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortIpgGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortIpgGet function
* @endinternal
*
* @brief   Gets the Inter-Packet Gap (IPG) interval of a tri-speed physical port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
*
* @param[out] ipgPtr                   - (pointer to) IPG value in bytes
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on wrong port type
* @retval GT_BAD_PARAM             - on bad parameter
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="ipg" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortIpgSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortIpgSet function
* @endinternal
*
* @brief   Sets the Inter-Packet Gap (IPG) interval of a tri-speed physical port.
*         Using this API may be required to enable wire-speed in traffic paths
*         that include cascading ports, where it may not be feasible to reduce
*         the preamble length.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
* @param[in] ipg                      - IPG in bytes, acceptable range:
*                                      (APPLICABLE RANGES: 0..511) (APPLICABLE DEVICES pipe)
*                                      Default HW value is 12 bytes.
*                                       for CG MAC -->
*                                       1-8 means IPG depend on
*                                       packet size, move
*                                       between 1byte to 8byte
*                                       12 -> mechanism of IPG
*                                       is enabled to create
*                                       average IPG of 12 any
*                                       other setting are
*                                       discarded
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on wrong port type
* @retval GT_OUT_OF_RANGE          - ipg value out of range
* @retval GT_BAD_PARAM             - on bad parameter
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="ipg" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortLinkStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortLinkStatusGet function
* @endinternal
*
* @brief   Gets Link Status of specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] isLinkUpPtr              - GT_TRUE for link up, GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isLinkUp" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortListForTestCreate" srcpath="embeddedCommands/px/pxEC/h/cpssPxEmbCom.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortListForTestCreate function
* @endinternal
*
* @brief   Function creates list of ports for testing
*
* @note   APPLICABLE DEVICES:      PIPE
* @note   NOT APPLICABLE DEVICES:  none.
*
* @param[in] devNum
* @param[in] startPortNum
* @param[in] endPortNum
* @param[in] numberOfLanes
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on failure
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="startPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="endPortNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="numberOfLanes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCounterCaptureGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCounterCaptureGet function
* @endinternal
*
* @brief   Gets the captured Ethernet MAC counter for a specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] cntrName                 - specific counter name
*
* @param[out] cntrValuePtr             - (pointer to) current counter value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number, device or counter name
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="cntrName" type="CPSS_PX_PORT_MAC_COUNTER_ENT"/>
    <Param class="struct" dir="OUT" name="cntrValue" type="GT_U64"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCounterGet function
* @endinternal
*
* @brief   Gets specific MAC MIB counter of a specific port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] cntrName                 - specific counter name
*
* @param[out] cntrValuePtr             - (pointer to) current counter value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number, device or counter name
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="cntrName" type="CPSS_PX_PORT_MAC_COUNTER_ENT"/>
    <Param class="struct" dir="OUT" name="cntrValue" type="GT_U64"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersCaptureOnPortGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersCaptureOnPortGet function
* @endinternal
*
* @brief   Gets captured Ethernet MAC counter for a particular Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] portMacCounterSetArrayPtr - (pointer to) array of current counter values.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portMacCounterSetArray" type="CPSS_PX_PORT_MAC_COUNTERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersCaptureTriggerGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersCaptureTriggerGet function
* @endinternal
*
* @brief   The function gets status of a capture of MIB counters for specific port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
*
* @param[out] captureIsDonePtr         - pointer to status of Capture counter Trigger
*                                      GT_TRUE  - capture is done.
*                                      GT_FALSE - capture action is in proccess.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To get the counters, see:
*       cpssPxPortMacCountersCaptureOnPortGet,
*       cpssPxPortMacCounterCaptureGet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="captureIsDone" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersCaptureTriggerSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersCaptureTriggerSet function
* @endinternal
*
* @brief   The function triggers a capture of MIB counters for specific port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number, whose counters are to be captured.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_STATE             - previous capture operation isn't finished.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To get the counters, see:
*       cpssPxPortMacCountersCaptureOnPortGet,
*       cpssPxPortMacCounterCaptureGet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersClearOnReadGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersClearOnReadGet function
* @endinternal
*
* @brief   Get 'Clear on read' status of MAC Counters on the port
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
*
* @param[out] enablePtr                - (pointer to) 'Clear on read' status for MAC counters
*                                      GT_FALSE - Counters are not cleared.
*                                      GT_TRUE - Counters are cleared.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersClearOnReadSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersClearOnReadSet function
* @endinternal
*
* @brief   Enable or disable MAC Counters 'Clear on read' on the port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
* @param[in] enable                   -  clear on read for MAC counters
*                                      GT_FALSE - Counters are not cleared.
*                                      GT_TRUE - Counters are cleared.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersEnableGet function
* @endinternal
*
* @brief   Get state (enabled/disable) of MAC Counters update
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] enablePtr                - state of the MAC counters
*                                      GT_FALSE = MAC counters update for this port is disabled.
*                                      GT_TRUE  = MAC counters update for this port is enabled.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device number or wrong physical
*                                       port number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - the register's address is not found
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersEnableSet function
* @endinternal
*
* @brief   Enable or disable MAC Counters update for this port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] enable                   -  update of MAC counters
*                                      GT_FALSE = MAC counters update for this port is disabled.
*                                      GT_TRUE = MAC counters update for this port is enabled.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device number or wrong physical
*                                       port number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersOnCgPortGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersOnCgPortGet function
* @endinternal
*
* @brief   Gets the CG mac mib counters as is without any conversion.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] cgMibStcPtr              - (pointer to) CG mac mib structure
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number, device or counter name
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on not supported port
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="cgMibStc" type="CPSS_PORT_MAC_CG_COUNTER_SET_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersOnPortGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersOnPortGet function
* @endinternal
*
* @brief   Gets ALL MAC MIB counters of a specific port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] countersPtr              - (pointer to) counters values.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="counters" type="CPSS_PX_PORT_MAC_COUNTERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersRxHistogramEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersRxHistogramEnableGet function
* @endinternal
*
* @brief   Get state (enabled/disabled) of the RMON Etherstat histogram counters
*         for received packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
*
* @param[out] enablePtr                - state of the counters for received packets
*                                      GT_TRUE  - counters are enabled.
*                                      GT_FALSE - counters are disabled.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device or physical port number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - the register's address is not found
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersRxHistogramEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersRxHistogramEnableSet function
* @endinternal
*
* @brief   Enable/disable updating of the RMON Etherstat histogram counters for
*         received packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
* @param[in] enable                   -  updating of the counters for received packets
*                                      GT_TRUE  - counters are updated.
*                                      GT_FALSE - counters are not updated.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device or physical port number.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersTxHistogramEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersTxHistogramEnableGet function
* @endinternal
*
* @brief   Get state (enabled/disabled) of the RMON Etherstat histogram counters
*         for transmitted packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
*
* @param[out] enablePtr                - state of the counters for transmitted packets
*                                      GT_TRUE  - counters are enabled.
*                                      GT_FALSE - counters are disabled.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device or physical port number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - the register's address is not found
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacCountersTxHistogramEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacCountersTxHistogramEnableSet function
* @endinternal
*
* @brief   Enable/disable updating of the RMON Etherstat histogram counters for
*         transmitted packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number
* @param[in] enable                   -  updating of the counters for transmitted packets
*                                      GT_TRUE  - counters are updated.
*                                      GT_FALSE - counters are not updated.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device or physical port number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacOversizedPacketsCounterModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacOversizedPacketsCounterModeGet function
* @endinternal
*
* @brief   Gets MIB counters behavior for oversized packets on given port,
*         that relate to counters:
*         CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_MAX_OCTETS_E
*         CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_1518_OCTETS_E
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] counterModePtr           - (pointer to) oversized packets counter mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="counterMode" type="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacOversizedPacketsCounterModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacOversizedPacketsCounterModeSet function
* @endinternal
*
* @brief   Sets MIB counters behavior for oversized packets on given port,
*         that relate to counters:
*         CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_MAX_OCTETS_E
*         CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_1518_OCTETS_E
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  NONE.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] counterMode              - oversized packets counter mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number, device or counter mode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="counterMode" type="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacResetStateSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacResetStateSet function
* @endinternal
*
* @brief   Set MAC Reset state on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number (or CPU port)
* @param[in] state                    - Reset state
*                                      GT_TRUE   - Port MAC is under Reset
*                                      GT_FALSE - Port MAC is Not under Reset, normal operation
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacSaBaseGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacSaBaseGet function
* @endinternal
*
* @brief   Gets the base part (40 upper bits) of all device's ports MAC addresses.
*         Port MAC addresses are used as the MAC SA for Flow Control Packets
*         transmitted by the device.In addition these addresses can be used as
*         MAC DA for Flow Control packets received by these ports.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] macPtr                   - (pointer to)The system Mac address.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The upper 40 bits of the MAC Address are the same for all ports in the
*       device and the lower eight bits are unique per port.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="mac" special="string" type="GT_ETHERADDR"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacSaBaseSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacSaBaseSet function
* @endinternal
*
* @brief   Sets the base part(40 upper bits) of all device's ports MAC addresses.
*         Port MAC addresses are used as the MAC SA for Flow Control Packets
*         transmitted by the device. In addition these addresses can be used as
*         MAC DA for Flow Control packets received by these ports.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] macPtr                   - (pointer to)The system Mac address to set.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The upper 40 bits of the MAC Address are the same for all ports in the
*       device and the lower eight bits are unique per port.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="mac" special="string" type="GT_ETHERADDR"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacSaLsbGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacSaLsbGet function
* @endinternal
*
* @brief   Get the least significant byte of the MAC SA of specified port on
*         specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] macSaLsbPtr              - (pointer to) The ls byte of the MAC SA
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The upper 40 bits of the MAC Address are the same for all ports in the
*       device and the lower eight bits are unique per port.The upper 40 bits
*       are configured by cpssPxPortMacSaBaseSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="macSaLsb" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacSaLsbSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacSaLsbSet function
* @endinternal
*
* @brief   Set the least significant byte of the MAC SA of specified port on
*         specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] macSaLsb                 - The ls byte of the MAC SA
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The upper 40 bits of the MAC Address are the same for all ports in the
*       device and the lower eight bits are unique per port. The upper 40 bits
*       are configured by cpssPxPortMacSaBaseSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="macSaLsb" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacStatusGet function
* @endinternal
*
* @brief   Reads bits that indicate different problems on specified port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] portMacStatusPtr         - info about port MAC
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portMacStatus" type="CPSS_PORT_MAC_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMacTypeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMacTypeGet function
* @endinternal
*
* @brief   Get port MAC type.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] portMacTypePtr           - (pointer to) port MAC type
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="portMacType" type="CPSS_PORT_MAC_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerEventSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerEventSet function
* @endinternal
*
* @brief   Set the port according to the given event. This API performs actions based on
*         the given event and will transfer the port to a new state. For example, when port
*         is in PORT_MANAGER_STATE_RESET_E state and event PORT_MANAGER_EVENT_CREATE_E is called,
*         this API will perform port creation operations and upon success, port state will be
*         changed to PORT_MANAGER_STATE_LINK_DOWN_E state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] portEventStcPtr          - (pointer to) structure containing the event data
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="portEventStc" type="CPSS_PORT_MANAGER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerGlobalParamsOverride" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerGlobalParamsOverride function
* @endinternal
*
* @brief  To use this function for overide, need to give it a
*         struct that include parameters to override, and to
*         enable override flag to 1, else it's will not override
*         and use defualts values.
*         Don't forget to fill the globalParamstType enum with
*         the match enum of what you want to override.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] globalParamsStc          - stc with the parameters
*                                       to override
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To add other globals parameter to the struct, make sure
*       to add enum and enable flag for the set of values.
*       *See CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC as a
*        good format to add other parameters.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="IN" name="globalParamsStc" type="CPSS_PORT_MANAGER_GLOBAL_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerInit" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerInit function
* @endinternal
*
* @brief  Port Manager Init system - this function is
*         responsible on all configurations that till now was
*         application responsiblity.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  .
*
* @param[in] devNum                   - physical device number
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note none.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerPortParamsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerPortParamsGet function
* @endinternal
*
* @brief   Get the attributes of a port. In case port was created, this API will return
*         all the current attributes of the port. In case the port was not created yet
*         this API will return all the attributes the port will be configured with upon
*         creation. This API is not applicable if port is in
*         CPSS_PORT_MANAGER_STATE_RESET_E state and previous call to
*         cpssPxPortManagerPortParamsSet have not been made.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] portParamsStcPtr         - (pointer to) a structure contains port configurations
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portParamsStc" type="CPSS_PM_PORT_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerPortParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerPortParamsSet function
* @endinternal
*
* @brief   Set the given attributes to a port. Those configurations will take place
*         during the port management. This API is applicable only when port is in
*         reset (PORT_MANAGER_STATE_RESET_E state).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] portParamsStcPtr         - (pointer to) a structure contains port configurations
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="portParamsStc" type="CPSS_PM_PORT_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerPortParamsStructInit" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerPortParamsStructInit function
* @endinternal
*
* @brief  This API resets the Port Manager Parameter structure
*         so once the application update the structure with
*         relevant data - all other feilds are clean for sure.
*         Application must call this API before calling
*         cpssPxPortManagerPortParamsSet.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:
*
* @param[in,out] portParamsStcPtr   - (pointer to) a structure
*       contains port configurations
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note none
*
*/]]>   </Comment>
   <Params>
    <Param class="enum" dir="IN" name="portType" type="CPSS_PORT_MANAGER_PORT_TYPE_ENT"/>
    <Param class="struct" dir="INOUT" name="portParamsStc" type="CPSS_PM_PORT_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortManagerStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortManagerStatusGet function
* @endinternal
*
* @brief   Get the status of the port. This API will return (1) State of the port
*         within the port manager state machine (2) Whether or not port have been
*         disabled (using PORT_MANAGER_EVENT_DISABLE_E event) (3) Failure status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portStage" type="CPSS_PORT_MANAGER_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortModeSpeedSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortModeSpeedSet function
* @endinternal
*
* @brief   Configure Interface mode and speed on a specified port and execute
*         on port's serdeses power up sequence; or configure power down on port's
*         serdeses.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portsBmpPtr              - (pointer to) physical ports bitmap (or CPU port)
* @param[in] powerUp                  - serdes power:
*                                      GT_TRUE - up;
*                                      GT_FALSE - down;
* @param[in] ifMode                   - interface mode (related only for serdes power up [powerUp==GT_TRUE])
* @param[in] speed                    - port data  (related only for serdes power up [powerUp==GT_TRUE])
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported interface for given port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The API rolls back a port's mode and speed to their last values
*       if they cannot be set together on the device.
*       Pay attention! Before configure CPSS_PORT_INTERFACE_MODE_NO_SERDES_PORT_E
*       MUST execute power down for port with this interface.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="portsBmp" type="CPSS_PORTS_BMP_STC"/>
    <Param class="bool" dir="IN" name="powerUp" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMruGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMruGet function
* @endinternal
*
* @brief   Gets the Maximal Receive Packet size for specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] mruSizePtr               - (pointer to) max receive packet size in bytes. 10K+64 (including 4 bytes CRC)
*                                      value must be even
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or
*                                       odd value of mruSize
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - mruSize > 10304
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="mruSize" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortMruSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortMruSet function
* @endinternal
*
* @brief   Sets the Maximal Receive Packet size for specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] mruSize                  - max receive packet size in bytes.
*                                      (APPLICABLE RANGES: 0..10304) - jumbo frame + 64 (including
*                                      4 bytes CRC). Value must be even.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or
*                                       odd value of mruSize
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - mruSize > 10304
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="mruSize" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPaddingEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPaddingEnableGet function
* @endinternal
*
* @brief   Gets padding status of transmitted packets shorter than 64B.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port).
*
* @param[out] enablePtr                - pointer to packet padding status.
*                                      - GT_TRUE  - Pad short packet in Tx.
*                                      - GT_FALSE - No padding in short packets.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPaddingEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPaddingEnableSet function
* @endinternal
*
* @brief   Enable/Disable padding of transmitted packets shorter than 64B.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port).
* @param[in] enable                   - GT_TRUE  - Pad short packet in Tx.
*                                      - GT_FALSE - No padding in short packets.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsGearBoxStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsGearBoxStatusGet function
* @endinternal
*
* @brief   Return PCS Gear Box lock status (true - locked /false - not locked).
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] gbLockPtr                - Gear Box lock state on serdes:
*                                      GT_TRUE  - locked;
*                                      GT_FALSE - not locked.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - gbLockPtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="gbLock" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsLoopbackModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsLoopbackModeGet function
* @endinternal
*
* @brief   Configure loopback of specific type on PCS.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] modePtr                  - current loopback type or no loopback
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - modePtr == NULL
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_PORT_PCS_LOOPBACK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsLoopbackModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsLoopbackModeSet function
* @endinternal
*
* @brief   Configure loopback of specific type on PCS.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] mode                     - define loopback type or no loopback
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_PORT_PCS_LOOPBACK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsResetSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsResetSet function
* @endinternal
*
* @brief   Set/unset the PCS reset for given mode on port.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] mode                     - Tx/Rx/All
* @param[in] state                    - If GT_TRUE, enable reset
*                                      If GT_FALSE, disable reset
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Reset only PCS unit used by port for currently configured interface.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PORT_PCS_RESET_MODE_ENT"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsSyncStableStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsSyncStableStatusGet function
* @endinternal
*
* @brief   Return Signal Detect state on SerDes when it became be stable(true/false).
*
* @note   APPLICABLE DEVICES:      pipe
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] signalStatePtr           - the stable signal state on serdes:
*                                      GT_TRUE  - signal detected;
*                                      GT_FALSE - no signal.
*
* @retval GT_OK                    - on success.
* @retval GT_TIMEOUT               - on signal is not stable during 1000ms.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - signalStatePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*
* @note Using algorithm to detect Serdes Signal to be stable.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="signalState" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPcsSyncStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPcsSyncStatusGet function
* @endinternal
*
* @brief   Return PCS Sync status from XGKR sync block.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] syncPtr                  - Sync status from XGKR sync block :
*                                      GT_TRUE  - synced;
*                                      GT_FALSE - not synced.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - syncPtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="sync" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPeriodicFcEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPeriodicFcEnableGet function
* @endinternal
*
* @brief   Get status of periodic 802.3x flow control transmition.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] enablePtr                - Pointer to the periodic 802.3x flow control
*                                      tramsition state.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Note: The gig port cannot disable the xoff, therefore the configuration for the gig port:
*       CPSS_PX_PORT_PERIODIC_FLOW_CONTROL_DISABLE_E = xoff only
*       CPSS_PX_PORT_PERIODIC_FLOW_CONTROL_XON_ONLY_E = both xoff and xon
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="enable" type="CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPeriodicFcEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPeriodicFcEnableSet function
* @endinternal
*
* @brief   Enable/Disable transmits of periodic 802.3x flow control.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] enable                   - periodic 802.3x flow control tramsition state
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_SUPPORTED         - on unsupported request
*
* @note Note: The gig port cannot disable the xoff, therefore the configuration for the gig port:
*       CPSS_PX_PORT_PERIODIC_FLOW_CONTROL_DISABLE_E = xoff only
*       CPSS_PX_PORT_PERIODIC_FLOW_CONTROL_XON_ONLY_E = both xoff and xon
*       Note: PX_CPSS_PORT_PERIODIC_FLOW_CONTROL_XON_ONLY_E
*       option is not supported.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="enable" type="CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPeriodicFlowControlCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPeriodicFlowControlCounterGet function
* @endinternal
*
* @brief   Get Periodic Flow Control interval. The interval in microseconds
*         between two successive Flow Control frames.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
*
* @param[out] valuePtr                 - (pointer to) The interval in microseconds between two successive
*                                      Flow Control frames that are sent periodically by the port.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum, portNum
* @retval GT_OUT_OF_RANGE          - on bad value
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPeriodicFlowControlCounterSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPeriodicFlowControlCounterSet function
* @endinternal
*
* @brief   Set Periodic Flow Control interval. The interval in microseconds
*         between two successive Flow Control frames.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - port number
* @param[in] value                    - The interval in microseconds between two successive
*                                      Flow Control frames that are sent periodically by the port.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum, portNum
* @retval GT_OUT_OF_RANGE          - on bad value
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The interval in micro seconds between transmission of two consecutive
*       Flow Control packets recommended interval is calculated by the following formula:
*       period (micro seconds) = 33553920 / speed(M)
*       Exception: for 10M, 100M and 10000M Flow Control packets recommended interval is 33500
*       Following are recommended intervals in micro seconds for common port speeds:
*       33500  for speed 10M
*       33500  for speed 100M
*       33500  for speed 1G
*       13421  for speed 2.5G
*       6710  for speed 5G
*       3355  for speed 10G
*       2843  for speed 11.8G
*       2796  for speed 12G
*       2467  for speed 13.6G
*       2236  for speed 15G
*       2097  for speed 16G
*       1677  for speed 20G
*       838   for speed 40G
*       710   for speed 47.2G
*       671   for speed 50G
*       447   for speed 75G
*       335   for speed 100G
*       239   for speed 140G
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcCounterGet function
* @endinternal
*
* @brief   Get PFC counter value per PFC counter and traffic class.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
* @param[in] pfcCounterNum            - PFC counter (APPLICABLE RANGES: 0..127)
*
* @param[out] pfcCounterValuePtr       - (pointer to) PFC counter value
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_OUT_OF_RANGE          - on wrong pfcCounterNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="IN" name="pfcCounterNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="pfcCounterValue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcCountingModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcCountingModeGet function
* @endinternal
*
* @brief   Gets PFC counting mode.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*
* @param[out] pfcCountModePtr          - (pointer to) PFC counting mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="pfcCountMode" type="CPSS_PX_PORT_PFC_COUNT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcCountingModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcCountingModeSet function
* @endinternal
*
* @brief   Sets PFC counting mode.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] pfcCountMode             - PFC counting mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="pfcCountMode" type="CPSS_PX_PORT_PFC_COUNT_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcDbaAvailableBuffersGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcDbaAvailableBuffersGet function
* @endinternal
*
* @brief   Get the number of buffers that are Available for the PFC Dynamic threshold calculations.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*                                      OUTPUTS:
* @param[in] buffsNumPtr              - pointer to number of buffers available for DBA.
*
* @param[out] buffsNumPtr              - pointer to number of buffers available for DBA.
*                                      OUTPUTS:
*                                      None
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_OUT_OF_RANGE          - on out of range buffers number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="buffsNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcDbaAvailableBuffersSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcDbaAvailableBuffersSet function
* @endinternal
*
* @brief   Define the number of buffers that are Available for the PFC Dynamic threshold calculations.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*                                      buffNum      - number of buffers available for DBA
*                                      (APPLICABLE RANGE: 0..0xFFFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_OUT_OF_RANGE          - on out of range buffers number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="buffsNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcEnableGet function
* @endinternal
*
* @brief   Get the status of PFC response functionality.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*
* @param[out] pfcEnablePtr             - (pointer to) PFC enable option.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Triggering is enabled by default.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="pfcEnable" type="CPSS_PX_PORT_PFC_ENABLE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcEnableSet function
* @endinternal
*
* @brief   Enable/Disable PFC (Priority Flow Control) response functionality.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] pfcEnable                - PFC enable option.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or PFC enable option
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note If PFC response is enabled, the shaper's baseline must be
*       at least 0x3FFFC0, see:
*       cpssPxPortTxShaperBaselineSet.
*       Note: Triggering cannot be disabled by this API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="pfcEnable" type="CPSS_PX_PORT_PFC_ENABLE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcForwardEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcForwardEnableGet function
* @endinternal
*
* @brief   Get status of PFC frames forwarding
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (CPU port not supported)
*
* @param[out] enablePtr                - current forward PFC frames status
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or profile set
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note A packet is considered as a PFC frame if all of the following are true:
*       - Packet's Length/EtherType field is 88-08
*       - Packet's OpCode field is 01-01
*       - Packet's MAC DA is 01-80-C2-00-00-01 or the port's configured MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcForwardEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcForwardEnableSet function
* @endinternal
*
* @brief   Enable/disable forwarding of PFC frames to the ingress
*         pipeline of a specified port.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (CPU port not supported)
* @param[in] enable                   - GT_TRUE:  forward PFC frames to the ingress pipe,
*                                      GT_FALSE: do not forward PFC frames to the ingress pipe.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or profile set
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note A packet is considered as a PFC frame if all of the following are true:
*       - Packet's Length/EtherType field is 88-08
*       - Packet's OpCode field is 01-01
*       - Packet's MAC DA is 01-80-C2-00-00-01 or the port's configured MAC Address
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcGlobalDropEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcGlobalDropEnableGet function
* @endinternal
*
* @brief   Gets the current status of PFC global drop.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) status of PFC functionality
*                                      GT_TRUE:  PFC global drop enabled.
*                                      GT_FALSE: PFC global drop disabled.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcGlobalDropEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcGlobalDropEnableSet function
* @endinternal
*
* @brief   Enable/Disable PFC global drop.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE: Enable PFC global drop.
*                                      GT_FALSE: Disable PFC global drop.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To configure drop threshold use cpssPxPortPfcGlobalQueueConfigSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcGlobalQueueConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcGlobalQueueConfigGet function
* @endinternal
*
* @brief   Gets PFC profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
*
* @param[out] xoffThresholdPtr         - (pointer to) Xoff threshold.
* @param[out] dropThresholdPtr         - (pointer to) Drop threshold. When a global counter with given tcQueue
*                                      crosses up the dropThreshold the packets are dropped.
* @param[out] xonThresholdPtr          - (pointer to) Xon threshold.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device number, profile index
*                                       or traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note All thresholds are set in buffers or packets.
*       See cpssPxPortPfcCountingModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="xoffThreshold" type="GT_U32"/>
    <Param class="int" dir="OUT" name="dropThreshold" type="GT_U32"/>
    <Param class="int" dir="OUT" name="xonThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcGlobalQueueConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcGlobalQueueConfigSet function
* @endinternal
*
* @brief   Sets PFC profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
* @param[in] xoffThreshold            - XOFF threshold
*                                      (APPLICABLE RANGES: 0..0x1FFFFF)
* @param[in] dropThreshold            - Drop threshold. When a global counter with given tcQueue
*                                      (APPLICABLE RANGES: 0..0x1FFFFF)
* @param[in] xonThreshold             - XON threshold
*                                      (APPLICABLE RANGES: 0..0x1FFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number, profile index
*                                       or traffic class queue
* @retval GT_OUT_OF_RANGE          - on out of range threshold value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. dropThreshold is used when PFC global drop is enabled.
*       See cpssPxPortPfcGlobalDropEnableSet.
*       2. All thresholds are set in buffers or packets.
*       See cpssPxPortPfcCountingModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="IN" name="xoffThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="dropThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="xonThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcPacketClassificationEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcPacketClassificationEnableSet function
* @endinternal
*
* @brief   Enable/Disable the ingress control pipe to parse and terminate received
*         PFC frames
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] packetType               - index of the packet type key in the table.(APPLICABLE RANGES: 0..31)
* @param[in] udbpIndex                - user defined byte pair index, where opcode will be set (APPLICABLE RANGES: 0..3)
* @param[in] enable                   -  or disable PFC packet classification
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note If the configuration is disabled, flow control frames are processed by
*       the control pipe as regular data frames (that is they are subject to
*       learning, forwarding, filtering and mirroring) but they are not
*       terminated and the PFC timers are not extracted.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
    <Param class="int" dir="IN" name="udbpIndex" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcPacketTypeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcPacketTypeGet function
* @endinternal
*
* @brief   Get PFC packet type
*
* @param[in] devNum                   - device number.
*
* @param[out] packetTypePtr            - (pointer to) packet type index
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcProfileIndexGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcProfileIndexGet function
* @endinternal
*
* @brief   Gets the port's PFC profile.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] profileIndexPtr          - (pointer to) profile index.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="profileIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcProfileIndexSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcProfileIndexSet function
* @endinternal
*
* @brief   Binds a source port to a PFC profile.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] profileIndex             - profile index (APPLICABLE RANGES: 0..7).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_OUT_OF_RANGE          - on out of range profile index
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcProfileQueueConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcProfileQueueConfigGet function
* @endinternal
*
* @brief   Gets PFC profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] profileIndex             - profile index (APPLICABLE RANGES: 0..7)
* @param[in] tcQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
*
* @param[out] pfcProfileCfgPtr         - pointer to PFC Profile configurations.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number, profile index
*                                       or traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note All thresholds are set in buffers or packets.
*       See cpssPxPortPfcCountingModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="pfcProfileCfg" type="CPSS_PX_PORT_PFC_PROFILE_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcProfileQueueConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcProfileQueueConfigSet function
* @endinternal
*
* @brief   Sets PFC profile configurations for given tc queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] profileIndex             - profile index (APPLICABLE RANGES: 0..7)
* @param[in] tcQueue                  - traffic class queue (APPLICABLE RANGES: 0..7)
* @param[in] pfcProfileCfgPtr         - pointer to PFC Profile configurations
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number, profile index
*                                       or traffic class queue
* @retval GT_OUT_OF_RANGE          - on out of range threshold value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note All thresholds are set in buffers or packets.
*       See cpssPxPortPfcCountingModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="struct" dir="IN" name="pfcProfileCfg" type="CPSS_PX_PORT_PFC_PROFILE_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcQueueCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcQueueCounterGet function
* @endinternal
*
* @brief   Get the number buffers/packets per proirity queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue on the port
*
* @param[out] cntPtr                   - (pointer to) number buffers/packets
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong devNum, tcQueue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*
* @note Buffer or packet counting mode is set by cpssPxPortPfcCountingModeSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cnt" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcShaperToPortRateRatioGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcShaperToPortRateRatioGet function
* @endinternal
*
* @brief   Gets shaper rate to port speed ratio on given scheduler profile
*         and traffic class queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - the Tx Queue scheduler profile.
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @param[out] shaperToPortRateRatioPtr - (pointer to)shaper rate to port speed ratio
*                                      in percentage.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number ,profile set
*                                       or traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="shaperToPortRateRatio" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcShaperToPortRateRatioSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcShaperToPortRateRatioSet function
* @endinternal
*
* @brief   Sets shaper rate to port speed ratio on given scheduler profile
*         and traffic class queue.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - the Tx Queue scheduler profile.
* @param[in] tcQueue                  - traffic class queue (0..7).
* @param[in] shaperToPortRateRatio    - shaper rate to port speed ratio
*                                      in percentage (0..100).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number ,profile set
*                                       or traffic class queue
* @retval GT_OUT_OF_RANGE          - on out of range shaper rate to port speed ratio
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To bind port to scheduler profile use:
*       cpssPxPortTxBindPortToSchedulerProfileSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="IN" name="shaperToPortRateRatio" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcSourcePortToPfcCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcSourcePortToPfcCounterGet function
* @endinternal
*
* @brief   Get PFC mapping of a physical port to a PFC counter.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] pfcCounterNumPtr         (pointer to) PFC counter
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="pfcCounterNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcSourcePortToPfcCounterSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcSourcePortToPfcCounterSet function
* @endinternal
*
* @brief   Set PFC mapping of a physical port to a PFC counter.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] pfcCounterNum            - PFC counter (APPLICABLE RANGES: 0..127)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_OUT_OF_RANGE          - on wrong pfcCounterNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="pfcCounterNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcTimerMapEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcTimerMapEnableGet function
* @endinternal
*
* @brief   Get the status of PFS timer to priority queue mapping for given
*         scheduler profile.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - the Tx Queue scheduler profile Set
*
* @param[out] enablePtr                - (pointer to) status of PFC timer to Priority Queue
*                                      mapping.
*                                      GT_TRUE: PFC timer to Priority Queue map used.
*                                      GT_FALSE: PFC timer to Priority Queue map bypassed.
*                                      1:1 mapping between a timer in PFC frame to an egress queue.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number or profile set
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcTimerMapEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcTimerMapEnableSet function
* @endinternal
*
* @brief   Enables mapping of PFC timer to priority queue for given scheduler profile.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - the Tx Queue scheduler profile.
* @param[in] enable                   - Determines whether PFC timer to Priority Queue map
*                                      is used.
*                                      GT_TRUE: PFC timer to Priority Queue map used.
*                                      GT_FALSE: PFC timer to Priority Queue map bypassed.
*                                      1:1 mapping between a timer in PFC frame to an egress queue.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or profile set
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note To bind port to scheduler profile use:
*       cpssPxPortTxBindPortToSchedulerProfileSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcTimerToQueueMapGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcTimerToQueueMapGet function
* @endinternal
*
* @brief   Gets PFC timer to priority queue map.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] pfcTimer                 - PFC timer (0..7).
*
* @param[out] tcQueuePtr               - (pointer to) traffic class queue.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or PFC timer
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="pfcTimer" type="GT_U32"/>
    <Param class="int" dir="OUT" name="tcQueue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcTimerToQueueMapSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcTimerToQueueMapSet function
* @endinternal
*
* @brief   Sets PFC timer to priority queue map.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] pfcTimer                 - PFC timer (0..7)
* @param[in] tcQueue                  - traffic class queue (0..7).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or PFC timer
* @retval GT_OUT_OF_RANGE          - on out of traffic class queue
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="pfcTimer" type="GT_U32"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcXonMessageFilterEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcXonMessageFilterEnableGet function
* @endinternal
*
* @brief   Gets current status of the filtering of
*         continuous flow control XON messages to priority shaper.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - (pointer to) Enable  PFC XON Message Filter.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPfcXonMessageFilterEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortPfc.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPfcXonMessageFilterEnableSet function
* @endinternal
*
* @brief   Enable/Disable PFC (Priority Flow Control) filtering of
*         continuous flow control XON messages to priority shaper.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] enable                   - GT_TRUE:  Enable  PFC XON Message Filter.
*                                      GT_FALSE: Disable PFC XON Message Filter.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number or enable option
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Enable this feature in a system with periodic flow control XON messages.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortDetailedMapGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortDetailedMapGet function
* @endinternal
*
* @brief   Function returns physical port detailed mapping
*         MAC/TXQ/DMA port number.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] portMapShadowPtr         - (pointer to) detailed mapping
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portMapShadow" type="CPSS_PX_DETAILED_PORT_MAP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortMapGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortMapGet function
* @endinternal
*
* @brief   get ports mapping
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] firstPhysicalPortNumber  - first physical port to bring
* @param[in] portMapArraySize         - Mapping array size
*
* @param[out] portMapArrayPtr          - pointer to ports mapping
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_FAIL                  - when cannot deliver requested number of items
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="firstPhysicalPortNumber" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="portMapArraySize" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="portMapArray" type="CPSS_PX_PORT_MAP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortMapIsCpuGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortMapIsCpuGet function
* @endinternal
*
* @brief   Check if physical port was mapped as CPU port
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] isCpuPtr                 - (pointer to) is mapped as CPU port
*                                      GT_TRUE - given port was mapped as CPU port
*                                      GT_FALSE - there is no valid mapping for given port,
*                                      or it is not mapped as CPU port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isCpu" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortMapIsValidGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortMapIsValidGet function
* @endinternal
*
* @brief   Check if physical port was mapped
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] isValidPtr               - (pointer to) is valid mapping
*                                      GT_TRUE - given port was mapped
*                                      GT_FALSE - there is no valid mapping for given port
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isValid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortMapReverseMappingGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortMapReverseMappingGet function
* @endinternal
*
* @brief   Function checks and returns physical port number that mapped to given
*         MAC/TXQ/DMA port number.
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] origPortType             - original port type
* @param[in] origPortNum              - MAC/TXQ/DMA port number
*
* @param[out] physicalPortNumPtr       - (pointer to) physical port number
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, origPortNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_FOUND             - not found
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="origPortType" type="CPSS_PX_PORT_MAPPING_TYPE_ENT"/>
    <Param class="int" dir="IN" name="origPortNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="physicalPortNum" type="GT_PHYSICAL_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPhysicalPortMapSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortMapping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPhysicalPortMapSet function
* @endinternal
*
* @brief   configure ports mapping
*
* @note   APPLICABLE DEVICES:      Pipe
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portMapArraySize         - Number of ports to map, array size
* @param[in] portMapArrayPtr          - pointer to array of mappings
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_BAD_PTR               - on bad pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. All usable ports shall be configured at ONCE. Any port, that was mapped previously and is
*       not included into current mapping, losses its mapping.
*       2. Changing mapping under traffic may cause to traffic interruption.
*       3. The function checks whether all mapping are consistent.
*       In case of contradiction between mappings
*       (e,g. single TxQ port is mapped to several Tx DMA ports) the function returns with BAD_PARAM.
*       5. Other CPSS APIs that receive GT_PHYSICAL_PORT_NUM as input parameter will use this mapping
*       to convert the physical port to mac/dma/txq to configure them
*       6. Usage example
*       CPSS_PX_PORT_MAP_STC exampleMap[] =
*       (
*       -- the list for 'network ports' : 10G each
*       ( 0, _INTRFACE_TYPE_ETHERNET_MAC_E,   0, 0),
*       ( 1, _INTRFACE_TYPE_ETHERNET_MAC_E,   1, 1),
*       ...
*       ( 11, _INTRFACE_TYPE_ETHERNET_MAC_E,   11, 11),
*       -- the 'uplink port' : 100G
*       ( 12, _INTRFACE_TYPE_ETHERNET_MAC_E,   12, 12),
*       -- the SDMA CPU
*       ( 16, _INTRFACE_TYPE_CPU_SDMA_E,   GT_NA, 16),
*       );
*       rc = cpssPxCfgPhysicalPortMapSet(devNum, sizeof(exampleMap)/sizeof(exampleMap[0]), &exampleMap[0]);
*       if(rc != GT_OK)
*       (
*       fatal error.
*       )
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portMapArraySize" type="GT_U32"/>
    <Param class="struct" dir="IN" name="portMapArray" type="CPSS_PX_PORT_MAP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPizzaArbiterDevStateGet" srcpath="mainPxDrv/h/cpss/px/port/PizzaArbiter/cpssPxPortPizzaArbiter.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPizzaArbiterDevStateGet function
* @endinternal
*
* @brief   get state of device Pizza Arbiter units
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
*
* @param[out] pizzaDeviceStatePtr      - pointer to structure describing the state of each units.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="pizzaDeviceState" type="CPSS_PX_DEV_PIZZA_ARBITER_STATE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPizzaArbiterPipeBWMinPortSpeedResolutionGet" srcpath="mainPxDrv/h/cpss/px/port/PizzaArbiter/DynamicPizzaArbiter/cpssPxPortDynamicPAUnitBW.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPizzaArbiterPipeBWMinPortSpeedResolutionGet function
* @endinternal
*
* @brief   get pipe BW for TxDMA, RXDMA, TxQ, Tx-FIFO, and slice resolution for TxQ
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] pipeBandwithInGbpsPtr    - pipe bandwidth in GBits
* @param[out] minimalSliceResolutionInMBpsPtr - min port speed resolution in MBps
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - wrong devNum, combination of BW and slice resolution
* @retval GT_FAIL                  - on error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="pipeBandwithInGbps" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="minimalSliceResolutionInMBps" type="CPSS_PX_MIN_SPEED_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPizzaArbiterPipeBWMinPortSpeedResolutionSet" srcpath="mainPxDrv/h/cpss/px/port/PizzaArbiter/DynamicPizzaArbiter/cpssPxPortDynamicPAUnitBW.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPizzaArbiterPipeBWMinPortSpeedResolutionSet function
* @endinternal
*
* @brief   set pipe BW for TxDMA, RXDMA, TxQ, Tx-FIFO, and slice resolution for TxQ
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] pipeBandwithInGbps       - pipe bandwidth in GBits
* @param[in] minimalPortSpeedMBps     - min port speed resolution in MBps
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, combination of BW and slice resolution
* @retval GT_FAIL                  - on error
*
* @note a. API does not change system BW, it only informs pizza arbiter about requested BW.
*       b. API returns GT_BAD_PARAM, if number of available slices resolution is smaller than requested BW,
*       ex: PIPE has 340 slices, default resolution is 1G , max BW that can be supported is 340[slices] 1[Gbps/slice] = 340 [Gpbs]
*       ex: if one like to support BW 400Gpbs, than ceil(400[Gpbs]/340[slices]) = 2[Gpbs/slice] = 2000 [Mpbs/slice]
*       c. API checks whether there are ports with speed smaller than resolution. If any is present, API returns with error (GT_FAIL).
*       d. API cpssPxPortModeSpeedSet() will return error, if requested speed is smaller than speed resolution.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="pipeBandwithInGbps" type="GT_U32"/>
    <Param class="enum" dir="IN" name="minimalPortSpeedMBps" type="CPSS_PX_MIN_SPEED_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPreambleLengthGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPreambleLengthGet function
* @endinternal
*
* @brief   Get the port with preamble length for Rx or Tx or both directions.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] direction                - Rx or Tx or both directions
*                                      only XG ports support Rx direction
*                                      GE ports support only Tx direction.
*
* @param[out] lengthPtr                - pointer to preamble length in bytes :
*                                      supported length values are : 4,8.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number or wrong physical port number or
*                                       wrong direction or wrong length
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="direction" type="CPSS_PORT_DIRECTION_ENT"/>
    <Param class="int" dir="OUT" name="length" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortPreambleLengthSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortPreambleLengthSet function
* @endinternal
*
* @brief   Set the port with preamble length for Rx or Tx or both directions.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number (or CPU port)
* @param[in] direction                - Rx or Tx or both directions
*                                      only XG ports support Rx direction and "both directions"
*                                      options (GE ports support only Tx direction)
* @param[in] length                   -  of preamble in bytes
*                                      support only values of 4,8
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device number or wrong physical port number or
*                                       wrong direction or wrong length
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="direction" type="CPSS_PORT_DIRECTION_ENT"/>
    <Param class="int" dir="IN" name="length" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortRefClockSourceOverrideEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortRefClockSourceOverrideEnableGet function
* @endinternal
*
* @brief   Gets status of reference clock source override for port create.
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] overrideEnablePtr        - (pointer to) override enable status
* @param[out] refClockSourcePtr        - (pointer to) reference clock source.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="overrideEnable" type="GT_BOOL"/>
    <Param class="enum" dir="OUT" name="refClockSource" type="CPSS_PORT_REF_CLOCK_SOURCE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortRefClockSourceOverrideEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortRefClockSourceOverrideEnableSet function
* @endinternal
*
* @brief   Enables/disables reference clock source override for port create.
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] overrideEnable           - override
*                                      GT_TRUE - use preconfigured refClock source;
*                                      GT_FALSE - use default refClock source;
* @param[in] refClockSource           - reference clock source.
*                                      Not relevant when overrideEnable is false.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number, device, refClockSource
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="overrideEnable" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="refClockSource" type="CPSS_PORT_REF_CLOCK_SOURCE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTune" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTune function
* @endinternal
*
* @brief   Run auto tune algorithm on given port's serdes.
*         Set the port Tx and Rx parameters according to different working
*         modes/topologies.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] portTuningMode           - port tuning mode
*
* @retval GT_OK                    - on success, for TX_TRAINING_STATUS means training
*                                       succeeded
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error, for TX_TRAINING_STATUS means training
*                                       failed
*
* @note Directions for TX training execution:
*       1. As a pre-condition, ports on both sides of the link must be UP.
*       2. For 2 sides of the link call execute TX_TRAINING_CFG;
*       No need to maintain special timing sequence between them.
*       The CFG phase sets some parameters at the SerDes as a preparation
*       to the training phase.
*       3. After CFG is done, for both sides of the link, call TX_TRAINING_START;
*       No need to maintain special timing sequence between them.
*       4. Wait at least 0.5 Sec. (done by API inside).
*       5. Verify Training status by calling TX_TRAINING_STATUS.
*       No need to maintain special timing sequence between them.
*       This call provides the training status (OK/Failed) and terminates it.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="portTuningMode" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTuneExt" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTuneExt function
* @endinternal
*
* @brief   Run auto tune algorithm on given port's serdes including required
*         optimizations.
*         Set the port Tx and Rx parameters according to different working
*         modes/topologies.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] portTuningMode           - port tuning mode
* @param[in] serdesOptAlgBmp          - bitmap of optimisation algorithms that should run on
*                                      serdeses of port (see
*                                      CPSS_PORT_SERDES_TRAINING_OPTIMISATION_ALGORITHM_ENT)
*
* @retval GT_OK                    - on success, for TX_TRAINING_STATUS means training
*                                       succeeded
* @retval GT_BAD_PARAM             - on wrong port number, device, serdesOptAlgBmp
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error, for TX_TRAINING_STATUS means training
*                                       failed
*
* @note See cpssPxPortSerdesAutoTune.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="portTuningMode" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
    <Param class="int" dir="IN" name="serdesOptAlgBmp" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTuneOptAlgGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTuneOptAlgGet function
* @endinternal
*
* @brief   Get bitmap of training/auto-tuning optimisation algorithms which
*         will run on serdeses of port in addition to usual training.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] serdesOptAlgBmpPtr       - bitmap of optimisation algorithms that should run on
*                                      serdeses of port (see
*                                      CPSS_PORT_SERDES_TRAINING_OPTIMISATION_ALGORITHM_ENT)
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesOptAlgBmp" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTuneOptAlgSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTuneOptAlgSet function
* @endinternal
*
* @brief   Configure bitmap of training/auto-tuning optimisation algorithms which
*         will run on serdeses of port in addition to usual training.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] serdesOptAlgBmp          - bitmap of optimisation algorithms that should run on
*                                      serdeses of port (see
*                                      CPSS_PORT_SERDES_TRAINING_OPTIMISATION_ALGORITHM_ENT)
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note This API configures field SW DB which will be used by
*       cpssPxPortSerdesAutoTune.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="serdesOptAlgBmp" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTuneResultsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTuneResultsGet function
* @endinternal
*
* @brief   Read the results of SERDES auto tuning.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
*
* @param[out] serdesTunePtr            - serdes Tune parameters
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - serdesTunePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="serdesTune" type="CPSS_PORT_SERDES_TUNE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesAutoTuneStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesAutoTuneStatusGet function
* @endinternal
*
* @brief   Get current status of RX and TX serdes auto-tuning on port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] rxTuneStatusPtr          - RX tuning status
* @param[out] txTuneStatusPtr          - TX tuning status
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="rxTuneStatus" type="CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT"/>
    <Param class="enum" dir="OUT" name="txTuneStatus" type="CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesCDRLockStatusGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesCDRLockStatusGet function
* @endinternal
*
* @brief   Return SERDES CDR lock status (true - locked /false - not locked).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] cdrLockPtr               - CRD lock state on serdes:
*                                      GT_TRUE  - CDR locked;
*                                      GT_FALSE - CDR not locked.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - cdrLockPtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="cdrLock" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesEnhancedAutoTune" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesEnhancedAutoTune function
* @endinternal
*
* @brief   Set Rx training process using the enhance tuning and starts the
*         auto tune process.
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] min_LF                   - Minimum LF value that can be set on Serdes (0...15)
* @param[in] max_LF                   - Maximum LF value that can be set on Serdes (0...15)
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - serdesTunePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="min_LF" type="GT_U8"/>
    <Param class="int" dir="IN" name="max_LF" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesErrorInject" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesErrorInject function
* @endinternal
*
* @brief   Injects errors into the RX data, TX data or both
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portGroup                - number of port group (local core), not used for non-multi-core
* @param[in] serdesNum                - serdes number
* @param[in] numOfBits                - number of bits to inject to serdes data
* @param[in] direction                - whether  is TX, RX or both
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on error
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_INIT_ERROR            - on Hws initialization failre
*
* @note Debug function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroup" type="GT_U32"/>
    <Param class="int" dir="IN" name="serdesNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="numOfBits" type="GT_U32"/>
    <Param class="enum" dir="IN" name="direction" type="CPSS_PORT_DIRECTION_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLanePolarityGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLanePolarityGet function
* @endinternal
*
* @brief   Get the SerDes lane polarity values.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupNum             - number of port group (local core), not used for non-multi-core
* @param[in] laneNum                  - number of SERDES lane
*
* @param[out] invertTx                 - GT_TRUE  - Transmit Polarity Invert.
*                                      GT_FALSE - no invert
* @param[out] invertRx                 - GT_TRUE  - Receive Polarity Invert.
*                                      GT_FALSE - no invert
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_OUT_OF_RANGE          - one of tune values is out of range
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Get the Tx/Rx polarity parameters for lane from HW if serdes initialized
*       or from SW DB if serdes was not initialized
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portGroupNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="invertTx" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="invertRx" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLanePolaritySet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLanePolaritySet function
* @endinternal
*
* @brief   Set the SerDes lane polarity values.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupNum             - number of port group (local core), not used for non-multi-core
* @param[in] laneNum                  - number of SERDES lane
* @param[in] invertTx                 - GT_TRUE  - Transmit Polarity Invert.
*                                      GT_FALSE - no invert
* @param[in] invertRx                 - GT_TRUE  - Receive Polarity Invert.
*                                      GT_FALSE - no invert
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_OUT_OF_RANGE          - one of tune values is out of range
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note - If serdes initialized: Set the Tx/Rx polarity parameters for lane
*       in both HW and SW DB
*       - If serdes was not initialized: Set the Tx/Rx polarity parameters
*       for lane only in SW DB
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portGroupNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="IN" name="invertTx" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="invertRx" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLaneSignalDetectGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLaneSignalDetectGet function
* @endinternal
*
* @brief   Return Signal Detect state on specific SerDes lane (true/false).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupId              - number of local core
* @param[in] laneNum                  - number of required serdes lane
*
* @param[out] signalStatePtr           - signal state on serdes:
*                                      GT_TRUE  - signal detected;
*                                      GT_FALSE - no signal.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - signalStatePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portGroupId" type="GT_U32"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="signalState" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLaneTuningGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLaneTuningGet function
* @endinternal
*
* @brief   Get SerDes lane fine tuning values.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupNum             - number of port group (local core), not used for non-multi-core
* @param[in] laneNum                  - number of SERDES lane where values in tuneValuesPtr appliable
* @param[in] serdesFrequency          - serdes speed for which to save tuning values
*
* @param[out] tuneValuesPtr            - (ptr to) structure with tuned values
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_OUT_OF_RANGE          - one of tune values is out of range
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Get tuning parameters for lane from SW DB.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portGroupNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="serdesFrequency" type="CPSS_PORT_SERDES_SPEED_ENT"/>
    <Param class="struct" dir="OUT" name="tuneValues" type="CPSS_PORT_SERDES_TUNE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLaneTuningSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLaneTuningSet function
* @endinternal
*
* @brief   SerDes lane fine tuning values set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupNum             - number of port group (local core), not used for non-multi-core
* @param[in] laneNum                  - number of SERDES lane where values in tuneValuesPtr appliable
* @param[in] serdesFrequency          - serdes speed for which to save tuning values
* @param[in] tuneValuesPtr            - (ptr to) structure with tuned values
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_OUT_OF_RANGE          - one of tune values is out of range
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Set tuning parameters for lane in SW DB, then
*       cpssPxPortSerdesPowerStatusSet or cpssPxPortModeSpeedSet will write
*       them to HW.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portGroupNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="serdesFrequency" type="CPSS_PORT_SERDES_SPEED_ENT"/>
    <Param class="struct" dir="IN" name="tuneValues" type="CPSS_PORT_SERDES_TUNE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLoopbackModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLoopbackModeGet function
* @endinternal
*
* @brief   Get current mode of loopback on SerDes.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
*                                      to read loopback status
*
* @param[out] modePtr                  - current loopback mode or none
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - NULL pointer
* @retval GT_NOT_SUPPORTED         - on not expected mode value
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_PORT_SERDES_LOOPBACK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesLoopbackModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesLoopbackModeSet function
* @endinternal
*
* @brief   Configure loopback of specific type on SerDes.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum  - device number
* @param[in] portNum - physical port number
* @param[in] mode    - define loopback type or no loopback
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*
* @note  For Serdes Loopback modes:
*        - In 'AN_TX_RX' mode, the Rx & Tx Serdes Polarity
*          configurations should be disabled, for getting LinkUp
*          and Traffic on port.
*        - After return to 'Normal' mode, the Rx & Tx Serdes
*          Polarity configuration should be restored, for
*          re-synch again the PCS and MAC units and getting
*          LinkUp and Traffic on port.
*        - Switching between 'AN_TX_RX'/'DIG_RX_TX' modes
*          requires returning to the 'Normal' mode before.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_PORT_SERDES_LOOPBACK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesManualRxConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesManualRxConfigGet function
* @endinternal
*
* @brief   Read specific parameters of serdes RX.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
*
* @param[out] serdesRxCfgPtr           - serdes Rx parameters
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - serdesTxCfgPtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*
* @note The squelch transforms from units 0 - 15 to
*       units 0 - 308 by formula (x 16) + 68. So it's value can be not the same as it was set.
*       For example, was set the squelch = 110. It's transforms and safes inside as
*       integer part of (squelch - 68) / 16 = (integer part)(110 - 68) / 16 = 2
*       And we obtain after getting (2 16) + 68 = 100
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="serdesRxCfg" type="CPSS_PORT_SERDES_RX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesManualRxConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesManualRxConfigSet function
* @endinternal
*
* @brief   Configure specific parameters of serdes RX in HW.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
* @param[in] serdesRxCfgPtr           - serdes Rx parameters
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
* @retval GT_OUT_OF_RANGE          - parameter out of range
*
* @note Pay attention: every serdes power up restore CPSS default configurations,
*       so this API should be egaged by application after every serdes power up
*       or use cpssPxPortSerdesTuningSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="serdesRxCfg" type="CPSS_PORT_SERDES_RX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesManualTxConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesManualTxConfigGet function
* @endinternal
*
* @brief   Read specific parameters of serdes TX.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
*
* @param[out] serdesTxCfgPtr           - serdes Tx parameters
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - serdesTxCfgPtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="serdesTxCfg" type="CPSS_PORT_SERDES_TX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesManualTxConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesManualTxConfigSet function
* @endinternal
*
* @brief   Configure specific parameters of serdes TX in HW.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
* @param[in] serdesTxCfgPtr           - serdes Tx parameters:
* @param[in] serdesTxCfgPtr           - serdes Tx parameters:
*                                      txAmp - Tx Driver output Amplitude/Attenuator: [0...31]
*                                      txAmpAdjEn - not rellevant for Pipe
*                                      emph0 - Post-Cursor: Controls the Emphasis Amplitude for Gen0 bit rates
*                                      for ports  #0-#11: [-31...31]
*                                      for ports #12-#15: [0...31]
*                                      emph1 - Pre-Cursor: Controls the emphasis amplitude for Gen1 bit rates
*                                      for ports  #0-#11: [-31...31]
*                                      for ports #12-#15: [0...31]
*                                      txAmpShft - not rellevant for Pipe
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
* @retval GT_OUT_OF_RANGE          - parameter out of range
*
* @note Pay attention: every serdes power up restore CPSS default configurations,
*       so this API should be egaged by application after every serdes power up
*       or use cpssPxPortSerdesTuningSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="serdesTxCfg" type="CPSS_PORT_SERDES_TX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesPolarityGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesPolarityGet function
* @endinternal
*
* @brief   Get status of the Tx or Rx serdes polarity invert.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.) to
*                                      define polarity on.
*
* @param[out] invertTxPtr              - (ptr to) GT_TRUE - Transmit Polarity Invert.
*                                      GT_FALSE - no invert
* @param[out] invertRxPtr              - (ptr to) GT_TRUE - Receive Polarity Invert.
*                                      GT_FALSE - no invert
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - NULL pointer
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="invertTx" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="invertRx" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesPolaritySet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesPolaritySet function
* @endinternal
*
* @brief   Invert the Tx or Rx serdes polarity.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneBmp                  - bitmap of SERDES lanes (bit 0-> lane 0, etc.) to define
*                                      polarity on.
* @param[in] invertTx                 -  GT_TRUE - Transmit Polarity Invert.
*                                      GT_FALSE - no invert
* @param[in] invertRx                 -  GT_TRUE - Receive Polarity Invert.
*                                      GT_FALSE - no invert
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*
* @note This API should be egaged by application after serdes power up. Important to
*       wrap both steps i.e. "serdes power up" and "serdes polarity set" by port
*       disable and link_change interrupt lock and restore port enable and
*       reenable link change interrupt only after "serdes polarity set" to
*       prevent interrupt toggling during the process.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneBmp" type="GT_U32"/>
    <Param class="bool" dir="IN" name="invertTx" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="invertRx" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesPowerStatusSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesPowerStatusSet function
* @endinternal
*
* @brief   Sets power state of SERDES port lanes according to port capabilities.
*         XG / XAUI ports: All 4 (TX or RX) lanes are set simultanuously.
*         HX / QX ports: lanes 0,1 or TX and RX may be set separately.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] powerUp                  - GT_TRUE  = power up, GT_FALSE = power down
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - on error
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="powerUp" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesResetStateSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesResetStateSet function
* @endinternal
*
* @brief   Set SERDES Reset state on specified port on specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number (or CPU port)
* @param[in] state                    - Reset state
*                                      GT_TRUE   - Port SERDES is under Reset
*                                      GT_FALSE - Port SERDES is Not under Reset, normal operation
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesSignalDetectGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesSignalDetectGet function
* @endinternal
*
* @brief   Return Signal Detect state on SerDes (true/false).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] signalStatePtr           - signal state on serdes:
*                                      GT_TRUE  - signal detected;
*                                      GT_FALSE - no signal.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - signalStatePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
* @retval GT_NOT_SUPPORTED         - if interface not supported
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="signalState" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesSquelchSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesSquelchSet function
* @endinternal
*
* @brief   Set For port Threshold (Squelch) for signal OK.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] squelch                  - threshold for signal OK (0-15)
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on fail
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - signalStatePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
* @retval GT_NOT_SUPPORTED         - if interface not supported
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="squelch" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesStableSignalDetectGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesStableSignalDetectGet function
* @endinternal
*
* @brief   Return Signal Detect state on SerDes when it became be stable(true/false).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] signalStatePtr           - the stable signal state on serdes:
*                                      GT_TRUE  - signal detected;
*                                      GT_FALSE - no signal.
*
* @retval GT_OK                    - on success.
* @retval GT_TIMEOUT               - on signal is not stable during 1000ms.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_BAD_PTR               - signalStatePtr == NULL
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - if serdes was not intialized
*
* @note Using algorithm to detect Serdes Signal to be stable.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="signalState" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesTuningGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesTuningGet function
* @endinternal
*
* @brief   SerDes fine tuning values get.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneNum                  - number of SERDES lane of port (0-> lane 0,...,3 -> lane 3 etc.)
* @param[in] serdesFrequency          - serdes speed for which to save tuning values
*
* @param[out] tuneValuesPtr            - (ptr to) structure to put tuned values
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Reads values saved in SW DB by cpssPxPortSerdesTuningSet or
*       if it was not called, from default matrix (...SerdesPowerUpSequence).
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="serdesFrequency" type="CPSS_PORT_SERDES_SPEED_ENT"/>
    <Param class="struct" dir="OUT" name="tuneValues" type="CPSS_PORT_SERDES_TUNE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesTuningSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesTuningSet function
* @endinternal
*
* @brief   SerDes fine tuning values set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] laneBmp                  - bitmap of SERDES lanes (bit 0-> lane 0, etc.) where values
*                                      in tuneValuesPtr appliable
* @param[in] serdesFrequency          - serdes speed for which to save tuning values
* @param[in] tuneValuesPtr            - (ptr to) structure with tuned values
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_OUT_OF_RANGE          - one of tune values is out of range
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_SUPPORTED         - HW does not support the requested operation
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Set same tuning parameters for all lanes defined in laneBmp in SW DB,
*       then cpssPxPortSerdesPowerStatusSet will write them to HW.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneBmp" type="GT_U32"/>
    <Param class="enum" dir="IN" name="serdesFrequency" type="CPSS_PORT_SERDES_SPEED_ENT"/>
    <Param class="struct" dir="IN" name="tuneValues" type="CPSS_PORT_SERDES_TUNE_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesTxEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesTxEnableGet function
* @endinternal
*
* @brief   Get Enable / Disable transmission of packets in SERDES layer of a port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
*
* @param[out] enablePtr                - Pointer to transmission of packets in SERDES
*                                      layer of a port.
*                                      - GT_TRUE  - Enable transmission of packets in
*                                      SERDES layer of a port.
*                                      - GT_FALSE - Enable transmission of packets in
*                                      SERDES layer of a port.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSerdesTxEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSerdesTxEnableSet function
* @endinternal
*
* @brief   Enable / Disable transmission of packets in SERDES layer of a port.
*         Use this API to disable Tx for loopback ports.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
* @param[in] enable                   - GT_TRUE  - Enable transmission of packets in
*                                      SERDES layer of a port
*                                      - GT_FALSE - Disable transmission of packets in
*                                      SERDES layer of a port
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Disabling transmission of packets in SERDES layer of a port causes
*       to link down of devices that are connected to the port.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSpeedAutoNegEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSpeedAutoNegEnableGet function
* @endinternal
*
* @brief   Get status of Auto-Negotiation enable on specified port
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] statePtr                 - GT_TRUE for enabled Auto-Negotiation of interface speed,
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1. CPU port not supports the speed auto negotiation
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSpeedAutoNegEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSpeedAutoNegEnableSet function
* @endinternal
*
* @brief   Enable/disable an Auto-Negotiation of interface speed on specified port
*         on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] state                    - GT_TRUE for enable Auto-Negotiation of interface speed,
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported state
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.CPU port not supports the speed auto negotiation
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="state" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSpeedGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSpeedGet function
* @endinternal
*
* @brief   Gets speed for specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number (or CPU port)
*
* @param[out] speedPtr                 - pointer to actual port speed
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_INITIALIZED       - on no initialized SERDES per port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note 1.This API also checks if at least one serdes per port was initialized.
*       In case there was no initialized SERDES per port GT_NOT_INITIALIZED is
*       returned.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSpeedSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSpeedSet function
* @endinternal
*
* @brief   Sets speed for specified port on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number or CPU port
* @param[in] speed                    - port speed
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device or speed
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported speed
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_STATE             - Speed of the port group member is different
*                                       from speed for setting.
*
* @note 1. If the port is enabled then the function disables the port before
*       the operation and re-enables it at the end.
*       2. For Flex-Link ports the interface mode should be
*       configured before port's speed, see cpssPxPortInterfaceModeSet.
*       3.This API also checks all SERDES per port initialization. If serdes was
*       not initialized, proper init will be done
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortStatTxDebugCountersGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortStat.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortStatTxDebugCountersGet function
* @endinternal
*
* @brief   Gets egress TxQ drop counters.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] dropCntrStcPtr           - (pointer to) drop counter structure
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="dropCntrStc" type="CPSS_PX_PORT_STAT_TX_DROP_COUNTERS_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSyncEtherRecoveryClkConfigGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortSyncEther.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSyncEtherRecoveryClkConfigGet function
* @endinternal
*
* @brief   Function gets the recovery clock enable/disable state and its source
*         portNum.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] recoveryClkType          - recovered clock output type.
*
* @param[out] enablePtr                - (pointer to) port state as reference.
*                                      GT_TRUE -  enabled
*                                      GT_FALSE - disbled
* @param[out] portNumPtr               - (pointer to) port number.
* @param[out] laneNumPtr               - (pointer to) selected SERDES lane number within port.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_STATE             - on bad state of register
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="recoveryClkType" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_TYPE_ENT"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="OUT" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="laneNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSyncEtherRecoveryClkConfigSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortSyncEther.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSyncEtherRecoveryClkConfigSet function
* @endinternal
*
* @brief   Function configures the recovery clock enable/disable state and sets
*         its source portNum.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] devNum                   - device number.
* @param[in] recoveryClkType          - recovered clock output type.
* @param[in] enable                   - enable/disable recovered clock1/clock2:
*                                      GT_TRUE - enable
*                                      GT_FALSE - disable
* @param[in] portNum                  - port number.
* @param[in] laneNum                  - selected SERDES lane number within port.
*                                      Ranges according to port interface:
*                                      SGMII/1000BaseX - 0
*                                      RXAUI/HX        - 0..1
*                                      XAUII           - 0..3
*                                      XLG             - 0..3
*                                      10GBASE-R       - 0
*                                      20GBASE-R2      - 0..1
*                                      XLAUI           - 0..3
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_STATE             - on bad state
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="recoveryClkType" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_TYPE_ENT"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSyncEtherRecoveryClkDividerValueGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortSyncEther.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSyncEtherRecoveryClkDividerValueGet function
* @endinternal
*
* @brief   Function gets recovery clock divider value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] laneNum                  - selected SERDES lane number within port.
*                                      Ranges according to port interface:
*                                      SGMII/1000BaseX - 0
*                                      RXAUI/HX        - 0..1
*                                      XAUII           - 0..3
*                                      XLG             - 0..3
*                                      10GBASE-R       - 0
*                                      20GBASE-R2      - 0..1
*                                      XLAUI           - 0..3
* @param[in] clockSelect              - clock select - each SERDES may be connected.
*
* @param[out] valuePtr                 - (pointer to) recovery clock divider value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="clockSelect" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_ENT"/>
    <Param class="enum" dir="OUT" name="value" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortSyncEtherRecoveryClkDividerValueSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortSyncEther.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortSyncEtherRecoveryClkDividerValueSet function
* @endinternal
*
* @brief   Function sets recovery clock divider value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] laneNum                  - selected SERDES lane number within port.
*                                      Ranges according to port interface:
*                                      SGMII/1000BaseX - 0
*                                      RXAUI/HX        - 0..1
*                                      XAUII           - 0..3
*                                      XLG             - 0..3
*                                      10GBASE-R       - 0
*                                      20GBASE-R2      - 0..1
*                                      XLAUI           - 0..3
* @param[in] clockSelect              - clock select - each SERDES may be connected.
* @param[in] value                    - recovery clock divider  to set.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on bad parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="clockSelect" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_ENT"/>
    <Param class="enum" dir="IN" name="value" type="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugDescNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugDescNumberGet function
* @endinternal
*
* @brief   Gets the current number of descriptors allocated per specified port.
*
* @note   APPLICABLE DEVICES:     Pipe.
* @note   NOT APPLICABLE DEVICES: None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical or CPU port number
*
* @param[out] numberPtr                - number of descriptors
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugGlobalDescLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugGlobalDescLimitGet function
* @endinternal
*
* @brief   Get limits of total descriptors in all egress queues
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] limitPtr                 - pointer to total descriptor limit value
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on invalid input paramters value
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="limit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugGlobalDescLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugGlobalDescLimitSet function
* @endinternal
*
* @brief   Set limits of total descriptors in all egress queues
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] limit                    - total descriptor  value.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on invalid input paramters value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_OUT_OF_RANGE          - on limit out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Improper configuration of descriptors limit may affect entire system
*       behavior.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="limit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugGlobalQueueTxEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugGlobalQueueTxEnableGet function
* @endinternal
*
* @brief   Get the status of transmission of specified device (Enable/Disable).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) transmission state:
*                                      GT_TRUE, transmission enabled
*                                      GT_FALSE, transmission disabled
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugGlobalQueueTxEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugGlobalQueueTxEnableSet function
* @endinternal
*
* @brief   Enable/Disable transmission of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - GT_TRUE,  transmission
*                                      GT_FALSE, disable transmission
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugQueueDumpAll" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugQueueDumpAll function
* @endinternal
*
* @brief   Dumps all related Tx Queue information.
*         That includes the static configuration and resources allocated at run-time
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - SW device number
* @param[in] tailDropDumpBmp          - bitmap to indicate what info to show (0xff for all)
*
* @retval GT_OK                    - on success, match found for devNum.
* @retval GT_BAD_PARAM             - on tailDropDumpBmp not in range.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tailDropDumpBmp" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugQueueTxEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugQueueTxEnableGet function
* @endinternal
*
* @brief   Get the status of transmission from a Traffic Class queue on the
*         specified port of specified device (Enable/Disable).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this Physical Port.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] enablePtr                - GT_TRUE, transmission from the queue enabled
*                                      GT_FALSE, transmission from the queue disabled
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugQueueTxEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugQueueTxEnableSet function
* @endinternal
*
* @brief   Enable/Disable transmission from a Traffic Class queue on the specified
*         port of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this Physical Port.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] enable                   - GT_TRUE,  transmission from the queue
*                                      GT_FALSE, disable transmission from the queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugQueueingEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugQueueingEnableGet function
* @endinternal
*
* @brief   Get the status of enqueuing to a Traffic Class queue on the specified
*         port of specified device (Enable/Disable).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this device.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] enablePtr                - GT_TRUE, enqueuing to the queue enabled
*                                      GT_FALSE, enqueuing to the queue disabled
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugQueueingEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugQueueingEnableSet function
* @endinternal
*
* @brief   Enable/Disable enqueuing to a Traffic Class queue on the specified port
*         of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this device.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] enable                   - GT_TRUE,  enqueuing to the queue
*                                      GT_FALSE, disable enqueuing to the queue
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugResourceHistogramCounterGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugResourceHistogramCounterGet function
* @endinternal
*
* @brief   Gets Histogram Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrNum                  - Histogram Counter number.
*                                      (APPLICABLE RANGES: 0..3).
*
* @param[out] cntrPtr                  - (pointer to) Histogram Counter value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, cntrNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Histogram Counter is cleared on read.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cntr" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugResourceHistogramThresholdGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugResourceHistogramThresholdGet function
* @endinternal
*
* @brief   Gets threshold for Histogram counter increment.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrNum                  - Histogram Counter number.
*                                      (APPLICABLE RANGES: 0..3).
*
* @param[out] thresholdPtr             - (pointer to) if the Global Descriptors Counter
*                                      exceeds this Threshold, the Histogram Counter
*                                      is incremented by 1.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, cntrNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="threshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxDebugResourceHistogramThresholdSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxDebug.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxDebugResourceHistogramThresholdSet function
* @endinternal
*
* @brief   Sets threshold for Histogram counter increment.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] cntrNum                  - Histogram Counter number.
*                                      (APPLICABLE RANGES: 0..3).
* @param[in] threshold                - If the Global Descriptors Counter exceeds this Threshold,
*                                      the Histogram Counter is incremented by 1.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, cntrNum
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="cntrNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="threshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerArbitrationGroupGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerArbitrationGroupGet function
* @endinternal
*
* @brief   Get Traffic Class Queue scheduling arbitration group on
*         specificed profile of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Tx Queue scheduler Profile Set in which the arbGroup
*                                      parameter is associated.
* @param[in] tcQueue                  - traffic class queue.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] arbGroupPtr              - Pointer to scheduling arbitration group.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong profile number, device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="arbGroup" type="CPSS_PX_PORT_TX_SCHEDULER_ARB_GROUP_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerArbitrationGroupSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerArbitrationGroupSet function
* @endinternal
*
* @brief   Set Traffic Class Queue scheduling arbitration group on
*         specificed profile of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Tx Queue scheduler Profile Set in which the arbGroup
*                                      parameter is associated.
* @param[in] tcQueue                  - traffic class queue.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] arbGroup                 - scheduling arbitration group.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong profile number, device or arbGroup
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_TIMEOUT               - previous updated operation not yet completed
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="enum" dir="IN" name="arbGroup" type="CPSS_PX_PORT_TX_SCHEDULER_ARB_GROUP_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileByteCountChangeEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileByteCountChangeEnableGet function
* @endinternal
*
* @brief   Get profile Byte Count Change mode.
*         The byte count change mode changes the length of a packet by per port
*         constant for shaping and/or scheduling rate calculation.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profile                  - scheduler  index
*
* @param[out] bcModePtr                - (pointer to) byte count change enable options.
* @param[out] bcOpPtr                  - (pointer to) addition or subtraction of the per port value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on illegal profile
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="enum" dir="OUT" name="bcMode" type="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_ENT"/>
    <Param class="enum" dir="OUT" name="bcOp" type="CPSS_ADJUST_OPERATION_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileByteCountChangeEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileByteCountChangeEnableSet function
* @endinternal
*
* @brief   Enables/Disables profile Byte Count Change of the packet length by per
*         port constant for shaping and/or scheduling rate calculation.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profile                  - scheduler  index
* @param[in] bcMode                   - byte count change enable options
* @param[in] bcOp                     - addition or subtraction of the per port value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on illegal profile, bcMode, bcOp
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="enum" dir="IN" name="bcMode" type="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_ENT"/>
    <Param class="enum" dir="IN" name="bcOp" type="CPSS_ADJUST_OPERATION_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileCountModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileCountModeGet function
* @endinternal
*
* @brief   Sets the counting mode for scheduler profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - scheduler profile
*
* @param[out] wrrModePtr               - (pointer to) scheduler count mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device, profile or wrong wrrMode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="enum" dir="OUT" name="wrrMode" type="CPSS_PX_PORT_TX_SCHEDULER_WRR_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileCountModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileCountModeSet function
* @endinternal
*
* @brief   Sets the counting mode for scheduler profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - scheduler profile
* @param[in] wrrMode                  - scheduler count mode.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device, profile or wrong wrrMode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="enum" dir="IN" name="wrrMode" type="CPSS_PX_PORT_TX_SCHEDULER_WRR_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileIdGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileIdGet function
* @endinternal
*
* @brief   Get scheduler profile set that is binded to the port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
*
* @param[out] profileSetPtr            - The Profile Set in which the scheduler's parameters are
*                                      associated.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerProfileIdSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerProfileIdSet function
* @endinternal
*
* @brief   Bind a port to scheduler profile set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
* @param[in] profileSet               - The Profile Set in which the scheduler's parameters are
*                                      associated.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerShaperByteCountChangeValueGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerShaperByteCountChangeValueGet function
* @endinternal
*
* @brief   Gets the number of bytes added/subtracted to the length of every frame
*         for shaping/scheduling rate calculation for given port when
*         Byte Count Change is enabled.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
*
* @param[out] bcValuePtr               - (pointer to) number of bytes added to the length of
*                                      every frame for shaping/scheduling rate calculation.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="bcValue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerShaperByteCountChangeValueSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerShaperByteCountChangeValueSet function
* @endinternal
*
* @brief   Sets the number of bytes added/subtracted to the length of every frame
*         for shaping/scheduling rate calculation for given port when
*         Byte Count Change is enabled.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical or CPU port number
* @param[in] bcValue                  - number of bytes added to the length of every frame
*                                      for shaping/scheduling rate calculation.
*                                      (APPLICABLE RANGES: 0..63)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="bcValue" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerWrrMtuGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerWrrMtuGet function
* @endinternal
*
* @brief   Get global parameters for WRR scheduler.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] wrrMtuPtr                - (pointer to) MTU for DSWRR, resolution of WRR weights
*                                      for byte based Transmit Scheduler count mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="wrrMtu" type="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerWrrMtuSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerWrrMtuSet function
* @endinternal
*
* @brief   Set global parameters for WRR scheduler.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] wrrMtu                   - MTU for DSWRR, resolution of WRR weights for byte based
*                                      Transmit Scheduler count mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="wrrMtu" type="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerWrrProfileGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerWrrProfileGet function
* @endinternal
*
* @brief   Get Weighted Round Robin profile on the specified port's
*         Traffic Class Queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue on this Port.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] profileSet               - the Tx Queue scheduler Profile Set in which
*                                      the wrrWeight parameter is associated.
*
* @param[out] wrrWeightPtr             - Pointer to proportion of bandwidth assigned to
*                                      this queue relative to the other queues in this
*                                      Arbitration Group - resolution is 1/255.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile set or
*                                       traffic class
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_TIMEOUT               - previous updated operation not yet completed
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="wrrWeight" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxSchedulerWrrProfileSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxScheduler.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxSchedulerWrrProfileSet function
* @endinternal
*
* @brief   Set Weighted Round Robin profile on the specified port's
*         Traffic Class Queue.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Tx Queue scheduler Profile Set in which the wrrWeight
*                                      Parameter is associated.
* @param[in] tcQueue                  - traffic class queue on this Port.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] wrrWeight                - proportion of bandwidth assigned to this queue
*                                      relative to the other queues in this
*                                      Arbitration Group - resolution is 1/255.
*                                      (APPLICABLE RANGES: 0..0xFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile set or
*                                       traffic class
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_TIMEOUT               - previous updated operation not yet completed
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note If weight will be less then port's MTU (maximum transmit unit) there is
*       possibility for empty WRR loops for given TC queue, but to not tight
*       user and for future ASIC's where this problem will be solved check of
*       wrrWeight 256 > MTU not implemented.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="IN" name="wrrWeight" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperBaselineGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperBaselineGet function
* @endinternal
*
* @brief   Get Token Bucket Baseline.
*         The Token Bucket Baseline is the "zero" level of the token bucket.
*         When the token bucket fill level < Baseline, the respective queue/port
*         is not served.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
*
* @param[out] baselinePtr              - (pointer to) Token Bucket Baseline value in bytes.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="baseline" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperBaselineSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperBaselineSet function
* @endinternal
*
* @brief   Set Token Bucket Baseline.
*         The Token Bucket Baseline is the "zero" level of the token bucket.
*         When the token bucket fill level < Baseline, the respective queue/port
*         is not served.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
* @param[in] baseline                 - Token Bucket Baseline value in bytes(0..0xFFFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range baseline
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Token Bucket Baseline must be configured as follows:
*       1. At least MTU.
*       2. If PFC response is enabled, the Baseline must be
*       at least 0x3FFFC0, see:
*       cpssPxPortPfcEnableSet.
*       cpssPxPortTxSchedulerDeficitModeEnableSet.
*       3. When packet based shaping is enabled, the following used as
*       shaper's MTU:
*       CPSS_PX_PORT_TX_SHAPER_CONFIG_STC. portsPacketLength
*       CPSS_PX_PORT_TX_SHAPER_CONFIG_STC. cpuPacketLength
*       see:
*       cpssPxPortTxShaperConfigurationSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="baseline" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperConfigurationGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperConfigurationGet function
* @endinternal
*
* @brief   Get global configuration for shaper.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
*
* @param[out] configsPtr               - (pointer to) shaper configuration.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note none.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="configs" type="CPSS_PX_PORT_TX_SHAPER_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperConfigurationSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperConfigurationSet function
* @endinternal
*
* @brief   Set global configuration for shaper.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
* @param[in] configsPtr               - (pointer to) shaper configuration.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note When packet based shaping is enabled, the following used as shaper's MTU:
*       configsPtr->portsPacketLength
*       configsPtr->cpuPacketLength
*       see:
*       cpssPxPortTxShaperBaselineSet.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="configs" type="CPSS_PX_PORT_TX_SHAPER_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperEnableGet function
* @endinternal
*
* @brief   Get Enable/Disable Token Bucket rate shaping status on specified port of
*         specified device.
*
* @note   APPLICABLE DEVICES:      Pipe,
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] enablePtr                - (pointer to) token Bucket rate shaping status.
* @param[out] avbModeEnablePtr         - (pointer to) AVB mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="avbModeEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperEnableSet function
* @endinternal
*
* @brief   Enable/Disable Token Bucket rate shaping on specified port of
*         specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] enable                   - GT_TRUE,  Shaping
*                                      GT_FALSE, disable Shaping
* @param[in] avbModeEnable            - AVB mode
*                                      GT_TRUE - AVB mode enabled
*                                      GT_FALSE - AVB mode disabled
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="avbModeEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperModeGet function
* @endinternal
*
* @brief   Get Shaper mode, packet or byte based for given port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
*
* @param[out] modePtr                  - (pointer to) shaper mode: byte count or packet number based.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_PORT_TX_SHAPER_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperModeSet function
* @endinternal
*
* @brief   Set Shaper mode, packet or byte based for given port.
*         Shapers are configured by cpssPxPortTxShaperProfileSet or
*         cpssPxPortTxShaperQueueProfileSet
*
* @note   APPLICABLE DEVICES:      Pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - port number.
* @param[in] mode                     - shaper mode: byte count or packet number based.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_PORT_TX_SHAPER_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperProfileGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperProfileGet function
* @endinternal
*
* @brief   Get Token Bucket Shaper Profile on specified port of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
*
* @param[out] burstSizePtr             - (pointer to) burst size in units of 4K bytes
* @param[out] maxRatePtr               - (pointer to) the actual Rate value in Kbps
*                                      or packets per second.
* @param[out] enablePtr                - (pointer to) Token Bucket rate shaping status.
*                                      - GT_TRUE - Token Bucket rate shaping is enabled.
*                                      - GT_FALSE - Token Bucket rate shaping is disabled.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="burstSize" type="GT_U32"/>
    <Param class="int" dir="OUT" name="maxRate" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperProfileSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperProfileSet function
* @endinternal
*
* @brief   Set Token Bucket Shaper Profile on specified port of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] burstSize                - burst size in units of 4K bytes
*                                      (max value is 4K which results in 16M burst size)
* @param[in,out] maxRatePtr               - Requested Rate in Kbps or packets per second
*                                      according to port shaper mode.
* @param[in,out] maxRatePtr               - (pointer to) the actual Rate value in Kbps
*                                      or packets per second.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="burstSize" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="maxRate" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperQueueEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperQueueEnableGet function
* @endinternal
*
* @brief   Get Enable/Disable shaping status
*         of transmitted traffic from a specified Traffic
*         Class Queue and specified port of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this port (0..7)
*
* @param[out] enablePtr                - (pointer to) token Bucket rate shaping status.
* @param[out] avbModeEnablePtr         - (pointer to) AVB mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="OUT" name="avbModeEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperQueueEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperQueueEnableSet function
* @endinternal
*
* @brief   Enable/Disable shaping of transmitted traffic from a specified Traffic
*         Class Queue and specified port of specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this port (0..7)
* @param[in] enable                   - GT_TRUE,  shaping on this traffic queue
*                                      GT_FALSE, disable shaping on this traffic queue
* @param[in] avbModeEnable            - AVB mode
*                                      GT_TRUE - AVB mode enabled
*                                      GT_FALSE - AVB mode disabled
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="avbModeEnable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperQueueProfileGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperQueueProfileGet function
* @endinternal
*
* @brief   Get Shaper Profile for Traffic Class Queue of specified port on
*         specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on the port
*
* @param[out] burstSizePtr             - (pointer to) burst size in units of 4K bytes
* @param[out] maxRatePtr               - (pointer to) the actual Rate value in Kbps
*                                      or packets per second.
* @param[out] enablePtr                - (pointer to) Token Bucket rate shaping status.
*                                      - GT_TRUE - Token Bucket rate shaping is enabled.
*                                      - GT_FALSE - Token Bucket rate shaping is disabled.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="burstSize" type="GT_U32"/>
    <Param class="int" dir="OUT" name="maxRate" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxShaperQueueProfileSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxShaper.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxShaperQueueProfileSet function
* @endinternal
*
* @brief   Set Shaper Profile for Traffic Class Queue of specified port on
*         specified device.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] tcQueue                  - traffic class queue on this Logical Port
* @param[in] burstSize                - burst size in units of 4K bytes
*                                      (max value is 4K which results in 16M burst size)
* @param[in,out] maxRatePtr               - Requested Rate in Kbps or packets per second.
* @param[in,out] maxRatePtr               - (pointer to) the actual Rate value in Kbps or
*                                      or packets per second.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="IN" name="burstSize" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="maxRate" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropBuffNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropBuffNumberGet function
* @endinternal
*
* @brief   Gets the current number of buffers allocated per specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] numberPtr                - number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropDbaAvailableBuffGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropDbaAvailableBuffGet function
* @endinternal
*
* @brief   Get amount of buffers available for dynamic allocation.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] availableBuffPtr         - pointer to amount of buffers available for dynamic
*                                      allocation.
*                                      RETURN:
*                                      GT_OK                    - on success
*                                      GT_FAIL                  - on error
*                                      GT_BAD_PTR               - on NULL pointer
*                                      GT_BAD_PARAM             - on wrong device number
*                                      GT_HW_ERROR              - on hardware error
*                                      GT_NOT_APPLICABLE_DEVICE - on not applicable device
*                                      COMMENTS:
*                                      None.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="availableBuff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropDbaAvailableBuffSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropDbaAvailableBuffSet function
* @endinternal
*
* @brief   Set amount of buffers available for dynamic allocation.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] availableBuff            - amount of buffers available for dynamic allocation.
*                                      (APPLICABLE RANGES: 0..0x0FFFFF).
*
* @note Valid only if DBA mode enabled.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="availableBuff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropDbaModeEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropDbaModeEnableGet function
* @endinternal
*
* @brief   Get state of Dynamic Buffers Allocation (DBA) mode of resource
*         management.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - pointer to DBA mode state.
*                                      RETURN:
*                                      GT_OK                    - on success
*                                      GT_FAIL                  - on error
*                                      GT_BAD_PTR               - on NULL pointer
*                                      GT_BAD_PARAM             - on wrong device number
*                                      GT_HW_ERROR              - on hardware error
*                                      GT_NOT_APPLICABLE_DEVICE - on not applicable device
*                                      COMMENTS:
*                                      None.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropDbaModeEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropDbaModeEnableSet function
* @endinternal
*
* @brief   Enable/disable Dynamic Buffers Allocation (DBA) mode of resource
*         management.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - GT_TRUE -  DBA mode enabled
*                                      GT_FALSE - DBA mode disabled.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropDescNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropDescNumberGet function
* @endinternal
*
* @brief   Gets the current number of descriptors allocated per specified port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] numberPtr                - number of descriptors
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropGlobalBuffNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropGlobalBuffNumberGet function
* @endinternal
*
* @brief   Gets total number of virtual buffers enqueued.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numberPtr                - number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The buffers associated with enqueued multi-target descriptors are
*       counted multiple times, once for each multi-target descriptor instance.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropGlobalDescNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropGlobalDescNumberGet function
* @endinternal
*
* @brief   Gets total number of descriptors allocated.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numberPtr                - number of descriptors
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMaskSharedBuffEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMaskSharedBuffEnableGet function
* @endinternal
*
* @brief   Gets status of shared buffer indication masking. When enabled, the tail
*         drop mechanism will ignore the buffer fill level indication.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) shared buffer indication masking.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMaskSharedBuffEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMaskSharedBuffEnableSet function
* @endinternal
*
* @brief   Enable/Disable shared buffer indication masking. When enabled, the tail
*         drop mechanism will ignore the buffer fill level indication.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - GT_TRUE  - Enable buffer fill level masking.
*                                      GT_FALSE - Disable buffer fill level masking.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastBuffNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastBuffNumberGet function
* @endinternal
*
* @brief   Gets total number of multi-target buffers allocated (virtual buffers).
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numberPtr                - number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The buffers associated with enqueued multi-target descriptors are
*       counted multiple times, once for each multi-target descriptor instance.
*       Multi-target descriptors are descriptors that are duplicated to
*       multiple egress targets, e.g. Multicast, Broadcast, or unknown Unicast
*       flooded packets.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastBuffersLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastBuffersLimitGet function
* @endinternal
*
* @brief   Get maximal buffers limits for multicast packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] mcastMaxBuffNumPtr       - (pointer to) the number of buffers allocated for
*                                      multicast packets.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="mcastMaxBuffNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastBuffersLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastBuffersLimitSet function
* @endinternal
*
* @brief   Set maximal buffers limits for multicast packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] mcastMaxBuffNum          - The number of buffers allocated for multicast packets.
*                                      (APPLICABLE RANGES: 0..0xFFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - on out of range mcastMaxBuffNum
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="mcastMaxBuffNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastDescNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastDescNumberGet function
* @endinternal
*
* @brief   Gets total number of multi-target descriptors allocated.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] numberPtr                - number of descriptors
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Multi-target descriptors are descriptors that are duplicated to
*       multiple egress targets, e.g. Multicast, Broadcast, or unknown Unicast
*       flooded packets.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastPcktDescLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastPcktDescLimitGet function
* @endinternal
*
* @brief   Get maximal descriptors limits for multicast packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] mcastMaxDescNumPtr       - (pointer to) the number of descriptors allocated
*                                      for multicast packets.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="mcastMaxDescNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropMcastPcktDescLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropMcastPcktDescLimitSet function
* @endinternal
*
* @brief   Set maximal descriptors limits for multicast packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] mcastMaxDescNum          - The number of descriptors allocated for multicast
*                                      packets.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="mcastMaxDescNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropPacketModeLengthGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropPacketModeLengthGet function
* @endinternal
*
* @brief   Get the packet length used for Tail Drop in packet mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] lengthPtr                - (pointer to) the number of buffers consumed by a packet for
*                                      Tail Drop.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="length" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropPacketModeLengthSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropPacketModeLengthSet function
* @endinternal
*
* @brief   Configure the packet length used for Tail Drop in packet mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] length                   - Defines the number of buffers consumed by a packet for
*                                      Tail Drop.
*                                      (APPLICABLE RANGES: 0..63).
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - on length out of range
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note The function should be called only when traffic disabled
*       Mode configuration for Pipe performed per profile.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="length" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileBufferConsumptionModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileBufferConsumptionModeGet function
* @endinternal
*
* @brief   Gets the packet buffer consumption mode per Tail Drop profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - tail drop profile
*
* @param[out] modePtr                  - (pointer to) buffer consumption mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device, profile
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileBufferConsumptionModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileBufferConsumptionModeSet function
* @endinternal
*
* @brief   Sets the packet buffer consumption mode per Tail Drop profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - tail drop profile
* @param[in] mode                     - buffer consumption mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device, profile or wrong mode
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileGet function
* @endinternal
*
* @brief   Get maximal port's limits of buffers and descriptors.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profileSet               - the Profile Set in which the Traffic Class Drop Parameters
*                                      is associated.
*
* @param[out] portMaxBuffLimitPtr      - pointer to maximal number of buffers for a port.
* @param[out] portMaxDescLimitPtr      - pointer to maximal number of descriptors for a
*                                      port.
* @param[out] portAlphaPtr             - pointer to the ratio of the free buffers used for
*                                      the port thresholds.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number or profile set
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="OUT" name="portMaxBuffLimit" type="GT_U32"/>
    <Param class="int" dir="OUT" name="portMaxDescLimit" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="portAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileIdGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileIdGet function
* @endinternal
*
* @brief   Get Drop Profile Set according to a Physical Port.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
*
* @param[out] profileSetPtr            - pointer to the Profile Set in which the Traffic Class
*                                      Drop Parameters is associated
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileIdSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileIdSet function
* @endinternal
*
* @brief   Bind a Physical Port to a specific Drop Profile Set.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] profileSet               - the Profile Set in which the Traffic Class Drop Parameters
*                                      is associated
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileSet function
* @endinternal
*
* @brief   Set maximal port's limits of buffers and descriptors.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profileSet               - the Profile Set in which the Traffic Class Drop
*                                      Parameters is associated
* @param[in] portMaxBuffLimit         - maximal number of buffers for a port.
*                                      (APPLICABLE RANGES: 0..0x0FFFFF).
* @param[in] portMaxDescLimit         - maximal number of descriptors for a port.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
* @param[in] portAlpha                - ratio of the free buffers used for the port
*                                      thresholds.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile set or
*                                       portAlpha
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profileSet" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="portMaxBuffLimit" type="GT_U32"/>
    <Param class="int" dir="IN" name="portMaxDescLimit" type="GT_U32"/>
    <Param class="enum" dir="IN" name="portAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileTcGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileTcGet function
* @endinternal
*
* @brief   Get tail drop profiles limits for particular TC.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - the Profile Set in which the Traffic Class
*                                      Drop Parameters is associated.
* @param[in] tc                       - the Traffic Class associated with this set
*                                      of Drop Parameters.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] tailDropProfileParamsPtr - (pointer to) the Drop Profile Parameters to
*                                      associate with the Traffic Class in this
*                                      Profile.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile set or
*                                       traffic class
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="tailDropProfileParams" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_TC_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileTcSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileTcSet function
* @endinternal
*
* @brief   Set tail drop profiles limits for particular TC.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - the Profile Set in which the Traffic Class
*                                      Drop Parameters is associated.
* @param[in] tc                       - the Traffic Class associated with this set
*                                      of Drop Parameters.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] tailDropProfileParamsPtr - the Drop Profile Parameters to associate
*                                      with the Traffic Class in this Profile set.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile set or
*                                       traffic class
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="struct" dir="IN" name="tailDropProfileParams" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_TC_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileTcSharingGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileTcSharingGet function
* @endinternal
*
* @brief   Get usage of the shared descriptors / buffer pool status for packets
*         with the traffic class (tc) that are transmited via a port that is
*         associated with the Profile (profile). Get the shared pool associated
*         for traffic class and Profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - the Profile Set in which the Traffic Class Drop
*                                      Parameters is associated.
* @param[in] tc                       - the Traffic Class.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] enableModePtr            - (pointer to) Drop Precedence (DPs) enabled mode for
*                                      sharing.
* @param[out] poolNumPtr               - (pointer to) shared pool associated.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, pfSet
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="enableMode" type="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_ENT"/>
    <Param class="int" dir="OUT" name="poolNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileTcSharingSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileTcSharingSet function
* @endinternal
*
* @brief   Enable/Disable usage of the shared descriptors / buffer pool for
*         packets with the traffic class (tc) that are transmited via a port that
*         is associated with the Profile (profile). Sets the shared pool
*         associated for traffic class and profile.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] profile                  - the Profile Set in which the Traffic Class Drop Parameters
*                                      is associated.
* @param[in] tc                       - the Traffic Class.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] enableMode               - Drop Precedence (DPs) enabled mode for sharing.
* @param[in] poolNum                  - shared pool associated.
*                                      (APPLICABLE RANGES: 0..7).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number, profile
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="enum" dir="IN" name="enableMode" type="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_ENT"/>
    <Param class="int" dir="IN" name="poolNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileWeightedRandomTailDropEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileWeightedRandomTailDropEnableGet function
* @endinternal
*
* @brief   Get Random Tail drop Threshold status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - the Profile Set in which the Traffic Class Drop Parameters
*                                      is associated.
* @param[in] dp                       - Drop Precedence
*                                      (APPLICABLE RANGES: 0..2).
* @param[in] tc                       - the Traffic Class.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] enablerPtr               - (pointer to) Tail Drop limits enabling for Weigthed Random
*                                      Tail Drop.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on invalid input paramters value
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="dp" type="GT_U32"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="enabler" type="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_ENABLER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropProfileWeightedRandomTailDropEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropProfileWeightedRandomTailDropEnableSet function
* @endinternal
*
* @brief   Enable/disable Weighted Random Tail Drop Threshold to overcome
*         synchronization.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] profile                  - the Profile Set in which the Traffic Class Drop Parameters
*                                      is associated.
* @param[in] dp                       - Drop Precedence.
*                                      (APPLICABLE RANGES: 0..2).
* @param[in] tc                       - the Traffic Class.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] enablerPtr               - (pointer to) Tail Drop limits enabling for Weigthed Random
*                                      Tail Drop
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on invalid input paramters value
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="profile" type="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT"/>
    <Param class="int" dir="IN" name="dp" type="GT_U32"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="struct" dir="IN" name="enabler" type="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_ENABLER_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedBuffMaxLimitGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedBuffMaxLimitGet function
* @endinternal
*
* @brief   Get max shared buffer limit value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] maxSharedBufferLimitPtr  - (pointer to) maximal shared buffer limit
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - one of the parameters in NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="maxSharedBufferLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedBuffMaxLimitSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedBuffMaxLimitSet function
* @endinternal
*
* @brief   Set max shared buffer limit value.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] maxSharedBufferLimit     - maximal shared buffer limit.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_OUT_OF_RANGE          - on illegal maxSharedBufferLimit
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="maxSharedBufferLimit" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedPolicyGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedPolicyGet function
* @endinternal
*
* @brief   Gets shared pool allocation policy for enqueuing of packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] policyPtr                - (pointer to) shared pool allocation policy.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="policy" type="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedPolicySet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedPolicySet function
* @endinternal
*
* @brief   Sets shared pool allocation policy for enqueuing of packets.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] policy                   - shared pool allocation policy.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or wrong policy
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="policy" type="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedPoolLimitsGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedPoolLimitsGet function
* @endinternal
*
* @brief   Get maximal descriptors and buffers limits for shared pool.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] poolNum                  - Shared pool number.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] maxBuffNumPtr            - (pointer to) the number of buffers allocated for a
*                                      shared pool.
* @param[out] maxDescNumPtr            - (pointer to) the number of descriptors allocated
*                                      for a shared pool.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="poolNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="maxBuffNum" type="GT_U32"/>
    <Param class="int" dir="OUT" name="maxDescNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedPoolLimitsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedPoolLimitsSet function
* @endinternal
*
* @brief   Set maximal descriptors and buffers limits for shared pool.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] poolNum                  - Shared pool number.
*                                      (APPLICABLE RANGES: 0..7).
* @param[in] maxBuffNum               - The number of buffers allocated for a shared pool.
*                                      (APPLICABLE RANGES: 0..0xFFFFF).
* @param[in] maxDescNum               - The number of descriptors allocated for a shared pool.
*                                      (APPLICABLE RANGES: 0..0xFFFF).
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_OUT_OF_RANGE          - on out of range value
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="poolNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="maxBuffNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="maxDescNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedResourceBuffNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedResourceBuffNumberGet function
* @endinternal
*
* @brief   Gets the number of virtual buffers enqueued from the shared buffer pool.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] numberPtr                - number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong poolNum or devNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropSharedResourceDescNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropSharedResourceDescNumberGet function
* @endinternal
*
* @brief   Gets total number of descriptors allocated from the shared descriptors
*         pool.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] tcQueue                  - traffic class queue.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] numberPtr                - number of descriptors
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong poolNum or devNum
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="tcQueue" type="GT_U32"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropTcBuffNumberGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropTcBuffNumberGet function
* @endinternal
*
* @brief   Gets the current number of buffers allocated on specified port
*         for specified Traffic Class queues.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number
* @param[in] tc                       - traffic class.
*                                      (APPLICABLE RANGES: 0..7).
*
* @param[out] numberPtr                - (pointer to) the number of buffers
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="tc" type="GT_U32"/>
    <Param class="int" dir="OUT" name="number" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropUcEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropUcEnableGet function
* @endinternal
*
* @brief   Get enable/disable tail-dropping for all packets based on the profile
*         limits.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
*
* @param[out] enablePtr                - pointer to tail drop status:
*                                      GT_TRUE  - Tail Drop is enabled.
*                                      GT_FALSE - The Tail Drop limits for all packets are ignored
*                                      and packet is dropped only when the Tx Queue has
*                                      reached its global descriptors limit.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropUcEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropUcEnableSet function
* @endinternal
*
* @brief   Enable/Disable tail-dropping for all packets based on the profile limits.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   -  device number.
* @param[in] enable                   -  GT_TRUE  - Tail Drop is enabled.
*                                      GT_FALSE - The Tail Drop limits for all packets are
*                                      ignored and packet is dropped only
*                                      when the Tx Queue has reached its global
*                                      descriptors limit.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropWrtdMasksGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropWrtdMasksGet function
* @endinternal
*
* @brief   Gets Weighted Random Tail Drop (WRTD) masks.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] maskLsbPtr               - (pointer to) WRTD masked least significant bits.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="maskLsb" type="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_MASK_LSB_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortTxTailDropWrtdMasksSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortTxTailDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortTxTailDropWrtdMasksSet function
* @endinternal
*
* @brief   Sets Weighted Random Tail Drop (WRTD) masks.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] maskLsbPtr               - WRTD masked least significant bits.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong device number
* @retval GT_OUT_OF_RANGE          - on out of range value
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="maskLsb" type="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_MASK_LSB_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPortVosOverrideControlModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortVosOverrideControlModeGet function
* @endinternal
*
* @brief   Get the override mode of the VOS parameters for all ports.
*
* @note   APPLICABLE DEVICES:      pipe
* @param[in] devNum                   - Device Number
*
* @param[out] vosOverridePtr           - (pointer to) current VOS override mode.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_BAD_PTR               - if vosOverride is NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="vosOverride" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortVosOverrideControlModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortVosOverrideControlModeSet function
* @endinternal
*
* @brief   Set the override mode of the VOS parameters for all ports. If the override mode
*         is set to true, the VOS parameters will be overriden.
*
* @note   APPLICABLE DEVICES:      pipe
* @param[in] devNum                   - Device Number
* @param[in] vosOverride              - GT_TRUE means to override the VOS parameters for the device, GT_FALSE otherwisw.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on bad devNum
* @retval GT_FAIL                  - on error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="vosOverride" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXGmiiModeGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXGmiiModeGet function
* @endinternal
*
* @brief   Gets XGMII mode on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] modePtr                  - Pointer to XGMII mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="OUT" name="mode" type="CPSS_PORT_XGMII_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXGmiiModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXGmiiModeSet function
* @endinternal
*
* @brief   Sets XGMII mode on specified device.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
* @param[in] mode                     - XGMII mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="mode" type="CPSS_PORT_XGMII_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXgLanesSwapEnableGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgLanesSwapEnableGet function
* @endinternal
*
* @brief   Gets status of swapping XAUI or HyperG.Stack port SERDES Lanes.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
*
* @param[out] enablePtr                - pointer to status of swapping XAUI PHY SERDES Lanes.
*                                      - GT_TRUE  - Swap Lanes by follows:
*                                      The lanes are swapped by follows:
*                                      Lane 0 PSC Tx data is connected to SERDES Lane 3
*                                      Lane 1 PSC Tx data is connected to SERDES Lane 2
*                                      Lane 2 PSC Tx data is connected to SERDES Lane 1
*                                      Lane 3 PSC Tx data is connected to SERDES Lane 0
*                                      - GT_FALSE - Normal operation (no swapping)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
*
* @note Supported for XAUI or HyperG.Stack ports only.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXgLanesSwapEnableSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgLanesSwapEnableSet function
* @endinternal
*
* @brief   Enable/Disable swapping XAUI or HyperG.Stack port SERDES Lanes.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number
* @param[in] portNum                  - physical port number.
* @param[in] enable                   - GT_TRUE  - Swap Lanes by follows:
*                                      The lanes are swapped by follows:
*                                      Lane 0 PSC Tx data is connected to SERDES Lane 3
*                                      Lane 1 PSC Tx data is connected to SERDES Lane 2
*                                      Lane 2 PSC Tx data is connected to SERDES Lane 1
*                                      Lane 3 PSC Tx data is connected to SERDES Lane 0
*                                      - GT_FALSE - Normal operation (no swapping)
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
*
* @note Supported for XAUI or HyperG.Stack ports only.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <ExtFunction name="cpssPxPortXgPscLanesSwapGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgPscLanesSwapGet function
* @endinternal
*
* @brief   Get swapping configuration of XAUI port SERDES Lanes.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] rxSerdesLaneArr[CPSS_PX_PORT_XG_PSC_LANES_NUM_CNS] - array for binding port Rx PSC and SERDES lanes:
*                                      array index is PSC lane, array value is SERDES lane.
* @param[out] txSerdesLaneArr[CPSS_PX_PORT_XG_PSC_LANES_NUM_CNS] - array for binding port Tx PSC and SERDES lanes:
*                                      array index is PSC lane, array value is SERDES lane.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Supported for XAUI ports only.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int[]" dir="OUT" name="rxSerdesLaneArr" type="GT_U32"/>
    <Param class="int[]" dir="OUT" name="txSerdesLaneArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssPxPortXgPscLanesSwapSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgPscLanesSwapSet function
* @endinternal
*
* @brief   Set swapping configuration of XAUI port SERDES Lanes.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] rxSerdesLaneArr[CPSS_PX_PORT_XG_PSC_LANES_NUM_CNS] - array for binding port Rx PSC and SERDES lanes:
*                                      array index is PSC lane, array value is SERDES lane.
* @param[in] txSerdesLaneArr[CPSS_PX_PORT_XG_PSC_LANES_NUM_CNS] - array for binding port Tx PSC and SERDES lanes:
*                                      array index is PSC lane, array value is SERDES lane.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - wrong devNum, portNum
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_OUT_OF_RANGE          - wrong SERDES lane
* @retval GT_BAD_VALUE             - multiple connection detected
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Supported only for 4 PCS lanes for XAUI port modes,
*       2 PCS lanes for RXAUI mode
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int[]" dir="IN" name="rxSerdesLaneArr" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="txSerdesLaneArr" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssPxPortXgmiiLocalFaultGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgmiiLocalFaultGet function
* @endinternal
*
* @brief   Reads bit then indicate if the XGMII RS has detected local
*         fault messages.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] isLocalFaultPtr          - GT_TRUE, if bit set or
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isLocalFault" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXgmiiRemoteFaultGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXgmiiRemoteFaultGet function
* @endinternal
*
* @brief   Reads bit then indicate if the XGMII RS has detected remote
*         fault messages.
*
* @note   APPLICABLE DEVICES:      pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] portNum                  - physical port number
*
* @param[out] isRemoteFaultPtr         - GT_TRUE, if bit set or
*                                      GT_FALSE otherwise
*
* @retval GT_OK                    - on success
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_SUPPORTED         - on not supported feature for a port
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="OUT" name="isRemoteFault" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXlgReduceAverageIPGGet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXlgReduceAverageIPGGet function
* @endinternal
*
* @brief   Get Reduce Average IPG value in XLG MAC.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] valuePtr                 -  pointer to value content of the XLG MAC DIC_PPM_IPG_Reduce register
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_HW_ERROR              - on hardware error
*                                       GT_BAD_PARAM on bad parameters
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPortXlgReduceAverageIPGSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortCtrl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPortXlgReduceAverageIPGSet function
* @endinternal
*
* @brief   Configure Reduce Average IPG in XLG MAC.
*
* @note   APPLICABLE DEVICES:      pipe.
* @param[in] devNum                   - physical device number.
* @param[in] portNum                  - physical port number.
* @param[in] value                    -  to set to the XLG MAC DIC_PPM_ IPG_Reduce Register (APPLICABLE RANGES: 0..0xFFFF)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on hardware error
* @retval GT_HW_ERROR              - on hardware error
*                                       GT_BAD_PARAM on bad parameters
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpPortTypeKeyGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpPortTypeKeyGet function
* @endinternal
*
* @brief   Get port PTP type key info.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
*
* @param[out] portKeyPtr               - (pointer to) port PTP type key.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="portKey" type="CPSS_PX_PTP_TYPE_KEY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpPortTypeKeySet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpPortTypeKeySet function
* @endinternal
*
* @brief   Set port PTP type key info.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] portNum                  - physical port number.
* @param[in] portKeyPtr               - (pointer to) port PTP type key.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="portKey" type="CPSS_PX_PTP_TYPE_KEY_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiCaptureOverwriteEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiCaptureOverwriteEnableGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Capture Overwrite Enable
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) Capture Overwrite Enable.
*                                      When both TOD Capture registers are valid and capture
*                                      trigger arrives:
*                                      GT_TRUE  - the TOD Capture Value0 is overwritten.
*                                      GT_FALSE - the TOD Capture Value0 unchanged.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiCaptureOverwriteEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiCaptureOverwriteEnableSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Capture Overwrite Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - Capture Overwrite Enable.
*                                      When both TOD Capture registers are valid and capture
*                                      trigger arrives:
*                                      GT_TRUE  - the TOD Capture Value0 is overwritten.
*                                      GT_FALSE - the TOD Capture Value0 unchanged.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiClockCycleGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiClockCycleGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Clock Cycle.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] secondsPtr               - (pointer to) seconds part of cycle.
*                                      (APPLICABLE RANGES: 0..3.)
* @param[out] nanoSecondsPtr           - (pointer to) nano seconds part of cycle.
*                                      (APPLICABLE RANGES: 0..2^28-1.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="seconds" type="GT_U32"/>
    <Param class="int" dir="OUT" name="nanoSeconds" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiClockCycleSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiClockCycleSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Clock Cycle.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] seconds                  -  part of cycle.
*                                      (APPLICABLE RANGES: 0..3.)
* @param[in] nanoSeconds              - nano seconds part of cycle.
*                                      (APPLICABLE RANGES: 0..0x3FFFFFFF.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="seconds" type="GT_U32"/>
    <Param class="int" dir="IN" name="nanoSeconds" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiClockModeGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiClockModeGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Clock Mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] clockModePtr             - (pointer to) clock interface using mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="clockMode" type="CPSS_PX_PTP_TAI_CLOCK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiClockModeSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiClockModeSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Clock Mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] clockMode                - clock interface using mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="clockMode" type="CPSS_PX_PTP_TAI_CLOCK_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiExternalPulseWidthGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiExternalPulseWidthGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) External Pulse Width
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] extPulseWidthPtr         -  (pointer to) External Pulse Width.
*                                      width of the pulse in nanoseconds of generated output trigger.
*                                      (APPLICABLE RANGES: 0..2^28-1.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="extPulseWidth" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiExternalPulseWidthSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiExternalPulseWidthSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) External Pulse Width.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] extPulseWidth            - External Pulse Width.
*                                      width of the pulse in nanoseconds of generated output trigger.
*                                      (APPLICABLE RANGES: 0..2^28-1.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on bad extPulseWidth
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="extPulseWidth" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiFractionalNanosecondDriftGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiFractionalNanosecondDriftGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Fractional Nanosecond Drift.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] fracNanoSecondPtr        - (pointer to) fractional nano seconds drift.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="fracNanoSecond" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiFractionalNanosecondDriftSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiFractionalNanosecondDriftSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Fractional Nanosecond Drift.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] fracNanoSecond           - (pointer to) fractional nano seconds drift.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="fracNanoSecond" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiFrequencyDriftThesholdsGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiFrequencyDriftThesholdsGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Frequency Drift Thesholds.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] interruptThresholdPtr    - (pointer to)the drift value threshold causing interrupt.
*                                      Notifies about the clock frequency out of sync.
*                                      (APPLICABLE RANGES: 0..2^24-1.)
* @param[out] adjustThresholdPtr       - (pointer to)the drift value threshold that triggers
*                                      the adjustment logic. Prevents minor jitters
*                                      from affecting the drift adjustment.
*                                      (APPLICABLE RANGES: 0..255.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="interruptThreshold" type="GT_U32"/>
    <Param class="int" dir="OUT" name="adjustThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiFrequencyDriftThesholdsSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiFrequencyDriftThesholdsSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Frequency Drift Thesholds.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] interruptThreshold       - the drift value threshold causing interrupt.
*                                      Notifies about the clock frequency out of sync.
*                                      (APPLICABLE RANGES: 0..2^24-1.)
* @param[in] adjustThreshold          - the drift value threshold that triggers
*                                      the adjustment logic. Prevents minor jitters
*                                      from affecting the drift adjustment.
*                                      (APPLICABLE RANGES: 0..255.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="interruptThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="adjustThreshold" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiGracefulStepGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiGracefulStepGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Graceful Step.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] gracefulStepPtr          - (pointer to) Graceful Step in nanoseconds.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="gracefulStep" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiGracefulStepSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiGracefulStepSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Graceful Step.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] gracefulStep             - Graceful Step in nanoseconds.
*                                      (APPLICABLE RANGES: 0..31.)
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on wrong gracefulStep
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="gracefulStep" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiIncomingClockCounterEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiIncomingClockCounterEnableGet function
* @endinternal
*
* @brief   Get enabled state of TAI (Time Application Interface) Incoming Clock
*         Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to)enable counting.
*                                      GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiIncomingClockCounterEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiIncomingClockCounterEnableSet function
* @endinternal
*
* @brief   Set enabled state of TAI (Time Application Interface) Incoming Clock
*         Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   -  counting.
*                                      GT_TRUE - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiIncomingClockCounterGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiIncomingClockCounterGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Incoming Clock Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] valuePtr                 - (pointer to)value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiIncomingTriggerCounterGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiIncomingTriggerCounterGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Incoming Trigger Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] valuePtr                 - (pointer to)value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiInputClockSelectGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiInputClockSelectGet function
* @endinternal
*
* @brief   Get input TAI clock's selection.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] clockSelectPtr           - (pointer to) input clock selection mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="clockSelect" type="CPSS_PX_PTP_TAI_CLOCK_SELECT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiInputClockSelectSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiInputClockSelectSet function
* @endinternal
*
* @brief   Configures input TAI clock's selection.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] clockSelect              - input clock selection mode.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="clockSelect" type="CPSS_PX_PTP_TAI_CLOCK_SELECT_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiInputTriggersCountEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiInputTriggersCountEnableGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Count Input Triggers Enable
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) Count Input Triggers Enable.
*                                      GT_TRUE  - each incoming trigger is counted.
*                                      GT_FALSE - incoming triggers not counted.
*                                      see cpssPxPtpTaiIncomingTriggerCounterSet/Get
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiInputTriggersCountEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiInputTriggersCountEnableSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Count Input Triggers Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - Count Input Triggers Enable.
*                                      GT_TRUE  - each incoming trigger is counted.
*                                      GT_FALSE - incoming triggers not counted.
*                                      see cpssPxPtpTaiIncomingTriggerCounterSet/Get
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiOutputTriggerEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiOutputTriggerEnableGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) Output Trigger Generation Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) enable output trigger generation.
*                                      GT_TRUE  - enable GT_FALSE - disable
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiOutputTriggerEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiOutputTriggerEnableSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) Output Trigger Generation Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   -   output trigger generation.
*                                      GT_TRUE  - enable, GT_FALSE - disable.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note use cpssPxPtpTaiTodSet with
*       CPSS_PX_PTP_TAI_TOD_TYPE_TRIGGER_GENERATION_E and
*       the time to trigger generation.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPClockCycleGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPClockCycleGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) PClock Cycle.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] nanoSecondsPtr           - (pointer to) nano seconds cycle.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="nanoSeconds" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPClockCycleSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPClockCycleSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) PClock Cycle.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] nanoSeconds              - nano seconds cycle.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="nanoSeconds" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPClockOutputEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPClockOutputEnableGet function
* @endinternal
*
* @brief   Get PTP PCLK OUT as clock source for RCVR_CLOCK_OUT[1] pin enabled state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enablePtr                - (pointer to) PTP PCLK OUT as clock source for
*                                      RCVR_CLOCK_OUT[1] pin enabled state.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPClockOutputEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPClockOutputEnableSet function
* @endinternal
*
* @brief   Set PTP PCLK OUT as clock source for RCVR_CLOCK_OUT[1] pin enabled state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] enable                   -  or disable PTP PCLK OUT clock source for
*                                      RCVR_CLOCK_OUT[1] pin:
*                                      GT_TRUE  - enable PTP PCLK OUT as clock source for
*                                      RCVR_CLOCK_OUT[1] pin.
*                                      GT_FALSE - disable PTP PCLK OUT as clock source for
*                                      RCVR_CLOCK_OUT[1] pin.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPhaseUpdateEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPhaseUpdateEnableGet function
* @endinternal
*
* @brief   Get configuration of the PPS rising edge phase enabled state.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) configuration of the PPS rising edge
*                                      phase enabled state.
*                                      GT_TRUE  - configuration of the PPS rising edge phase
*                                      enabled.
*                                      GT_FALSE - configuration of the PPS rising edge phase
*                                      disabled.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPhaseUpdateEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPhaseUpdateEnableSet function
* @endinternal
*
* @brief   Set configuration of the PPS rising edge phase enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - configuration of the PPS rising edge phase enable.
*                                      GT_TRUE  - configuration of the PPS rising edge phase
* @param[in] enable- configuration of the PPS rising edge phase enable.
*                                      GT_FALSE - configuration of the PPS rising edge phase
*                                      disable.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPtpPClockDriftAdjustEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPtpPClockDriftAdjustEnableGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) PTP Clock Adjust Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) PTP PClock Drift Adjust Enable.
*                                      GT_TRUE - the PClk is affected by the <Drift Adjustment> or not.
*                                      GT_FALSE - the PClk reflects the frequency of the free running TOD,
*                                      without any frequency adjustments.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPtpPClockDriftAdjustEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPtpPClockDriftAdjustEnableSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) PTP Clock Adjust Enable.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] enable                   - PTP PClock Drift Adjust Enable.
*                                      GT_TRUE - the PClk is affected by the <Drift Adjustment> or not.
*                                      GT_FALSE - the PClk reflects the frequency of the free running TOD,
*                                      without any frequency adjustments.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPulseInModeGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPulseInModeGet function
* @endinternal
*
* @brief  Get TAI PTP pulse IN mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                - device number.
* @param[out] pulseMode            - (pointer to) TAI PulseIN signal mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_BAD_STATE             - on bad state
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="pulseMode" type="CPSS_PX_PTP_TAI_PULSE_IN_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiPulseInModeSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiPulseInModeSet function
* @endinternal
*
* @brief  Set TAI PTP pulse IN mode.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                - device number.
* @param[in] pulseMode             - TAI PulseIN signal mode
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="pulseMode" type="CPSS_PX_PTP_TAI_PULSE_IN_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodCaptureStatusGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodCaptureStatusGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) TOD Capture Status.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] captureIndex             - Capture Index.
*                                      (APPLICABLE RANGES: 0..1.)
*
* @param[out] validPtr                 - (pointer to)Capture is valid.
*                                      GT_TRUE - valid, GT_FALSE - invalid
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="captureIndex" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="valid" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodCounterFunctionGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodCounterFunctionGet function
* @endinternal
*
* @brief   Get type of TOD counter action that will be performed once triggered by
*         cpssPxPtpTaiTodCounterFunctionTriggerSet() API or by pulse from an
*         external interface.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] functionPtr              - (pointer to) One of the four possible TOD counter
*                                      functions
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="OUT" name="function" type="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodCounterFunctionSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodCounterFunctionSet function
* @endinternal
*
* @brief   The function configures type of TOD counter action that will be
*         performed once triggered by cpssPxPtpTaiTodCounterFunctionTriggerSet()
*         API or by pulse from an external interface.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] function                 - One of the four possible TOD counter functions
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="function" type="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodCounterFunctionTriggerGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodCounterFunctionTriggerGet function
* @endinternal
*
* @brief   Get status of trigger TOD (Time of Day) counter function.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] enablePtr                - (pointer to) GT_TRUE - The trigger is on, the TOD
*                                      function is not finished.
*                                      GT_FALSE - The trigger is off, the TOD function is
*                                      finished.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong devNum or direction
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodCounterFunctionTriggerSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodCounterFunctionTriggerSet function
* @endinternal
*
* @brief   Trigger TOD (Time of Day) counter function accorging to the function set
*         by cpssPxPtpTaiTodCounterFunctionSet().
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_STATE             - when previous TOD triggered action is not finished yet
* @retval GT_BAD_PARAM             - on wrong devNum or direction
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) TOD values.
*         The TOD was captured by triggering an appropriate function.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] todValueType             - type of TOD value.
*
* @param[out] todValuePtr              - (pointer to) TOD value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="todValueType" type="CPSS_PX_PTP_TAI_TOD_TYPE_ENT"/>
    <Param class="struct" dir="OUT" name="todValue" type="CPSS_PX_PTP_TAI_TOD_COUNT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) TOD values.
*         The TOD will be updated by triggering an appropriate function.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] todValueType             - type of TOD value.
*                                      Valid types are
*                                      CPSS_PX_PTP_TAI_TOD_TYPE_TRIGGER_GENERATION_E,
*                                      CPSS_PX_PTP_TAI_TOD_TYPE_TRIGGER_GENERATION_MASK_E,
*                                      CPSS_PX_PTP_TAI_TOD_TYPE_LOAD_VALUE_E.
* @param[in] todValuePtr              - (pointer to) TOD value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note This API does not activate any triggers, other APIs does it
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="enum" dir="IN" name="todValueType" type="CPSS_PX_PTP_TAI_TOD_TYPE_ENT"/>
    <Param class="struct" dir="IN" name="todValue" type="CPSS_PX_PTP_TAI_TOD_COUNT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodStepGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodStepGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) TOD Step.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] todStepPtr               - (pointer to) TOD Step.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="OUT" name="todStep" type="CPSS_PX_PTP_TAI_TOD_STEP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodStepSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodStepSet function
* @endinternal
*
* @brief   Set TAI (Time Application Interface) TOD Step.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] todStepPtr               - (pointer to) TOD Step.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="struct" dir="IN" name="todStep" type="CPSS_PX_PTP_TAI_TOD_STEP_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTaiTodUpdateCounterGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTaiTodUpdateCounterGet function
* @endinternal
*
* @brief   Get TAI (Time Application Interface) TOD Update Counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
*
* @param[out] valuePtr                 - (pointer to)TOD Update Counter value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Counter is Clear On Read. Value incremented at each
*       TOD Update/Increment/Decrement function.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTsuControlGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTsuControlGet function
* @endinternal
*
* @brief   Get TSU (Time Stamp Unit) Control.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number.
*
* @param[out] controlPtr               - (pointer to) control structure.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="control" type="CPSS_PX_PTP_TSU_CONTROL_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTsuControlSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTsuControlSet function
* @endinternal
*
* @brief   Set TSU (Time Stamp Unit) Control.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number.
* @param[in] controlPtr               - (pointer to) control structure.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_OUT_OF_RANGE          - on out-of-range parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="control" type="CPSS_PX_PTP_TSU_CONTROL_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTsuCountersClear" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTsuCountersClear function
* @endinternal
*
* @brief   Clear All TSU (Time Stamp Unit) Packet counters.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTsuPacketCouterGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTsuPacketCouterGet function
* @endinternal
*
* @brief   Get TSU (Time Stamp Unit) packet counter.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number.
* @param[in] counterType              - counter type (see enum)
*
* @param[out] valuePtr                 - (pointer to) counter value.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - one of the parameters is NULL pointer
* @retval GT_BAD_PARAM             - on wrong parameter
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="counterType" type="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_ENT"/>
    <Param class="int" dir="OUT" name="value" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTypeKeyEntryEnableGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTypeKeyEntryEnableGet function
* @endinternal
*
* @brief   Get enabled state of PTP type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] ptpTypeIndex             - index of the PTP type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] enablePtr                - (pointer to) Enable or disable PTP type key table entry
*                                      GT_TRUE - enable PTP type key table entry,
*                                      GT_FALSE - disable PTP type key table entry.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="ptpTypeIndex" type="CPSS_PX_PTP_TYPE_INDEX"/>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTypeKeyEntryEnableSet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTypeKeyEntryEnableSet function
* @endinternal
*
* @brief   Enable/disable PTP type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] ptpTypeIndex             - index of the PTP type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] enable                   - Enable or disable PTP type key table entry
*                                      GT_TRUE - enable PTP type key table entry,
*                                      GT_FALSE - disable PTP type key table entry.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="ptpTypeIndex" type="CPSS_PX_PTP_TYPE_INDEX"/>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTypeKeyEntryGet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTypeKeyEntryGet function
* @endinternal
*
* @brief   Get PTP type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] ptpTypeIndex             - index of the PTP type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
*
* @param[out] keyDataPtr               - (pointer to) PTP type key data.
* @param[out] keyMaskPtr               - (pointer to) PTP type key mask.
*                                      The PTP type key mask is AND styled one.
*                                      Mask bit's 0 means don't care bit (corresponding bit in
*                                      the pattern is not using in the TCAM like lookup).
*                                      Mask bit's 1 means that corresponding bit in the
*                                      pattern is using in the TCAM like lookup.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="ptpTypeIndex" type="CPSS_PX_PTP_TYPE_INDEX"/>
    <Param class="struct" dir="OUT" name="keyData" type="CPSS_PX_PTP_TYPE_KEY_FORMAT_STC"/>
    <Param class="struct" dir="OUT" name="keyMask" type="CPSS_PX_PTP_TYPE_KEY_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxPtpTypeKeyEntrySet" srcpath="mainPxDrv/h/cpss/px/ptp/cpssPxPtp.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxPtpTypeKeyEntrySet function
* @endinternal
*
* @brief   Set PTP type key table entry.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number.
* @param[in] ptpTypeIndex             - index of the PTP type key in the table.
*                                      (APPLICABLE RANGES: 0..31)
* @param[in] keyDataPtr               - (pointer to) PTP type key data.
* @param[in] keyMaskPtr               - (pointer to) PTP type key mask.
*                                      The PTP type key mask is AND styled one.
*                                      Mask bit's 0 means don't care bit (corresponding bit in
*                                      the pattern is not using in the TCAM like lookup).
*                                      Mask bit's 1 means that corresponding bit in the
*                                      pattern is using in the TCAM like lookup.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameters
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_OUT_OF_RANGE          - one of the parameters is out of range
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_SW_DEV_NUM"/>
    <Param class="int" dir="IN" name="ptpTypeIndex" type="CPSS_PX_PTP_TYPE_INDEX"/>
    <Param class="struct" dir="IN" name="keyData" type="CPSS_PX_PTP_TYPE_KEY_FORMAT_STC"/>
    <Param class="struct" dir="IN" name="keyMask" type="CPSS_PX_PTP_TYPE_KEY_FORMAT_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerAdaptiveRxTrainSuppSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerAdaptiveRxTrainSuppSet function
* @endinternal
*
* @brief   set the AdaptiveRxTrainSupp attr in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] adaptRxTrainSupp         - boolean whether adaptive rx tune is supported
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="adaptRxTrainSupp" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApAddMultiSpeedParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApAddMultiSpeedParamsSet
*           function
* @endinternal
*
* @brief   set the multi speed params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] ifMode                - port mode
* @param[in] speed                 - port speed
* @param[in] fecSupported          - fec supported
* @param[in] fecRequested          - fec requested
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* Hint: this is for multi speed set,
* cpssPxSamplePortManagerApMandatoryParamsSet must be called
* first
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="enum" dir="IN" name="fecSupported" type="CPSS_PORT_FEC_MODE_ENT"/>
    <Param class="enum" dir="IN" name="fecRequested" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApAttributeParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApAttributeParamsSet
*           function
* @endinternal
*
* @brief   set the mandtory params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] nonceDisable          - nonceDisable
* @param[in] fcPause               - fcPause
* @param[in] fcAsmDir              - fcAsmDir
* @param[in] negotiationLaneNum    - negotiation lane number
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="nonceDisable" type="GT_BOOL"/>
    <Param class="bool" dir="IN" name="fcPause" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="fcAsmDir" type="CPSS_PORT_AP_FLOW_CONTROL_ENT"/>
    <Param class="int" dir="IN" name="negotiationLaneNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApMandatoryParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApMandatoryParamsSet function
* @endinternal
*
* @brief   set the mandtory params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] ifMode                - port mode
* @param[in] speed                 - port speed
* @param[in] fecSupported          - fec supported
* @param[in] fecRequested          - fec requested
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="enum" dir="IN" name="fecSupported" type="CPSS_PORT_FEC_MODE_ENT"/>
    <Param class="enum" dir="IN" name="fecRequested" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApOverrideEtlLaneParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApOverrideEtlLaneParamsSet
*           function
* @endinternal
*
* @brief   set the etl params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] laneNum               - lane number
* @param[in] laneSpeed             - lane speed
* @param[in] portParamsInputStc    - structe with attributes
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="laneSpeed" type="CPSS_PM_AP_LANE_SERDES_SPEED"/>
    <Param class="struct" dir="IN" name="portParamsInputStc" type="CPSS_PM_AP_LANE_OVERRIDE_PARAM_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApOverrideRxLaneParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApOverrideRxLaneParamsSet
*           function
* @endinternal
*
* @brief   set the rx params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] laneNum               - lane number
* @param[in] laneSpeed             - lane speed
* @param[in] portParamsInputStc    - structe with attributes
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="laneSpeed" type="CPSS_PM_AP_LANE_SERDES_SPEED"/>
    <Param class="struct" dir="IN" name="portParamsInputStc" type="CPSS_PM_AP_LANE_OVERRIDE_PARAM_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerApOverrideTxLaneParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerApOverrideTxLaneParamsSet
*           function
* @endinternal
*
* @brief   set the tx params in the pm database
*
* @param[in] devNum                - device number
* @param[in] portNum               - port number
* @param[in] laneNum               - lane number
* @param[in] laneSpeed             - lane speed
* @param[in] portParamsInputStc    - structe with attributes
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="enum" dir="IN" name="laneSpeed" type="CPSS_PM_AP_LANE_SERDES_SPEED"/>
    <Param class="struct" dir="IN" name="portParamsInputStc" type="CPSS_PM_AP_LANE_OVERRIDE_PARAM_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerEdgeDetectSuppSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerEdgeDetectSuppSet function
* @endinternal
*
* @brief   set the EdgeDetectSupp attr in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] edgeDetectSupported      - boolean whether edge detect is supported
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="bool" dir="IN" name="edgeDetectSupported" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerEnhanceTuneOverrideSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* cpssPxSamplePortManagerEnhanceTuneOverrideSet function
*
* @brief   Enhanced Tune Override Params Set fn.
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] minLF                    - minimum LF
* @param[in] maxLF                    - max LF
*
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="minLF" type="GT_U32"/>
    <Param class="int" dir="IN" name="maxLF" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerFecModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerFecModeSet function
* @endinternal
*
* @brief   set the FecMode attr in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] fecMode                  - FEC mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="fecMode" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerLoopbackSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerLoopbackSet function
* @endinternal
*
* @brief   set the Loopback params in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] loopbackType             - loopback type
* @param[in] macLoopbackEnable        - MAC loopback
*       enable/disable
* @param[in] serdesLoopbackMode       - SerDes loopback type
* @param[in] enableRegularTrafic      - enable trafic
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="loopbackType" type="CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT"/>
    <Param class="bool" dir="IN" name="macLoopbackEnable" type="GT_BOOL"/>
    <Param class="enum" dir="IN" name="serdesLoopbackMode" type="CPSS_PORT_SERDES_LOOPBACK_MODE_ENT"/>
    <Param class="bool" dir="IN" name="enableRegularTrafic" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerMandatoryParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerMandatoryParamsSet function
* @endinternal
*
* @brief   set the mandtory params in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] ifMode                   - port mode
* @param[in] speed                    - port speed
* @param[in] speed                    - port fec mode
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
    <Param class="enum" dir="IN" name="speed" type="CPSS_PORT_SPEED_ENT"/>
    <Param class="enum" dir="IN" name="fecMode" type="CPSS_PORT_FEC_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerOpticalCalibrationSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* cpssPxSamplePortManagerOpticalCalibrationSet function
*
* @brief   pre defined calibration type set command for port
*          manager
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] calibrationType          - Cu or Optical
* @param[in] minEoThreshold           - minimum EO threshold
* @param[in] maxEoThreshold           - max EO threshold
* @param[in] bitMapEnable             - BM enable
*
* @note   APPLICABLE DEVICES:      xCat3; Caelum; Aldrin; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; Lion2; xCat2; Bobcat2; AC3X.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="calibrationType" type="CPSS_PORT_MANAGER_CALIBRATION_TYPE_ENT"/>
    <Param class="int" dir="IN" name="minEoThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="maxEoThreshold" type="GT_U32"/>
    <Param class="int" dir="IN" name="bitMapEnable" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerSerdesRxParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerSerdesRxParamsSet function
* @endinternal
*
* @brief   set the serdes rx params in the pm database
*
* @param[in] devNum               - device number
* @param[in] portNum              - port number
* @param[in] laneNum              - lane number
* @param[in] portParamsInputSt    - a structure contains port
*                                    configuration
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="portParamsInputStc" type="CPSS_PORT_SERDES_RX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerSerdesTxParamsSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerSerdesTxParamsSet function
* @endinternal
*
* @brief   set the serdes tx params in the pm database
*
* @param[in] devNum               - device number
* @param[in] portNum              - port number
* @param[in] laneNum              - lane number
* @param[in] portParamsInputSt    - a structure contains port
*                                    configuration
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="laneNum" type="GT_U32"/>
    <Param class="struct" dir="IN" name="portParamsInputStc" type="CPSS_PORT_SERDES_TX_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerTrainModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxSamplePortManagerTrainModeSet function
* @endinternal
*
* @brief   set the TrainMode attr in the pm database
*
* @param[in] devNum                   - device number
* @param[in] portNum                  - port number
* @param[in] trainMode                - trainMode type
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="trainModeType" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxSamplePortManagerUnMaskModeSet" srcpath="mainPxDrv/h/cpss/px/port/cpssPxPortManager.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* cpssPxSamplePortManagerUnMaskModeSet function
*
* @brief   defines whether to allow port manager unmask LOW/MAC
*          level events or not
*
* @note   APPLICABLE DEVICES:      xCat3; Caelum; Aldrin; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; Lion; Lion2; xCat2; Bobcat2; AC3X.
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong port number or device
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on passing null pointer
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="unMaskMode" type="CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssPxVersionGet" srcpath="mainPxDrv/h/cpss/px/version/cpssPxVersion.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssPxVersionGet function
* @endinternal
*
* @brief   This function returns CPSS PX version.
*
* @note   APPLICABLE DEVICES:      Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
*
* @param[out] versionPtr               - (pointer to) CPSS PX version info.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PTR               - one parameter is NULL pointer
* @retval GT_BAD_SIZE              - the version name is too long
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="OUT" name="version" type="GT_VERSION"/>
   </Params>
  </Function>
  <Function name="cpssSmiRegisterRead" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSmiRegisterRead function
* @endinternal
*
* @brief   The function reads register of a Marvell device, which connected to
*         SMI master controller of packet processor
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] smiInterface             - SMI master interface Id
* @param[in] smiAddr                  - address of configurated device on SMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - register address
*
* @param[out] dataPtr                  - pointer to place data from read operation
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PARAM             - bad devNum, smiInterface
* @retval GT_BAD_PTR               - pointer to place data is NULL
* @retval GT_NOT_READY             - smi is busy
* @retval GT_HW_ERROR              - hw error
*
* @note Function specific for Marvell devices with 32-bit registers
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="smiInterface" type="CPSS_PHY_SMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="smiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssSmiRegisterReadShort" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSmiRegisterReadShort function
* @endinternal
*
* @brief   The function reads register of a device, which connected to SMI master
*         controller of packet processor
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] smiInterface             - SMI master interface Id
* @param[in] smiAddr                  - address of configurated device on SMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - register address
*
* @param[out] dataPtr                  - pointer to place data from read operation
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PARAM             - bad devNum, smiInterface
* @retval GT_BAD_PTR               - pointer to place data is NULL
* @retval GT_NOT_READY             - smi is busy
* @retval GT_HW_ERROR              - hw error
* @retval GT_NOT_INITIALIZED       - smi ctrl register callback not registered
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="smiInterface" type="CPSS_PHY_SMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="smiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssSmiRegisterWrite" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSmiRegisterWrite function
* @endinternal
*
* @brief   The function writes register of a Marvell device, which connected to SMI master
*         controller of packet processor
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] smiInterface             - SMI master interface Id
* @param[in] smiAddr                  - address of configurated device on SMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] data                     -  to write
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PARAM             - bad devNum, smiInterface
* @retval GT_NOT_READY             - smi is busy
* @retval GT_HW_ERROR              - hw error
*
* @note Function specific for Marvell devices with 32-bit registers
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="smiInterface" type="CPSS_PHY_SMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="smiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssSmiRegisterWriteShort" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSmiRegisterWriteShort function
* @endinternal
*
* @brief   The function writes register of a device, which connected to SMI master
*         controller of packet processor
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - device number
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] smiInterface             - SMI master interface Id
* @param[in] smiAddr                  - address of configurated device on SMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] data                     -  to write
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PARAM             - bad devNum, smiInterface
* @retval GT_NOT_READY             - smi is busy
* @retval GT_HW_ERROR              - hw error
* @retval GT_NOT_INITIALIZED       - smi ctrl register callback not registered
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="smiInterface" type="CPSS_PHY_SMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="smiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssSystemDualDeviceIdModeEnableGet" srcpath="common/h/cpss/common/init/cpssInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSystemDualDeviceIdModeEnableGet function
* @endinternal
*
* @brief   This function retrieve if 'This system support dual device Id'.
*         This means that application MUST not use 'odd' hwDevNum to any device in the system.
*         Allowed to use only : 0,2,4..30 (also for ch1,2,3,xcat1,2,Lion in this system)
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
*
* @param[out] enablePtr                - (pointer to)indication that the system is in 'dual deviceId' mode.
*                                      GT_TRUE - This system support dual device Id
*                                      GT_FALSE - This system NOT support dual device Id
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_PTR               - on NULL pointer
*/]]>   </Comment>
   <Params>
    <Param class="bool" dir="OUT" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssSystemDualDeviceIdModeEnableSet" srcpath="common/h/cpss/common/init/cpssInit.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSystemDualDeviceIdModeEnableSet function
* @endinternal
*
* @brief   This function declare 'This system support dual device Id'.
*         The function MUST be called for any system with Lion2 ('Dual device Id' device).
*         This means that application MUST not use 'odd' hwDevNum to any device in the system.
*         Allowed to use only : 0,2,4..30 (also for ch1,2,3,xcat1,2,Lion in this system)
*         For such system this function must be called before any call to a PP functions ,
*         i.e before calling cpssDxChHwPpPhase1Init(...).
*         The function MUST be called only after cpssPpInit(...)
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] enable                   - indication that the system is in 'dual deviceId' mode.
*                                      GT_TRUE - This system support dual device Id
*                                      GT_FALSE - This system NOT support dual device Id
*
* @retval GT_OK                    - on success,
* @retval GT_BAD_STATE             - the function called before call to cpssPpInit(...).
*/]]>   </Comment>
   <Params>
    <Param class="bool" dir="IN" name="enable" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssSystemRecoveryStateGet" srcpath="common/h/cpss/common/systemRecovery/cpssGenSystemRecovery.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSystemRecoveryStateGet function
* @endinternal
*
* @brief   This function retrieve system recovery information
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  None
*
*
* @param[out] systemRecoveryInfoPtr    - pointer to system recovery
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on bad systemRecoveryState.
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="OUT" name="systemRecoveryInfo" type="CPSS_SYSTEM_RECOVERY_INFO_STC"/>
   </Params>
  </Function>
  <Function name="cpssSystemRecoveryStateSet" srcpath="common/h/cpss/common/systemRecovery/cpssGenSystemRecovery.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssSystemRecoveryStateSet function
* @endinternal
*
* @brief   This function inform cpss about system recovery state
*
* @note   APPLICABLE DEVICES:      xCat3; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon.
* @note   NOT APPLICABLE DEVICES:  None
*
* @param[in] systemRecoveryInfoPtr    - pointer to system recovery information
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PTR               - on NULL pointer.
* @retval GT_BAD_PARAM             - on bad systemRecoveryState.
*/]]>   </Comment>
   <Params>
    <Param class="struct" dir="IN" name="systemRecoveryInfo" type="CPSS_SYSTEM_RECOVERY_INFO_STC"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmChannelNodeConfig" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmChannelNodeConfig function
* @endinternal
*
* @brief   TM2TM Node Channel Configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] egressElements           - Number of Elements in Egress TMs.
* @param[in] srcLevel                 - TM2TM Source Level (Port/C/B/A).
* @param[in] bpLevel                  - BP Destination Level (C/Q).
* @param[in] bpOffset                 - BP Base Offset.
* @param[in] bpXon                    - BP Xon Thresholds.
* @param[in] bpXoff                   - BP Xoff Thresholds.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="egressElements" type="GT_U32"/>
    <Param class="enum" dir="IN" name="srcLevel" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="bpLevel" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="bpOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="bpXon" type="GT_U32"/>
    <Param class="int" dir="IN" name="bpXoff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmChannelPortConfig" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmChannelPortConfig function
* @endinternal
*
* @brief   TM2TM Port Channel Configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] egressElements           - Number of Elements in Egress TMs.
* @param[in] srcLevel                 - TM2TM Source Level (Port/C/B/A).
* @param[in] bpLevel                  - BP Destination Level (C/Q).
* @param[in] bpOffset                 - BP Base Offset.
* @param[in] bpXon                    - BP Xon Thresholds.
* @param[in] bpXoff                   - BP Xoff Thresholds.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="egressElements" type="GT_U32"/>
    <Param class="enum" dir="IN" name="srcLevel" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="bpLevel" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="bpOffset" type="GT_U32"/>
    <Param class="int" dir="IN" name="bpXon" type="GT_U32"/>
    <Param class="int" dir="IN" name="bpXoff" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmDpQueryResponceLevelSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmDpQueryResponceLevelSet function
* @endinternal
*
* @brief   Drop Query Response Select.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] dpType                   - 0 - local only, 1 - remote only, 2 - both local & remote.
* @param[in] portDp                   - 0 - Global, 1 - CoS.
* @param[in] localLevel               - Local response level (Q/A/B/C/Port).
* @param[in] remoteLevel              - Remote response level (Node/Port).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="dpType" type="GT_U32"/>
    <Param class="int" dir="IN" name="portDp" type="GT_U32"/>
    <Param class="enum" dir="IN" name="localLevel" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="remoteLevel" type="CPSS_TM2TM_CHANNEL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmEgressDropAqmModeSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmEgressDropAqmModeSet function
* @endinternal
*
* @brief   TM2TM Egress Drop AQM Mode Configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level (Q/A/B/C/Port).
* @param[in] colorNum                 - Number of colors for this level.
* @param[in] dpSourcePtr              - Array of DP sources for each color.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="colorNum" type="CPSS_TM_COLOR_NUM_ENT"/>
    <Param class="enum" dir="IN" name="dpSource" type="CPSS_TM_DP_SOURCE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmEnable" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmEnable function
* @endinternal
*
* @brief   TM2TM Enable.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmGlobalConfig" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmGlobalConfig function
* @endinternal
*
* @brief   TM2TM Global Configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] cosSelector              - C level CoS DP selector (APPLICABLE RANGES: 0..7).
* @param[in] extHeadersPtr            - External Headers structure pointer.
* @param[in] ctrlPacketStrPtr         - Control Packet structure pointer.
* @param[in] rangePtr                 - Delta Range Mapping to Priority structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="cosSelector" type="GT_U32"/>
    <Param class="struct" dir="IN" name="extHeaders" type="CPSS_TM2TM_EXTERNAL_HDR_STC"/>
    <Param class="struct" dir="IN" name="ctrlPacketStr" type="CPSS_TM2TM_CNTRL_PKT_STRUCT_STC"/>
    <Param class="struct" dir="IN" name="range" type="CPSS_TM2TM_DELTA_RANGE_STC"/>
   </Params>
  </Function>
  <Function name="cpssTm2TmIngressDropAqmModeSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTm2Tm.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTm2TmIngressDropAqmModeSet function
* @endinternal
*
* @brief   TM2TM Ingress Drop AQM Mode Configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] channel                  - Channel (Node/Port).
* @param[in] colorNum                 - Number of colors for this channel.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or color number.
* @retval GT_NOT_INITIALIZED       - on not configured channel at system setup.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="channel" type="CPSS_TM2TM_CHANNEL_ENT"/>
    <Param class="enum" dir="IN" name="colorNum" type="CPSS_TM_COLOR_NUM_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTmAgingChangeStatus" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAgingChangeStatus function
* @endinternal
*
* @brief   Change the aging status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] status                   - Aging status.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="status" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAgingStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAgingStatusGet function
* @endinternal
*
* @brief   Retrieve the aging status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] statusPtr                - (pointer to) Aging status.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL statusPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="status" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeConfigurationRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesRead.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeConfigurationRead function
* @endinternal
*
* @brief   Read A-node software configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] paramsPtr                - (pointer to) A-Node parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="params" type="CPSS_TM_A_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeStatusRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeStatusRead function
* @endinternal
*
* @brief   Read A-Node status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] statusPtr                - (pointer to) Node status structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="status" type="CPSS_TM_NODE_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeToBnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeToBnodeCreate function
* @endinternal
*
* @brief   Create path from A-node to B-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] bNodeInd                 - B-Node index.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
*
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on bNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="bNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeToBnodeWithQueuePoolCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeToBnodeWithQueuePoolCreate function
* @endinternal
*
* @brief   Create path from A-node to B-node & allocates user defined queue children pool
*         Not applicable for symmetric port tree creation
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] bNodeInd                 - B-Node parent index.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
* @param[in] firstQueueInRange        - index of first queue in required queue range
* @param[in] queueRangeSize           - queue range size
*
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on resource allocation fail.
* @retval GT_BAD_STATE             - on bNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="bNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="int" dir="IN" name="firstQueueInRange" type="GT_U32"/>
    <Param class="int" dir="IN" name="queueRangeSize" type="GT_U32"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeToCnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeToCnodeCreate function
* @endinternal
*
* @brief   Create path from A-node to C-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] cNodeInd                 - C-Node index.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
*
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on cNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="cNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeToPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeToPortCreate function
* @endinternal
*
* @brief   Create path from A-node to Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
* @param[in] cParamsPtr               - C-Node parameters structure pointer.
*
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
* @param[out] cNodeIndPtr              - (pointer to) The created C-Node index (APPLICABLE RANGES: 0..511).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on portInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="cParams" type="CPSS_TM_C_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmAnodeUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAnodeUpdate function
* @endinternal
*
* @brief   Update A-node parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
* @param[in] paramsPtr                - Node parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. When error occurs, the entry is considered inconsistent.
*       2. 'numOfChildren' can't be updated.
*       3. 'dropProfileInd' parameter will be updated in any case,
*       set it's value to be the same as in DB if you don't want to change it.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_A_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmAsymPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmAsymPortCreate function
* @endinternal
*
* @brief   Create Port with assymetric sub-tree and download its parameters to HW.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] paramsPtr                - Port parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_ALREADY_EXIST         - on portInd already in use.
* @retval GT_BAD_SIZE              - on too large port's min/max token.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed for port, set
*       cirBw to CPSS_TM_INVAL_CNS, in this case other shaping
*       parameters will not be considered.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_PORT_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmBapUnitErrorStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBapUnitErrorStatusGet function
* @endinternal
*
* @brief   Get TM BAP Unit Global Error Status
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] bapNum                   - BAP interface number. (APPLICABLE RANGES: 0..CPSS_TM_CTL_MAX_NUM_OF_BAPS_CNS).
*
* @param[out] errorStatusInfoPtr       pointer to CPSS_TM_BAP_UNIT_ERROR_STATUS_STC.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
* @retval GT_NO_RESOURCE           - on not exist BAP interface.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="bapNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="errorStatusInfo" type="CPSS_TM_BAP_UNIT_ERROR_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmBnodeConfigurationRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesRead.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBnodeConfigurationRead function
* @endinternal
*
* @brief   Read B-node software configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] paramsPtr                - (pointer to) B-Node parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="params" type="CPSS_TM_B_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmBnodeStatusRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBnodeStatusRead function
* @endinternal
*
* @brief   Read B-Node status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] statusPtr                - (pointer to) Node status structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="status" type="CPSS_TM_NODE_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmBnodeToCnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBnodeToCnodeCreate function
* @endinternal
*
* @brief   Create path from B-node to C-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] cNodeInd                 - C-Node index.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
*
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on cNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="cNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmBnodeToPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBnodeToPortCreate function
* @endinternal
*
* @brief   Create path from B-node to Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
* @param[in] cParamsPtr               - C-Node parameters structure pointer.
*
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
* @param[out] cNodeIndPtr              - (pointer to) The created C-Node index (APPLICABLE RANGES: 0..511).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on portInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="cParams" type="CPSS_TM_C_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmBnodeUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmBnodeUpdate function
* @endinternal
*
* @brief   Update B-node parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
* @param[in] paramsPtr                - Node parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. When error occurs, the entry is considered inconsistent.
*       2. 'numOfChildren' can't be updated.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_B_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmClose" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmClose function
* @endinternal
*
* @brief   Close the TM configuration library.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssTmCnodeConfigurationRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesRead.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCnodeConfigurationRead function
* @endinternal
*
* @brief   Read C-node software configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] paramsPtr                - (pointer to) C-Node parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="params" type="CPSS_TM_C_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmCnodeStatusRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCnodeStatusRead function
* @endinternal
*
* @brief   Read C-Node status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] statusPtr                - (pointer to) Node status structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="status" type="CPSS_TM_NODE_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmCnodeToPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCnodeToPortCreate function
* @endinternal
*
* @brief   Create path from C-node to Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] cParamsPtr               - C-Node parameters structure pointer.
*
* @param[out] cNodeIndPtr              - (pointer to) The created C-Node index (APPLICABLE RANGES: 0..511).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on portInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="cParams" type="CPSS_TM_C_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="cNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmCnodeUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCnodeUpdate function
* @endinternal
*
* @brief   Update C-node parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
* @param[in] paramsPtr                - Node parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. When error occurs, the entry is considered inconsistent.
*       2. 'numOfChildren' can't be updated.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_C_NODE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmCtlLadParamsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCtlLadParamsGet function
* @endinternal
*
* @brief   Get TM LAD parameters from its DB.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; Lion2; xCat2; Aldrin; AC3X.
*
* @param[in] devNum                   - physical device number.
* @param[in] numOfLads                - number of LADs.
* @param[in] ladParamsPtr             - (pointer of) CPSS_TM_CTL_LAD_INF_PARAM_STC.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or configuration parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="numOfLads" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="ladParams" type="CPSS_TM_CTL_LAD_INF_PARAM_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmCtlLadParamsSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmCtlLadParamsSet function
* @endinternal
*
* @brief   Set TM LAD parameters to its DB when neccessary to overwrite
*         its default configuration, parameters are used from DB
*         at cpssTmCtlLadInit.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; Lion2; xCat2; Aldrin; AC3X.
*
* @param[in] devNum                   - physical device number.
* @param[in] numOfLads                - number of LADs.
* @param[in] ladParamsPtr             - (pointer of) CPSS_TM_CTL_LAD_INF_PARAM_STC.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong device or configuration parameters
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="numOfLads" type="GT_U8"/>
    <Param class="struct" dir="IN" name="ladParams" type="CPSS_TM_CTL_LAD_INF_PARAM_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmDpSourceGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDpSourceGet function
* @endinternal
*
* @brief   Change Drop Probability (DP) source.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  to set dp source for (APPLICABLE RANGES: CPSS_TM_LEVEL_Q_E..CPSS_TM_LEVEL_P_E).
* @param[in] color                    - A  to set dp source for (APPLICABLE RANGES: 0..2).
*
* @param[out] sourcePtr                - (pointer to)Dp source.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL sourcePtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="color" type="CPSS_DP_LEVEL_ENT"/>
    <Param class="enum" dir="OUT" name="source" type="CPSS_TM_DP_SOURCE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTmDpSourceSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDpSourceSet function
* @endinternal
*
* @brief   Change Drop Probability (DP) source.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  to set dp source for (APPLICABLE RANGES: CPSS_TM_LEVEL_Q_E..CPSS_TM_LEVEL_P_E).
* @param[in] color                    - A  to set dp source for (APPLICABLE RANGES: 0..2).
* @param[in] source                   - Dp  (APPLICABLE RANGES: CPSS_TM_DP_SOURCE_AQL_E..CPSS_TM_DP_SOURCE_QL_E).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="color" type="CPSS_DP_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="source" type="CPSS_TM_DP_SOURCE_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTmDropColorNumResolutionGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropColorNumResolutionGet function
* @endinternal
*
* @brief   Retrieves Drop (Egress) Colors number and curve resolution birs count per level.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  to set colors number for (Port/C/B/A/Q).
*                                      colorNumPtr  - (pointer to) variable  where color number will be assigned.
*                                      resolutionPtr   - (pointer to) variable  where  curve resolution  will be assigned.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL colorNumPtr or resolutionPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="OUT" name="colorNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="resolution" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssTmDropColorNumSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropColorNumSet function
* @endinternal
*
* @brief   Set Drop (Egress) Colors number per level.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  to set colors number for (Port/C/B/A/Q).
* @param[in] number                   - Colors amount.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. This API should be called before all the rest Drop APIs (if need).
*       2. By default there are two colors per each level.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="enum" dir="IN" name="number" type="CPSS_TM_COLOR_NUM_ENT"/>
   </Params>
  </Function>
  <ExtFunction name="cpssTmDropProfileAgingBlockCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileAgingBlockCreate function
* @endinternal
*
* @brief   Create Aging drop profile for CPSS_TM_LEVEL_Q_E.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] profileStcArr[CPSS_TM_AGING_PROFILES_CNS] - array of 4 Aging Profile configuration structure pointer.
*
* @param[out] profileIndexPtr          - (pointer to) The first created Aging profile index (APPLICABLE RANGES: 0..2044).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileIndexPtr.
* @retval GT_FULL                  - on full allocation of level's Drop profile table.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. In case of Color Blind TD disabled set cbTdThresholdBytes=CPSS_TM_MAX_DROP_THRESHOLD_CNS
*       2. Cos of Drop Profile matches Cos of given curve.
*       3. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       4. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else profile will be created for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct[]" dir="IN" name="profileStcArr" type="CPSS_TM_DROP_PROFILE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="profileIndex" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssTmDropProfileAgingBlockDelete" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileAgingBlockDelete function
* @endinternal
*
* @brief   Delete Aging profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] profileIndex             - The index of the first Aging profile (APPLICABLE RANGES: 0..2044).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmDropProfileAgingUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileAgingUpdate function
* @endinternal
*
* @brief   Update Aging Drop profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] profileIndex             - The first created Aging profile index (APPLICABLE RANGES: 0..2044).
* @param[in] profileOffset            - The drop profile index to be update (APPLICABLE RANGES: 0..CPSS_TM_AGING_BLOCK_SIZE).
* @param[in] profileParamsPtr         - (pointer to)Drop Profile configurations structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileParamsPtr.
* @retval GT_FULL                  - on full allocation of level's Drop profile table.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="profileOffset" type="GT_U32"/>
    <Param class="struct" dir="IN" name="profileParams" type="CPSS_TM_DROP_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmDropProfileCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileCreate function
* @endinternal
*
* @brief   Create Drop profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the Drop profile is created for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of Drop profile (APPLICABLE RANGES: 0..7).
* @param[in] profileStcPtr            - (pointer to) Drop Profile configuration structure.
*
* @param[out] profileIndexPtr          - (pointer to) The created Drop profile index
*                                      (APPLICABLE RANGES: 0..2047  for Queues,
*                                      0..255   for Anodes,
*                                      0..63    for Bnodes,Cnodes,
*                                      0..number of ports for Ports).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileIndPtr or profileStcPtr.
* @retval GT_FULL                  - on full allocation of level's Drop profile table.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. In case of Color Blind TD disabled set cbTdThresholdBytes=CPSS_TM_MAX_DROP_THRESHOLD_CNS
*       2. Cos of Drop Profile matches Cos of given curve.
*       3. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       4. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else profile will be created for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="struct" dir="IN" name="profileStc" type="CPSS_TM_DROP_PROFILE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="profileIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmDropProfileDelete" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileDelete function
* @endinternal
*
* @brief   Delete Drop profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the Drop profile is deleted for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of Drop profile (APPLICABLE RANGES: 0..7).
* @param[in] profile                  - An index of the Drop profile.
*                                      (APPLICABLE RANGES: 0..2047  for Queues,
*                                      0..255   for Anodes,
*                                      0..63    for Bnodes,Cnodes,
*                                      0..number of ports for Ports).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       2. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else profile will be deleted for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int" dir="IN" name="profile" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmDropProfileRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileRead function
* @endinternal
*
* @brief   Read Drop profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the Drop profile is read for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of Drop profile (APPLICABLE RANGES: 0..7).
* @param[in] profileInd               - An index of the Drop profile.
*                                      (APPLICABLE RANGES: 0..2047  for Queues,
*                                      0..255   for Anodes,
*                                      0..63    for Bnodes,Cnodes,
*                                      0..number of ports for Ports).
*
* @param[out] profileStcPtr            - (pointer to) Drop profile configuration structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileStcPtr.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. The cbTdThresholdRatio is calculated aproximately from the register's values.
*       2. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       3. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else profile will be read for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int" dir="IN" name="profileInd" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="profileStc" type="CPSS_TM_DROP_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmDropProfileUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropProfileUpdate function
* @endinternal
*
* @brief   Update Drop profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the Drop profile is created for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of Drop profile (APPLICABLE RANGES: 0..7).
* @param[in] profileIndex             - Drop profile index to update
*                                      (APPLICABLE RANGES: 0..2047  for Queues,
*                                      0..255   for Anodes,
*                                      0..63    for Bnodes,Cnodes,
*                                      0..number of ports for Ports).
* @param[in] profileStcPtr            - (pointer to) Drop Profile configuration structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileStcPtr.
* @retval GT_FULL                  - on full allocation of level's Drop profile table.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. In case of Color Blind TD disabled set cbTdThresholdBytes=CPSS_TM_MAX_DROP_THRESHOLD_CNS
*       2. Cos of Drop Profile matches Cos of given curve.
*       3. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       4. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else profile will be created for CoS mode.
*       5. For Q/A/B/C levels the user is aware to pause traffic during update process
*       6. For P level update is possible only if profile is not in use.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int" dir="IN" name="profileIndex" type="GT_U32"/>
    <Param class="struct" dir="IN" name="profileStc" type="CPSS_TM_DROP_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmDropQueryResponceGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropQueryResponceGet function
* @endinternal
*
* @brief   Retrieve Drop Query Response state.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] portDpPtr                - (pointer to) PortDp.
* @param[out] levelPtr                 - (pointer to) Local response level.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL portDpPtr or levelPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="OUT" name="portDp" type="GT_U32"/>
    <Param class="enum" dir="OUT" name="level" type="CPSS_TM_LEVEL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTmDropQueryResponceSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropQueryResponceSet function
* @endinternal
*
* @brief   Drop Query Response Select.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portDp                   - 0 - Global, 1 - CoS.
* @param[in] level                    - Local response  (APPLICABLE RANGES: CPSS_TM_LEVEL_Q_E..CPSS_TM_LEVEL_P_E).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portDp" type="GT_U32"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
   </Params>
  </Function>
  <Function name="cpssTmDropQueueCosGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropQueueCosGet function
* @endinternal
*
* @brief   Retrieve Drop Queue Cos.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue  (APPLICABLE RANGES: 0..16383).
*
* @param[out] cosPtr                   - (pointer to)CoS.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cos" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmDropQueueCosSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropQueueCosSet function
* @endinternal
*
* @brief   Drop Queue Cos Select.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue  (APPLICABLE RANGES: 0..16383).
* @param[in] cos                      - Cos (APPLICABLE RANGES: 0..7).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmDropQueueLengthGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropQueueLengthGet function
* @endinternal
*
* @brief   Read Queue drop length.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Node  (Port/C/B/A/Queue).
* @param[in] index                    - Node index.
*
* @param[out] instantQueueLengthPtr    - (pointer to) Current Queue length structure.
* @param[out] averageQueueLengthPtr    - (pointer to) Average Queue length structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="OUT" name="instantQueueLength" type="GT_U32"/>
    <Param class="int" dir="OUT" name="averageQueueLength" type="GT_U32"/>
   </Params>
  </Function>
  <ExtFunction name="cpssTmDropWredCurveCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropWredCurveCreate function
* @endinternal
*
* @brief   Create a WRED curve for a TM level.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the WRED curve is created for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of RED Curve (APPLICABLE RANGES: 0..7).
* @param[in] probabilityArr[CPSS_TM_DROP_PROB_ARR_SIZE_CNS] - Array of 32 probability points in % (APPLICABLE RANGES: 0..100).
*
* @param[out] curveIndexPtr            - (pointer to) The created WRED curve index (APPLICABLE RANGES: 0..7).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL curveIndPtr.
* @retval GT_FULL                  - on full allocation of WRED Curves table.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       2. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else curve will be created for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int[]" dir="IN" name="probabilityArr" type="GT_U32"/>
    <Param class="int" dir="OUT" name="curveIndex" type="GT_U32"/>
   </Params>
  </ExtFunction>
  <Function name="cpssTmDropWredTraditionalCurveCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmDropWredTraditionalCurveCreate function
* @endinternal
*
* @brief   Create a WRED traditional curve for a level.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - A nodes  the WRED curve is created for (Port/C/B/A/Q).
* @param[in] cos                      - CoS of RED Curve (APPLICABLE RANGES: 0..7).
* @param[in] maxProbability           - Max probability in percents (APPLICABLE RANGES: 1..100).
*
* @param[out] curveIndexPtr            - (pointer to) The created WRED curve index (APPLICABLE RANGES: 0..7).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_FULL                  - on full allocation of WRED Curves table.
* @retval GT_BAD_PTR               - on NULL curveIndPtr.
* @retval GT_NOT_INITIALIZED       - on not configured AQM Mode params for this lvl.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. The CoS parameter is relevant for C and P level only, else set CPSS_TM_INVAL_CNS.
*       2. For P level in Global mode set 'cos' = CPSS_TM_INVAL_CNS, else curve will be created for CoS mode.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int" dir="IN" name="maxProbability" type="GT_U32"/>
    <Param class="int" dir="OUT" name="curveIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmGetNodeLogicalName" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmLogicalLayer.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmGetNodeLogicalName function
* @endinternal
*
* @brief   Returns logical name of node with given index
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - node  ( Port / C- / B- /A- /Queue
* @param[in] nodeIndex                - physical index of the node in it's layer
*
* @param[out] nodeNamePtr              - (pointer to) The name of node with given index (if call successful)
*                                      NULL if call failed;
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NO_RESOURCE           - name not found.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="nodeIndex" type="GT_U32"/>
    <Param class="UNKNOWN" dir="OUT" name="nodeName" type="GT_8_PTR"/>
   </Params>
  </Function>
  <Function name="cpssTmInit" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmInit function
* @endinternal
*
* @brief   Initialize the TM configuration library.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_NO_RESOURCE           - on out of memory space.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssTmInitExt" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmInitExt function
* @endinternal
*
* @brief   Customize Initialize of the TM configuration library.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] tmLibInitParams          - TM LIB initialize parameters.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_NO_RESOURCE           - on out of memory space.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="IN" name="tmLibInitParams" type="CPSS_TM_LIB_INIT_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmNodeDropProfileIndexRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmDrop.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodeDropProfileIndexRead function
* @endinternal
*
* @brief   As a result of aging process the queue drop profile index can be changed dynamically
*         internally by TM. This function allows to monitor these changes.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Scheduling level: Queue/A/B/C-node/Port.-node/Port.
* @param[in] cos                      -   of drop profile (APPLICABLE RANGES: 0..7 for port/C-level, otherwise ignored ).
* @param[in] nodeIndex                - The index of queue to read its drop profile.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL profileIndexPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note The CoS parameter is relevant for C and P level (Global mode) only, else set CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="cos" type="GT_U32"/>
    <Param class="int" dir="IN" name="nodeIndex" type="GT_U32"/>
    <Param class="int" dir="OUT" name="profileIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodeQuantumLimitsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodeQuantumLimitsGet function
* @endinternal
*
* @brief   get maximum and minimum possible quantum values and quantum value granularity for nodes.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] quantumLimitsPtr         - (pointer to) quantum limits structure.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Since set/update node parameters APIs are note in bytes resolution but Quantums units,
*       applicable values are minQuantum/resolution, maxQuantum/resolution.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="quantumLimits" type="CPSS_TM_QUANTUM_LIMITS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlCleanList" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlCleanList function
* @endinternal
*
* @brief   Empty list of reshuffling changes.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlNodeDelete" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlNodeDelete function
* @endinternal
*
* @brief   Delete node from scheduling hierarchy.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Scheduling level: Queue/A/B/C-node/Port.-node/Port.
* @param[in] index                    - Queue/node index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_STATE             - on not free node's subtree.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlQueueInstall" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlQueueInstall function
* @endinternal
*
* @brief   Install queue by a given index.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] queueInd                 - Queue index (APPLICABLE RANGES: 0..16383).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Makes a queue capable of getting traffic.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="queueInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlQueueInstallStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlQueueInstallStatusGet function
* @endinternal
*
* @brief   Retrieves install status if the queue by a given index.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] queueInd                 - Queue index (APPLICABLE RANGES: 0..16383).
*
* @param[out] statusPtr                - (Pointer to) queue install status.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL statusPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="queueInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="status" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlQueueUninstall" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlQueueUninstall function
* @endinternal
*
* @brief   Uninstall queue by a given index.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] queueInd                 - Queue index (APPLICABLE RANGES: 0..16383).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note - Makes a queue incapable of getting traffic. Queue must be not in use!
*       - User should flush Q before this call.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="queueInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesCtlTransPortDelete" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesCtlTransPortDelete function
* @endinternal
*
* @brief   Delete port and all its subtree from scheduling hierarchy.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmNodesSwitch" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesReorder.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmNodesSwitch function
* @endinternal
*
* @brief   Switch children between two nodes.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Node level.
* @param[in] nodeAIndex               - Node A index in switch.
* @param[in] nodeBIndex               - Node B index in switch.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="nodeAIndex" type="GT_U32"/>
    <Param class="int" dir="IN" name="nodeBIndex" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortConfigurationRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesRead.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortConfigurationRead function
* @endinternal
*
* @brief   Read port software configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
*
* @param[out] paramsPtr                - (pointer to) Port parameters structure.
* @param[out] cosParamsPtr             - (pointer to) Port Drop per Cos structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="params" type="CPSS_TM_PORT_PARAMS_STC"/>
    <Param class="struct" dir="OUT" name="cosParams" type="CPSS_TM_PORT_DROP_PER_COS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortCreate function
* @endinternal
*
* @brief   Create Port and download its parameters to HW.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] paramsPtr                - Port parameters structure pointer.
* @param[in] cNodesNum                - Number of C-nodes under port.
* @param[in] bNodesNum                - Number of B-nodes under port.
* @param[in] aNodesNum                - Number of A-nodes under port.
* @param[in] queuesNum                - Number of Queues under port.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_ALREADY_EXIST         - on portInd already in use.
* @retval GT_BAD_SIZE              - on too large port's min/max token.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. To indicate that no shaping is needed for port, set
*       cirBw to CPSS_TM_INVAL_CNS, in this case other shaping
*       parameters will not be considered.
*       2. Valid number of nodes per level must be multiple of number nodes
*       on upper level (parent nodes) in case of equal distribution. And
*       in case of unequal distribution all parent nodes except the last
*       one must have the same children range and the last parent node -
*       number of children less that the range. In case of not valid
*       number will be returned GT_BAD_PARAM error code.
*       3. If port will be used for transparent queues, set the c/b/aNodesNum = 1.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_PORT_PARAMS_STC"/>
    <Param class="int" dir="IN" name="cNodesNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="bNodesNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="aNodesNum" type="GT_U32"/>
    <Param class="int" dir="IN" name="queuesNum" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortDropCosUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortDropCosUpdate function
* @endinternal
*
* @brief   Update Port Drop per Cos parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
* @param[in] paramsPtr                - Port Drop per Cos parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note When error occurs, the entry is considered inconsistent.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_PORT_DROP_PER_COS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmPortDropPerCosConfig" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortDropPerCosConfig function
* @endinternal
*
* @brief   Configure Port's Drop per Cos and download its parameters to HW.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] paramsPtr                - Port Drop per Cos parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_ALREADY_EXIST         - on portInd already in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_PORT_DROP_PER_COS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmPortDropUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortDropUpdate function
* @endinternal
*
* @brief   Update Port Drop parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
* @param[in] wredProfileRef           - Port Drop Profile reference.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note When error occurs, the entry is considered inconsistent.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="IN" name="wredProfileRef" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortFlush" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortFlush function
* @endinternal
*
* @brief   Flush port by a given index. All packets dequeued from this port (and all its queues)
*         are dropped. Wait till flush port has completed.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Flush port blocking API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortFlushTriggerActionStart" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortFlushTriggerActionStart function
* @endinternal
*
* @brief   Flush port by a given index. All packets dequeued from this port (and all its queues)
*         are dropped.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Flush port non blocking API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortFlushTriggerActionStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortFlushTriggerActionStatusGet function
* @endinternal
*
* @brief   Get whether Flush port has completed.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
*
* @param[out] actFinishedPtr           - GT_FALSE - flush is active (packets are dropped on dequeue).
*                                      - GT_TRUE  - flush off /completed.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_BAD_PTR               - on NULL actFinishedPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="actFinished" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssTmPortQuantumLimitsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortQuantumLimitsGet function
* @endinternal
*
* @brief   get maximum and minimum possible quantum values and quantum value granularity for port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Since set/update port parameters APIs are note in bytes resolution but Quantums units,
*       applicable values are minQuantum/resolution, maxQuantum/resolution.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="quantumLimits" type="CPSS_TM_QUANTUM_LIMITS_STC"/>
   </Params>
  </Function>
  <ExtFunction name="cpssTmPortSchedulingUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortSchedulingUpdate function
* @endinternal
*
* @brief   Update Port Scheduling parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
* @param[in] eligPrioFuncId           - Eligible Priority Function pointer.
* @param[in] quantumArrPtr[8]         - Port quantum 8 cell array.
* @param[in] schdModeArr[8]           - Port RR/DWRR priority pointer for C-level.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note When error occurs, the entry is considered inconsistent.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="enum" dir="IN" name="eligPrioFuncId" type="CPSS_TM_ELIG_FUNC_NODE_ENT"/>
    <Param class="int[8]" dir="IN" name="quantumArrPtr" type="GT_U32"/>
    <Param class="enum[8]" dir="IN" name="schdModeArr" type="CPSS_TM_SCHD_MODE_ENT"/>
   </Params>
  </ExtFunction>
  <Function name="cpssTmPortShapingUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortShapingUpdate function
* @endinternal
*
* @brief   Update Port Shaping parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Port index.
* @param[in] cirBw                    - Port CIR bandwidth.
* @param[in] eirBw                    - Port EIR bandwidth.
* @param[in] cbs                      - Port CIR burst size.
* @param[in] ebs                      - Port EIR burst size.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_BAD_SIZE              - on Port's min/max token too large.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note When error occurs, the entry is considered inconsistent.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="int" dir="IN" name="cirBw" type="GT_U32"/>
    <Param class="int" dir="IN" name="eirBw" type="GT_U32"/>
    <Param class="int" dir="IN" name="cbs" type="GT_U32"/>
    <Param class="int" dir="IN" name="ebs" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortShapingValidate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortShapingValidate function
* @endinternal
*
* @brief   Validate Port Shaping parameters.and returns updated bursts values if possible
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] cirBw                    - Port CIR bandwidth.
* @param[in] eirBw                    - Port EIR bandwidth.
*                                      INPUT/OUTPUT
* @param[in,out] cbsPtr                   - (pointer to)Port CIR burst size.
* @param[in,out] ebsPtr                   - (pointer to)Port EIR burst size.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
* @retval GT_OUT_OF_RANGE          - on too large min/max token or thy are to different to cofigure them together
* @retval GT_BAD_SIZE              - on cps/ebs value is too small for required bandwidth
*                                       in this case cbs/ebs values are updated to minimum possible value.
*
* @note none
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="cirBw" type="GT_U32"/>
    <Param class="int" dir="IN" name="eirBw" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="cbs" type="GT_U32"/>
    <Param class="int" dir="INOUT" name="ebs" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmPortStatusRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmPortStatusRead function
* @endinternal
*
* @brief   Read Port status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] statusPtr                - (pointer to) Node status structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="status" type="CPSS_TM_PORT_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmQmrPktStatisticsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmStatistics.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQmrPktStatisticsGet function
* @endinternal
*
* @brief   Read QMR Packet Statistics.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] pktCntPtr                - (pointer to) QMR Pkt Statistics structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="pktCnt" type="CPSS_TM_QMR_PKT_STATISTICS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueConfigurationRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesRead.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueConfigurationRead function
* @endinternal
*
* @brief   Read queue software configuration.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue index.
*
* @param[out] paramsPtr                - (pointer to) Queue parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="params" type="CPSS_TM_QUEUE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueFlush" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueFlush function
* @endinternal
*
* @brief   Flush queue by a given index. All packets dequeued from this queue are dropped.
*         Wait till flush queue has completed.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Flush queue blocking API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueFlushTriggerActionStart" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueFlushTriggerActionStart function
* @endinternal
*
* @brief   Activate Flush queue by a given index.
*         All packets dequeued from this queue are dropped.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Flush queue non blocking API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueFlushTriggerActionStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueFlushTriggerActionStatusGet function
* @endinternal
*
* @brief   Get whether Flush queue has completed.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue index.
*
* @param[out] actFinishedPtr           - GT_FALSE - flush is active (packets are dropped on dequeue).
*                                      - GT_TRUE  - flush off /completed.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or index value or if index not in use.
* @retval GT_BAD_PTR               - on NULL actFinishedPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="bool" dir="OUT" name="actFinished" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueStatusRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesStatus.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueStatusRead function
* @endinternal
*
* @brief   Read Queue status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Node index.
*
* @param[out] statusPtr                - (pointer to) Node status structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="status" type="CPSS_TM_NODE_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueToAnodeByIndexCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueToAnodeByIndexCreate function
* @endinternal
*
* @brief   Create path from selected Queue to A-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] aNodeInd                 - A-Node parent index.
* @param[in] qParamsPtr               - pointer to Queue parameters structure.
* @param[in] queueInd                 - Index of Queue to init (APPLICABLE RANGES: 0..65535).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on aNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1.To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*       2. The selected queue must previously allocated to A-node parent
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="aNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="int" dir="IN" name="queueInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueToAnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueToAnodeCreate function
* @endinternal
*
* @brief   Create path from Queue to A-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] aNodeInd                 - A-Node index.
* @param[in] qParamsPtr               - Queue parameters structure pointer.
*
* @param[out] queueIndPtr              - (pointer to) The created Queue index (APPLICABLE RANGES: 0..65535).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on aNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="aNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="queueInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueToBnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueToBnodeCreate function
* @endinternal
*
* @brief   Create path from Queue to B-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] bNodeInd                 - B-Node index.
* @param[in] qParamsPtr               - Queue parameters structure pointer.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
*
* @param[out] queueIndPtr              - (pointer to) The created Queue index (APPLICABLE RANGES: 0..65535).
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on bNodeInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="bNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="queueInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueToCnodeCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueToCnodeCreate function
* @endinternal
*
* @brief   Create path from Queue to C-node.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] cNodeInd                 - C-Node index.
* @param[in] qParamsPtr               - Queue parameters structure pointer.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
*
* @param[out] queueIndPtr              - (pointer to) The created Queue index (APPLICABLE RANGES: 0..65535).
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on cNodeIndex not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="cNodeInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="queueInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueToPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueToPortCreate function
* @endinternal
*
* @brief   Create path from Queue to Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] qParamsPtr               - Queue parameters structure pointer.
* @param[in] aParamsPtr               - A-Node parameters structure pointer.
* @param[in] bParamsPtr               - B-Node parameters structure pointer.
* @param[in] cParamsPtr               - C-Node parameters structure pointer.
*
* @param[out] queueIndPtr              - (pointer to) The created Queue index (APPLICABLE RANGES: 0..65535).
* @param[out] aNodeIndPtr              - (pointer to) The created A-Node index (APPLICABLE RANGES: 0..16383).
* @param[out] bNodeIndPtr              - (pointer to) The created B-Node index (APPLICABLE RANGES: 0..4095).
* @param[out] cNodeIndPtr              - (pointer to) The created C-Node index (APPLICABLE RANGES: 0..511).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on portInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note To indicate that no shaping is needed to the queue/node, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="aParams" type="CPSS_TM_A_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="bParams" type="CPSS_TM_B_NODE_PARAMS_STC"/>
    <Param class="struct" dir="IN" name="cParams" type="CPSS_TM_C_NODE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="queueInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="aNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="bNodeInd" type="GT_U32"/>
    <Param class="int" dir="OUT" name="cNodeInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmQueueUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesUpdate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmQueueUpdate function
* @endinternal
*
* @brief   Update queue parameters.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] index                    - Queue index.
* @param[in] paramsPtr                - Queue parameters structure pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. When error occurs, the entry is considered inconsistent.
*       2. 'dropProfileInd' parameter will be updated in any case,
*       set it's value to be the same as in DB if you don't want to change it.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="index" type="GT_U32"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_QUEUE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmRcbPktStatisticsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmStatistics.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmRcbPktStatisticsGet function
* @endinternal
*
* @brief   Read RCB Packet Statistics.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] pktCntPtr                - (pointer to) RCB Pkt Statistics structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="pktCnt" type="CPSS_TM_RCB_PKT_STATISTICS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmSchedPeriodicSchemeConfig" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmSchedPeriodicSchemeConfig function
* @endinternal
*
* @brief   Configure Periodic Scheme.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] paramsPtr                - (pointer to) scheduling parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_VALUE             - on not found parameter or parameter's value can't be obtained.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. The API may be invoked once in a system lifetime.
*       2. To indicate the shaping is disabled for a level the
*       periodicState field must be set to GT_FALSE.
*       3 paramsPtr is handled as 5 elements array including also a
*       port level scheduling configuration.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="IN" name="params" type="CPSS_TM_LEVEL_PERIODIC_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmSchedPortExternalBpSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmSchedPortExternalBpSet function
* @endinternal
*
* @brief   Enable/Disable Port External Backpressure.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portExtBp                - Enable/Disable port external BP.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*                                       COMMENTS:
*
* @note COMMENTS:
*       to enable Backpressure response from TM Ports to physical ports,
*       egressEnable at cpssDxChTmGlueFlowControlEnableSet must also be enabled.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="bool" dir="IN" name="portExtBp" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssTmSchedPortLvlDwrrBytesPerBurstLimitSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmSchedPortLvlDwrrBytesPerBurstLimitSet function
* @endinternal
*
* @brief   Set the number of DWRR bytes per burst limit for all ports.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] bytes                    - Number of  per burst limit.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="bytes" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingPeriodicUpdateEnableSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingPeriodicUpdateEnableSet function
* @endinternal
*
* @brief   Enable/Disable periodic update for a given level: Q, A, B, C or Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level to enable/disable shaping for.
* @param[in] status                   - Enable/Disable shaping.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note If periodic update will be disabled for some level, traffic through nodes with shaping-enabled eligible functions will be stopped !
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="bool" dir="IN" name="status" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingPeriodicUpdateStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmSched.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingPeriodicUpdateStatusGet function
* @endinternal
*
* @brief   Read periodc update status for all TM levels.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] statusPtr                - (pointer to) scheduling parameters structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="IN" name="status" type="CPSS_TM_LEVEL_PERIODIC_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingProfileCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingProfileCreate function
* @endinternal
*
* @brief   Create a Shaping Profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level to configure the profile for.
* @param[in] profileStrPtr            - Shaping profile configuration struct pointer.
*
* @param[out] profileIndPtr            - (pointer to) The created Shaping profile index.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_FULL                  - on full allocation of Shaping profile table.
* @retval GT_NOT_INITIALIZED       - on not configured periodic update rate for the given level
* @retval GT_BAD_SIZE              - on too large min/max token.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="struct" dir="IN" name="profileStr" type="CPSS_TM_SHAPING_PROFILE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="profileInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingProfileDelete" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingProfileDelete function
* @endinternal
*
* @brief   Delete a Shaping Profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] profileInd               - An index of the Shaping profile.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="profileInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingProfileRead" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingProfileRead function
* @endinternal
*
* @brief   Read Shaping profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level to read the profile for.
* @param[in] profileInd               - An index of the Shaping profile.
*
* @param[out] profileStrPtr            - (pointer to) Shaping profile configuration structure.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note The cirBw and eirBw may deviate from the originally configured
*       by cpssTmShapingProfileCreate or cpssTmShapingProfileUpdate by the
*       bw accuracy parameter provisioned in cpssTmSchedPeriodicSchemeConfig API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="profileInd" type="GT_U32"/>
    <Param class="struct" dir="OUT" name="profileStr" type="CPSS_TM_SHAPING_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingProfileUpdate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingProfileUpdate function
* @endinternal
*
* @brief   Update a Shaping Profile.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level to update the profile for.
* @param[in] profileInd               - An index of the Shaping profile.
* @param[in] profileStrPtr            - Shaping profile configuration struct pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_INITIALIZED       - on not configured periodic update rate for the given level
* @retval GT_BAD_SIZE              - on too large min/max token.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="int" dir="IN" name="profileInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="profileStr" type="CPSS_TM_SHAPING_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmShapingProfileValidate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmShaping.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmShapingProfileValidate function
* @endinternal
*
* @brief   Validates if shaping profile can be configured and returns updated bursts values if possible
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] level                    - Level to configure the profile for.
*                                      profileStrPtr   - Shaping profile configuration struct pointer.
*
* @retval GT_OK                    - on success.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_INITIALIZED       - on not configured periodic update rate for the given level
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
* @retval GT_OUT_OF_RANGE          - on too large min/max token or thy are to different to cofigure them together
* @retval GT_BAD_SIZE              - on cps/ebs value is too small for required bandwidth
*                                       in this case  cbs/ebs values are updated to minimum possible value.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="level" type="CPSS_TM_LEVEL_ENT"/>
    <Param class="struct" dir="IN" name="profileStc" type="CPSS_TM_SHAPING_PROFILE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmToCpssErrCodesInit" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmServices.h" type="GT_VOID">
   <Comment>
<![CDATA[/**
* @internal cpssTmToCpssErrCodesInit function
* @endinternal
*
* @brief   The function initializes the error codes transformation arrays.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
*                                       None.
*/]]>   </Comment>
   <Params/>
  </Function>
  <Function name="cpssTmTransQueueToPortCreate" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesCreate.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTransQueueToPortCreate function
* @endinternal
*
* @brief   Create transparent path from Queue to Port.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] portInd                  - Port index.
* @param[in] qParamsPtr               - Queue parameters structure pointer.
*
* @param[out] queueIndPtr              - (pointer to) The created Queue index (APPLICABLE RANGES: 0..65535).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_OUT_OF_RANGE          - on parameter value out of range.
* @retval GT_NO_RESOURCE           - on memory allocation fail.
* @retval GT_BAD_STATE             - on portInd not in use.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note 1. This API introduces 'transparent' concept to TM nodes
*       structure that deals with Queues and Ports only. In this case no
*       configuration is needed for A,B,C level nodes, this nodes
*       are created automatically (one C-node, one B-node and one
*       A-node) and they are 'transparent' from the system point of
*       view. Transparent path can be created under symmetric port
*       only. To delete Queue from the structure - use
*       'cpssTmNodesCtlNodeDelete' API with level CPSS_TM_LEVEL_Q_E. To update queue
*       parameters - use 'cpssTmQueueUpdate' API. To delete Port from
*       the structure use 'cpssTmNodesCtlTransPortDelete' API. Applying any
*       other APIs on nodes underlying the port can cause unexpected
*       behavior of the system.
*       2. To indicate that no shaping is needed to the queue, set
*       shapingProfilePtr to CPSS_TM_INVAL_CNS.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portInd" type="GT_U32"/>
    <Param class="struct" dir="IN" name="qParams" type="CPSS_TM_QUEUE_PARAMS_STC"/>
    <Param class="int" dir="OUT" name="queueInd" type="GT_U32"/>
   </Params>
  </Function>
  <Function name="cpssTmTreeChangeStatus" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesTree.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTreeChangeStatus function
* @endinternal
*
* @brief   Change the tree DeQ status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] status                   - Tree status.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="bool" dir="IN" name="status" type="GT_BOOL"/>
   </Params>
  </Function>
  <ExtFunction name="cpssTmTreeDwrrPrioGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesTree.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTreeDwrrPrioGet function
* @endinternal
*
* @brief   Retrieve tree DWRR priority.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] prios[8]                 - Status per priority array pointer (pointer to GT_BOOL[8]).
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PTR               - on NULL prios.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note prios[i] = GT_FALSE/GT_TRUE, if DWRR for prio [i] is disabled/enabled.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="bool[8]" dir="OUT" name="prios" type="GT_BOOL"/>
   </Params>
  </ExtFunction>
  <ExtFunction name="cpssTmTreeDwrrPrioSet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesTree.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTreeDwrrPrioSet function
* @endinternal
*
* @brief   Change the tree DWRR priority.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
* @param[in] prios[8]                 - Priority array pointer(pointer to GT_BOOL[8])
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*
* @note Set prios[i] = GT_FALSE/GT_TRUE, if DWRR for prio [i] is disabled/enabled.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="bool[8]" dir="IN" name="prios" type="GT_BOOL"/>
   </Params>
  </ExtFunction>
  <Function name="cpssTmTreeParamsGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTreeParamsGet function
* @endinternal
*
* @brief   Get TM Tree Hw properties.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] tmTreeParamsPtr          - pointer to CPSS_TM_TREE_PARAMS_STC.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="tmTreeParams" type="CPSS_TM_TREE_PARAMS_STC"/>
   </Params>
  </Function>
  <Function name="cpssTmTreeStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmNodesTree.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmTreeStatusGet function
* @endinternal
*
* @brief   Retrieve tree DeQ status.
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] statusPtr                -(pointer to)  Tree status.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_BAD_PTR               - on NULL statusPtr.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="bool" dir="OUT" name="status" type="GT_BOOL"/>
   </Params>
  </Function>
  <Function name="cpssTmUnitsErrorStatusGet" srcpath="mainPpDrv/h/cpss/generic/tm/cpssTmCtl.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssTmUnitsErrorStatusGet function
* @endinternal
*
* @brief   Get TM Units Global Error Status
*
* @note   APPLICABLE DEVICES:      Bobcat2; Caelum.
* @note   NOT APPLICABLE DEVICES:  xCat; xCat3; Lion; xCat2; DxCh1; DxCh1_Diamond; DxCh2; DxCh3; Lion2; Bobcat3; Aldrin2; Falcon; Aldrin; AC3X; Puma2; Puma3; ExMx.
*
* @param[in] devNum                   - Device number.
*
* @param[out] errorStatusInfoPtr       pointer to CPSS_TM_UNITS_ERROR_STATUS_STC.
*
* @retval GT_OK                    - on success.
* @retval GT_FAIL                  - on hardware error.
* @retval GT_BAD_PARAM             - on wrong device number or wrong parameter value.
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device.
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="struct" dir="OUT" name="errorStatusInfo" type="CPSS_TM_UNITS_ERROR_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssVctCableExtendedStatusGet" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhyVct.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssVctCableExtendedStatusGet function
* @endinternal
*
* @brief   This routine returns the extended VCT status per MDI pair/channel pair.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number
* @param[in] port                     - physical  number
*
* @param[out] extendedCableStatusPtr   - extended virtual cable diagnostic status
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_SUPPORTED         - on non supported device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note If PHY is CPSS_VCT_PHY_100M_E (FE) cableStatusPtr will have only 2 pairs
*       relevant. In this case:
*       swap - just pairSwap[0] relevant
*       vctExtendedCableStatus.pairSwap[1] = CPSS_VCT_NOT_APPLICABLE_E
*       vctExtendedCableStatus.pairSwap[2] = CPSS_VCT_NOT_APPLICABLE_E
*       vctExtendedCableStatus.pairSwap[3] = CPSS_VCT_NOT_APPLICABLE_E
*       polarity - just pairPolarity[0] relevant
*       vctExtendedCableStatus.pairPolarity[1] =CPSS_VCT_NOT_APPLICABLE_E
*       vctExtendedCableStatus.pairPolarity[2] =CPSS_VCT_NOT_APPLICABLE_E
*       vctExtendedCableStatus.pairPolarity[3] =CPSS_VCT_NOT_APPLICABLE_E
*       skew - not relevant
*       vctExtendedCableStatus.skew[0,1,2,3].IsValid = GT_FALSE
*       accurateCableLen - not relevant
*       vctExtendedCableStatus.accurateCableLen.isValid = GT_FALSE
*       twoPairDownShift - not relevant
*       extendedCableStatusPtr->twoPairDownShift =
*       CPSS_VCT_NOT_APPLICABLE_DOWNSHIFT_E;
*       The API doesn't perform VCT test, but retrieves extended info regarding
*       the above features, which has collected by: cpssVctCableStatusGet API.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="port" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="OUT" name="extendedCableStatus" type="CPSS_VCT_CABLE_EXTENDED_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssVctCableStatusGet" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhyVct.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssVctCableStatusGet function
* @endinternal
*
* @brief   This routine asserts / aborts the state-machine based virtual cable test
*         (VCT) for the requested port. When test completes, it returns the the
*         status per MDI pair, otherwize it will return current test status.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] dev                      - physical device number
* @param[in] port                     - physical  number
* @param[in] vctAction                - The VCT action to perform on this port.
*
* @param[out] cableStatusPtr           - virtual cable diagnostic status
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_READY             - when action is CPSS_VCT_GET_RES_E and the test is not
*                                       completed yet.
* @retval GT_NOT_SUPPORTED         - on non supported device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note Scenario:
*       1)First call with CPSS_VCT_START_E to begin the test
*       2)Call the function with CPSS_VCT_GET_RES_E and wait till GT_OK as
*       relult.
*       If GT_NOT_READY is returned, call the CPSS_VCT_GET_RES_E again after a
*       while in order to let the test be completed.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="dev" type="GT_U8"/>
    <Param class="int" dir="IN" name="port" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="enum" dir="IN" name="vctAction" type="CPSS_VCT_ACTION_ENT"/>
    <Param class="struct" dir="OUT" name="cableStatus" type="CPSS_VCT_CABLE_STATUS_STC"/>
   </Params>
  </Function>
  <Function name="cpssVctLengthOffsetGet" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhyVct.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssVctLengthOffsetGet function
* @endinternal
*
* @brief   This function gets the offset used in VCT length calcualtions per port.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] dev                      - device number
* @param[in] port                     -  number
*
* @param[out] offsetPtr                - (pointer to)offset in milimeters
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note According to the PHYs' release notes the tuned formula to calculate
*       length in VCT is of the form:
*       A hwDist - B + offset
*       where:
*       A & B - constants published in the PHYs' release notes.
*       hwDist - the distance value from HW registers to the fault.
*       offset - fine tuning required due to different "MDI traces" on
*       different boards.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="dev" type="GT_U8"/>
    <Param class="int" dir="IN" name="port" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="OUT" name="offset" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssVctLengthOffsetSet" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhyVct.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssVctLengthOffsetSet function
* @endinternal
*
* @brief   This function sets the offset used in VCT length calcualtions per port.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] dev                      - device number
* @param[in] port                     -  number
* @param[in] offset                   -  in milimeters.
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - one of the parameters value is wrong
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*
* @note According to the PHYs' release notes the tuned formula to calculate
*       length in VCT is of the form:
*       A hwDist - B + offset
*       where:
*       A & B - constants published in the PHYs' release notes.
*       hwDist - the distance value from HW registers to the fault.
*       offset - fine tuning required due to different "MDI traces" on
*       different boards.
*       This function should be called after cpssDxChHwPpPhase1Init() and
*       before runing the VCT.
*
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="dev" type="GT_U8"/>
    <Param class="int" dir="IN" name="port" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="int" dir="IN" name="offset" type="GT_32"/>
   </Params>
  </Function>
  <Function name="cpssVctSetCableDiagConfig" srcpath="mainPpDrv/h/cpss/generic/phy/cpssGenPhyVct.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssVctSetCableDiagConfig function
* @endinternal
*
* @brief   This routine configures VCT diagnostic parameters per port:
*         - cable's length: greater or less then 10 meters.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] dev                      - device number
* @param[in] port                     -  number
* @param[in] configPtr                - configuration parameters
*
* @retval GT_OK                    - on success
* @retval GT_FAIL                  - on error
* @retval GT_BAD_PARAM             - on wrong length configuration
* @retval GT_BAD_PTR               - on NULL pointer
* @retval GT_NOT_SUPPORTED         - on non supported device
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="dev" type="GT_U8"/>
    <Param class="int" dir="IN" name="port" type="GT_PHYSICAL_PORT_NUM"/>
    <Param class="struct" dir="IN" name="config" type="CPSS_VCT_CONFIG_STC"/>
   </Params>
  </Function>
  <Function name="cpssXsmiPortGroupRegisterRead" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssXsmiPortGroupRegisterRead function
* @endinternal
*
* @brief   Read value of a specified XSMI Register.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number.
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] xsmiInterface            - XSMI instance
* @param[in] xsmiAddr                 - address of configurated device on XSMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] phyDev                   - the PHY device to read from (APPLICABLE RANGES: 0..31).
*
* @param[out] dataPtr                  - (Pointer to) the read data.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_BAD_PTR               - pointer to place data is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - callback not set
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="xsmiInterface" type="CPSS_PHY_XSMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="xsmiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="phyDev" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssXsmiPortGroupRegisterWrite" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssXsmiPortGroupRegisterWrite function
* @endinternal
*
* @brief   Write value to a specified XSMI Register.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number.
* @param[in] portGroupsBmp            - bitmap of Port Groups.
*                                      NOTEs:
*                                      1. for non multi-port groups device this parameter is IGNORED.
*                                      2. for multi-port groups device :
*                                      bitmap must be set with at least one bit representing
*                                      valid port group(s). If a bit of non valid port group
*                                      is set then function returns GT_BAD_PARAM.
*                                      Value CPSS_PORT_GROUP_UNAWARE_MODE_CNS is supported.
* @param[in] xsmiInterface            - XSMI instance
* @param[in] xsmiAddr                 - address of configurated device on XSMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] phyDev                   - the PHY device to write to (APPLICABLE RANGES: 0..31).
* @param[in] data                     -  to write
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - callback not set
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="int" dir="IN" name="portGroupsBmp" type="GT_PORT_GROUPS_BMP"/>
    <Param class="enum" dir="IN" name="xsmiInterface" type="CPSS_PHY_XSMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="xsmiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="phyDev" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssXsmiRegisterRead" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssXsmiRegisterRead function
* @endinternal
*
* @brief   Read value of a specified XSMI Register.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number.
* @param[in] xsmiInterface            - XSMI instance
* @param[in] xsmiAddr                 - address of configurated device on XSMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] phyDev                   - the PHY device to read from (APPLICABLE RANGES: 0..31).
*
* @param[out] dataPtr                  - (Pointer to) the read data.
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_BAD_PTR               - pointer to place data is NULL
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - callback not set
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="xsmiInterface" type="CPSS_PHY_XSMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="xsmiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="phyDev" type="GT_U32"/>
    <Param class="int" dir="OUT" name="data" type="GT_U16"/>
   </Params>
  </Function>
  <Function name="cpssXsmiRegisterWrite" srcpath="common/h/cpss/common/smi/cpssGenSmi.h" type="GT_STATUS">
   <Comment>
<![CDATA[/**
* @internal cpssXsmiRegisterWrite function
* @endinternal
*
* @brief   Write value to a specified XSMI Register.
*
* @note   APPLICABLE DEVICES:      DxCh1; DxCh1_Diamond; DxCh2; DxCh3; xCat; xCat3; Lion; xCat2; Lion2; Bobcat2; Caelum; Aldrin; AC3X; Bobcat3; Aldrin2; Falcon; Puma2; Puma3; ExMx; Pipe.
* @note   NOT APPLICABLE DEVICES:  None.
*
* @param[in] devNum                   - physical device number.
* @param[in] xsmiInterface            - XSMI instance
* @param[in] xsmiAddr                 - address of configurated device on XSMI (APPLICABLE RANGES: 0..31)
* @param[in] regAddr                  - address of register of configurated device
* @param[in] phyDev                   - the PHY device to write to (APPLICABLE RANGES: 0..31).
* @param[in] data                     -  to write
*
* @retval GT_OK                    - on success
* @retval GT_BAD_PARAM             - on wrong parameter.
* @retval GT_HW_ERROR              - on hardware error
* @retval GT_NOT_APPLICABLE_DEVICE - on not applicable device
* @retval GT_NOT_INITIALIZED       - callback not set
*/]]>   </Comment>
   <Params>
    <Param class="int" dir="IN" name="devNum" type="GT_U8"/>
    <Param class="enum" dir="IN" name="xsmiInterface" type="CPSS_PHY_XSMI_INTERFACE_ENT"/>
    <Param class="int" dir="IN" name="xsmiAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="regAddr" type="GT_U32"/>
    <Param class="int" dir="IN" name="phyDev" type="GT_U32"/>
    <Param class="int" dir="IN" name="data" type="GT_U16"/>
   </Params>
  </Function>
 </Functions>
 <Structures count="142">
  <Structure name="CPSS_AUQ_CFG_STC" special="unused"/>
  <Structure name="CPSS_DIAG_DATA_INTEGRITY_MEMORY_LOCATION_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_DIAG_DATA_INTEGRITY_MEMORY_LOCATION_STC
 *
 * @brief Memory location indexes
*/]]>   </Comment>
   <Member class="int" name="dfxPipeId" type="GT_U32"/>
   <Member class="int" name="dfxClientId" type="GT_U32"/>
   <Member class="int" name="dfxMemoryId" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_DIAG_DATA_INTEGRITY_MPPM_MEMORY_LOCATION_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_DIAG_DATA_INTEGRITY_MPPM_MEMORY_LOCATION_STC
 *
 * @brief MPPM Memory location indexes
*/]]>   </Comment>
   <Member class="int" name="portGroupId" type="GT_U32"/>
   <Member class="int" name="mppmId" type="GT_U32"/>
   <Member class="int" name="bankId" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_DRV_HW_ACCESS_OBJ_STC" special="unused"/>
  <Structure name="CPSS_DXCH_CFG_HW_ACCESS_OBJ_STC" special="unused"/>
  <Structure name="CPSS_DXCH_NETIF_MII_INIT_STC" special="unused"/>
  <Structure name="CPSS_DXCH_NET_TX_PARAMS_STC" special="unused"/>
  <Structure name="CPSS_DXCH_PP_PHASE1_INIT_INFO_STC" special="unused"/>
  <Structure name="CPSS_DXCH_PP_PHASE2_INIT_INFO_STC" special="unused"/>
  <Structure name="CPSS_DX_EMBEDDED_COMMAND_TEST_RESULT_STC">
   <Comment>
<![CDATA[/**
* @struct  CPSS_EMBEDDED_COMMAND_TEST_RESULT_STC
 *
 * @brief Defines embedded commands test result
*/]]>   </Comment>
   <Member class="int" name="portNum" type="GT_PHYSICAL_PORT_NUM"/>
   <Member class="int" name="counter" type="GT_U32"/>
   <Member class="int" name="testStateString" type="char"/>
   <Member class="int" name="rcString" type="char"/>
  </Structure>
  <Structure name="CPSS_EXT_DRV_FUNC_BIND_STC">
   <Comment>
<![CDATA[/* CPSS_EXT_DRV_BIND_STC -
*    structure that hold the "external driver" functions needed be
*    bound to cpss.
*
*    extDrvMgmtCacheBindInfo - set of call back functions -
*                        cache manipulation
*    extDrvHwIfSmiBindInfo - set of call back functions -
*                        SMI interface manipulation
*    extDrvHwIfTwsiBindInfo - set of call back functions -
*                        TWSI interface manipulation
*    extDrvDmaBindInfo - set of call back functions -
*                        DMA manipulation
*    extDrvEthPortBindInfo -set of call back functions -
*                        CPU Ethernet port manipulation
*    extDrvEthPortBindInfo -set of call back functions -
*                        HSU functions
*    extDrvIntBindInfo - set of call back functions -
*                        interrupts manipulation
*    extDrvPciInfo - set of call back functions -
*                        PCI manipulation
*
*/]]>   </Comment>
   <Member class="struct" name="extDrvMgmtCacheBindInfo" type="CPSS_EXT_DRV_MGMT_CACHE_STC"/>
   <Member class="struct" name="extDrvHwIfSmiBindInfo" type="CPSS_EXT_DRV_HW_IF_SMI_STC"/>
   <Member class="struct" name="extDrvHwIfTwsiBindInfo" type="CPSS_EXT_DRV_HW_IF_TWSI_STC"/>
   <Member class="struct" name="extDrvDmaBindInfo" type="CPSS_EXT_DRV_DMA_STC"/>
   <Member class="struct" name="extDrvEthPortBindInfo" type="CPSS_EXT_DRV_ETH_PORT_STC"/>
   <Member class="struct" name="extDrvHsuDrvBindInfo" type="CPSS_EXT_DRV_HSU_DRV_STC"/>
   <Member class="struct" name="extDrvIntBindInfo" type="CPSS_EXT_DRV_INT_STC"/>
   <Member class="struct" name="extDrvPciInfo" type="CPSS_EXT_DRV_PCI_STC"/>
   <Member class="struct" name="extDrvMgmtHwIfBindInfo" type="CPSS_EXT_DRV_MGMT_HW_IF_STC"/>
   <Member class="struct" name="extDrvDragoniteInfo" type="CPSS_EXT_DRV_DRAGONITE_STC"/>
  </Structure>
  <Structure name="CPSS_GEN_CFG_DEV_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_GEN_CFG_DEV_INFO_STC
 *
 * @brief Generic device info structure
*/]]>   </Comment>
   <Member class="int" name="devType" type="CPSS_PP_DEVICE_TYPE"/>
   <Member class="int" name="revision" type="GT_U8"/>
   <Member class="enum" name="devFamily" type="CPSS_PP_FAMILY_TYPE_ENT"/>
   <Member class="enum" name="devSubFamily" type="CPSS_PP_SUB_FAMILY_TYPE_ENT"/>
   <Member class="int" name="maxPortNum" type="GT_U32"/>
   <Member class="int" name="numOfVirtPorts" type="GT_U32"/>
   <Member class="struct" name="existingPorts" type="CPSS_PORTS_BMP_STC"/>
   <Member class="enum" name="hwDevNumMode" type="CPSS_GEN_CFG_HW_DEV_NUM_MODE_ENT"/>
   <Member class="enum" name="cpuPortMode" type="CPSS_NET_CPU_PORT_MODE_ENT"/>
   <Member class="int" name="numOfLedInfPerPortGroup" type="GT_U32"/>
   <Member array="1" class="int" name="supportedSipBmp" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_GEN_DRAGONITE_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_GEN_DRAGONITE_CONFIG_STC
 *
 * @brief Dragonite configuration data structure
*/]]>   </Comment>
   <Member class="bool" name="dcDisconnectEn" type="GT_BOOL"/>
   <Member class="bool" name="externalSyncDis" type="GT_BOOL"/>
   <Member class="bool" name="capDis" type="GT_BOOL"/>
   <Member class="bool" name="disPortsOverride" type="GT_BOOL"/>
   <Member class="bool" name="rprDisable" type="GT_BOOL"/>
   <Member class="bool" name="vmainAtPolicyEn" type="GT_BOOL"/>
   <Member class="bool" name="class0EqAf" type="GT_BOOL"/>
   <Member class="bool" name="class123EqAf" type="GT_BOOL"/>
   <Member class="bool" name="classBypass2ndError" type="GT_BOOL"/>
   <Member class="bool" name="classErrorEq0" type="GT_BOOL"/>
   <Member class="bool" name="classErrorEq4" type="GT_BOOL"/>
   <Member class="bool" name="layer2En" type="GT_BOOL"/>
   <Member class="bool" name="portPrioritySetByPD" type="GT_BOOL"/>
   <Member class="bool" name="privateLableBit" type="GT_BOOL"/>
   <Member class="bool" name="lowPriDiscoForHiPriStartupEn" type="GT_BOOL"/>
   <Member class="int" name="portMethodLimitMode" type="GT_U32"/>
   <Member class="int" name="portMethodCalcMode" type="GT_U32"/>
   <Member class="int" name="guardBandValue" type="GT_U32"/>
   <Member class="bool" name="startupHiPrOverride" type="GT_BOOL"/>
   <Member class="int" name="IcutMaxAt" type="GT_U32"/>
   <Member class="int" name="tempAlarmTh" type="GT_U32"/>
   <Member class="int" name="vmainHighTh" type="GT_U32"/>
   <Member class="int" name="vmainAtLowTh" type="GT_U32"/>
   <Member class="int" name="vmainAfLowTh" type="GT_U32"/>
   <Member class="int" name="commPollingTime" type="GT_U32"/>
   <Member class="int" name="irqGenTime" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_GEN_DRAGONITE_DATA_STC">
   <Comment>
<![CDATA[/*
 * typedef: struct CPSS_GEN_DRAGONITE_DATA_STC
 *
 * Description: Dragonite data structure
 *
 * Fields:
 *   dataType        - type of data that structure holds at the moment;
 *   dragoniteData         - union holding data accordingly to dataType;
 */]]>   </Comment>
   <Member class="enum" name="dataType" type="CPSS_GEN_DRAGONITE_DATA_TYPE_ENT"/>
   <Member class="struct" name="dragoniteData.system" type="CPSS_GEN_DRAGONITE_SYSTEM_STC"/>
   <Member class="struct" name="dragoniteData.portCntrs" type="CPSS_GEN_DRAGONITE_PORT_COUNTERS_STC"/>
   <Member class="struct" name="dragoniteData.config" type="CPSS_GEN_DRAGONITE_CONFIG_STC"/>
   <Member class="int" name="dragoniteData.debugDataPtr" type="GT_U32"/>
   <Member class="int" name="dragoniteData.otherDataPtr" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_GEN_DRAGONITE_PORT_COUNTERS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_GEN_DRAGONITE_PORT_COUNTERS_STC
 *
 * @brief Dragonite ports counters data structure
*/]]>   </Comment>
  </Structure>
  <Structure name="CPSS_GEN_DRAGONITE_SYSTEM_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_GEN_DRAGONITE_SYSTEM_STC
 *
 * @brief Dragonite system data structure
*/]]>   </Comment>
   <Member class="int" name="systemMask0" type="GT_U32"/>
   <Member class="int" name="activeBudget" type="GT_U32"/>
   <Member class="int" name="vmain" type="GT_U32"/>
   <Member class="bool" name="vmainHigh" type="GT_BOOL"/>
   <Member class="bool" name="vmainLowAT" type="GT_BOOL"/>
   <Member class="bool" name="vmainLowAF" type="GT_BOOL"/>
   <Member class="bool" name="tempAlarm" type="GT_BOOL"/>
   <Member class="bool" name="overTemp" type="GT_BOOL"/>
   <Member class="bool" name="disablePortsActive" type="GT_BOOL"/>
   <Member class="int" name="osStatus" type="GT_U32"/>
   <Member class="int" name="sysTotalCriticalCons" type="GT_U32"/>
   <Member class="int" name="sysTotalHighCons" type="GT_U32"/>
   <Member class="int" name="sysTotalLowCons" type="GT_U32"/>
   <Member class="int" name="sysTotalCriticalReq" type="GT_U32"/>
   <Member class="int" name="sysTotalHighReq" type="GT_U32"/>
   <Member class="int" name="sysTotalLowReq" type="GT_U32"/>
   <Member class="int" name="sysTotalCalcPowerCons" type="GT_U32"/>
   <Member class="int" name="sysTotalPowerRequest" type="GT_U32"/>
   <Member class="int" name="sysTotalDeltaPower" type="GT_U32"/>
   <Member class="int" name="sysTotalRealPowerCons" type="GT_U32"/>
   <Member class="int" name="minorVersion" type="GT_U32"/>
   <Member class="int" name="majorVersion" type="GT_U32"/>
   <Member class="int" name="checkSumErrorCounter" type="GT_U32"/>
   <Member class="int" name="lengthErrorCounter" type="GT_U32"/>
   <Member class="int" name="structVersionErrorCounter" type="GT_U32"/>
   <Member class="int" name="typeErrorCounter" type="GT_U32"/>
   <Member class="int" name="configErrorCounter" type="GT_U32"/>
   <Member class="int" name="irqErrorCounter" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_LED_GROUP_CONF_STC">
   <Comment>
<![CDATA[/*
 * typedef: struct CPSS_LED_GROUP_CONF_STC
 *
 * Description:
 *      LED group classes used for the combinational logic.
 *      The combinational logic = (Class A AND Class B) OR (Class C AND Class D).
 *
 * Fields:
 *      classA  - Selects which class is used as A in the group combinational logic.
 *      classB  - Selects which class is used as B in the group combinational logic.
 *      classC  - Selects which class is used as C in the group combinational logic.
 *      classD  - Selects which class is used as D in the group combinational logic.
 */]]>   </Comment>
   <Member class="int" name="classA" type="GT_U32"/>
   <Member class="int" name="classB" type="GT_U32"/>
   <Member class="int" name="classC" type="GT_U32"/>
   <Member class="int" name="classD" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_NET_IF_CFG_STC" special="unused"/>
  <Structure name="CPSS_NET_SDMA_RX_ERROR_COUNTERS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_NET_SDMA_RX_ERROR_COUNTERS_STC
 *
 * @brief information about Rx Error counters -- per device
*/]]>   </Comment>
   <Member array="128" class="int" name="counterArray" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_OS_FUNC_BIND_STC">
   <Comment>
<![CDATA[/* CPSS_OS_FUNC_BIND_STC -
*    structure that hold the "os" functions needed be bound to cpss.
*
*       osMemBindInfo -  set of call back functions -
*                        CPU memory manipulation
*       osStrBindInfo - set of call back functions -
*                        strings manipulation
*       osSemBindInfo - set of call back functions -
*                           semaphore manipulation
*       osIoBindInfo - set of call back functions -
*                           I/O manipulation
*       osInetBindInfo - set of call back functions -
*                           inet manipulation
*       osTimeBindInfo - set of call back functions -
*                           time manipulation
*       osIntBindInfo - set of call back functions -
*                           interrupts manipulation
*       osRandBindInfo - set of call back functions -
*                           random numbers manipulation
*       osTaskBindInfo - set of call back functions -
*                           tasks manipulation
*       osStdLibBindInfo - set of call back functions -
*                           stdlib functions (qsort, bsearch, etc)
*       osMsgQBindInfo - set of call back functions -
*                            message queues
*       osLogBindInfo - set of call back functions - log manipulation
*/]]>   </Comment>
   <Member class="struct" name="osMemBindInfo" type="CPSS_OS_MEM_BIND_STC"/>
   <Member class="struct" name="osStrBindInfo" type="CPSS_OS_STR_BIND_STC"/>
   <Member class="struct" name="osSemBindInfo" type="CPSS_OS_SEM_BIND_STC"/>
   <Member class="struct" name="osIoBindInfo" type="CPSS_OS_IO_BIND_STC"/>
   <Member class="struct" name="osInetBindInfo" type="CPSS_OS_INET_BIND_STC"/>
   <Member class="struct" name="osTimeBindInfo" type="CPSS_OS_TIME_BIND_STC"/>
   <Member class="struct" name="osIntBindInfo" type="CPSS_OS_INT_BIND_STC"/>
   <Member class="struct" name="osRandBindInfo" type="CPSS_OS_RAND_BIND_STC"/>
   <Member class="struct" name="osTaskBindInfo" type="CPSS_OS_TASK_BIND_STC"/>
   <Member class="struct" name="osStdLibBindInfo" type="CPSS_OS_STDLIB_BIND_STC"/>
   <Member class="struct" name="osMsgQBindInfo" type="CPSS_OS_MSGQ_BIND_STC"/>
   <Member class="struct" name="osLogBindInfo" type="CPSS_OS_LOG_BIND_STC"/>
   <Member class="struct" name="osSocketInfo" type="CPSS_SOCKET_BIND_STC"/>
   <Member class="struct" name="osSocketSelectInfo" type="CPSS_SOCKET_SELECT_BIND_STC"/>
  </Structure>
  <Structure name="CPSS_PM_AP_LANE_OVERRIDE_PARAM_STC">
   <Member class="int" name="validOverrideBitMask" type="GT_U32"/>
   <Member class="int" name="txAmpOffset" type="GT_8"/>
   <Member class="int" name="txEmph0Offset" type="GT_8"/>
   <Member class="int" name="txEmph1Offset" type="GT_8"/>
   <Member class="int" name="squelch" type="GT_U16"/>
   <Member class="int" name="lowFrequency" type="GT_U8"/>
   <Member class="int" name="highFrequency" type="GT_U8"/>
   <Member class="int" name="dcGain" type="GT_U8"/>
   <Member class="int" name="bandWidth" type="GT_U8"/>
   <Member class="int" name="loopBandwidth" type="GT_U8"/>
   <Member class="int" name="etlMinDelay" type="GT_U8"/>
   <Member class="int" name="etlMaxDelay" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_PM_AP_PORT_ADV_STC">
   <Comment>
<![CDATA[/* AP Port Params */]]>   </Comment>
   <Member class="enum" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   <Member class="enum" name="fecSupported" type="CPSS_PORT_FEC_MODE_ENT"/>
   <Member class="enum" name="fecRequested" type="CPSS_PORT_FEC_MODE_ENT"/>
  </Structure>
  <Structure name="CPSS_PM_AP_PORT_PARAMS_STC">
   <Comment>
<![CDATA[/**
  CPSS_PM_PORT_PARAMS_STC - the structure to be used by application to tell PortManager,
  all configurable properties of a port.
  The two APIs that has this structure as a parameter (and to be used by application) are -
  1) GT_STATUS cpss[DxCh | Px]PortManagerPortParamsSet
     (
        IN  GT_U8                                  devNum,
        IN  GT_PHYSICAL_PORT_NUM                   portNum,
        IN  CPSS_PM_PORT_PARAMS_STC               *portParamsStcPtr
      );
  2) GT_STATUS cpss[DxCh | Px]PortManagerPortParamsGet
     (
       IN  GT_U8                                  devNum,
       IN  GT_PHYSICAL_PORT_NUM                   portNum,
       INOUT  CPSS_PM_PORT_PARAMS_STC            *portParamsStcPtr
     );
  NOTE:  The structure is monolithic. i.e. no pointers inside. So you can either malloc/ define a variable
         and no further allocations are needed. All members are accessible.
         Before passing a pointer of the struct to ..ParamsSet, the user has to pass it to
         GT_STATUS cpss[DxCh | Px]PortManagerPortParamsStructInit
         (
            INOUT  CPSS_PM_PORT_PARAMS_STC *portParamsStcPtr,
            IN  CPSS_PORT_MANAGER_PORT_TYPE_ENT portType
         );
         to make sure it's initialised properly. Else, the call to ...ParamsSet will fail.
         The user should populate the structure with the desired values, !!ONLY!! after the above call.
  Structure of the structure!
  ===========================
  Typical/ Eg. usage:
  Please refer:
  GT_STATUS cpss[DxCh | Px]SamplePortManagerMandatoryParamsSet
  (
    IN  GT_U8                           devNum,
    IN  GT_PHYSICAL_PORT_NUM            portNum,
    IN  CPSS_PORT_INTERFACE_MODE_ENT    ifMode,
    IN  CPSS_PORT_SPEED_ENT             speed,
    IN  CPSS_PORT_FEC_MODE_ENT          fecMode
  );
  > Regular Port Params
  ----------------------
  typedef struct {
    CPSS_PORT_INTERFACE_MODE_ENT            ifMode;
    CPSS_PORT_SPEED_ENT                     speed;
    CPSS_PM_MODE_LANE_PARAM_STC             laneParams[CPSS_PM_MAX_LANES];
    CPSS_PM_PORT_ATTR_STC                   portAttributes;
  } CPSS_PM_PORT_REG_PARAMS_STC;
  A regular port's params are of three kinds -
  1) mandatory
     a) ifMode
     b) speed
  2) non-mandatory
     a) port properties
        portAttributes
     b) SerDes lane properties
        Array with individual entry for each lane - laneParams[CPSS_PM_MAX_LANES]
        Per port, the max possible number of lanes is CPSS_PM_MAX_LANES.
        All 8 may not be used for all ifMode/speed combinations.
  > Autoneg (AP) Port Params
  ---------------------------
  typedef struct {
     GT_U32                                numOfModes;
     CPSS_PM_AP_PORT_ADV_STC               modesArr[CPSS_PM_AP_MAX_MODES];
     CPSS_PM_AP_PORT_ATTR_STC              apAttrs;
   } CPSS_PM_AP_PORT_PARAMS_STC;
  The AP Port params are
  1) The different (ifMode + speed) modes that the port supports and has to advertise.
     We can advertise a maximum of CPSS_PM_AP_MAX_MODES modes.
     The i-th advertised mode's params are accessible via - modesArr[i].
     The actual number of advertised modes is stored in "numOfModes".
  2) The properties which are independent of the advertised mode.
     Accessible via apAttrs
*/]]>   </Comment>
   <Member class="int" name="numOfModes" type="GT_U32"/>
   <Member array="10" class="struct" name="modesArr" type="CPSS_PM_AP_PORT_ADV_STC"/>
   <Member class="struct" name="apAttrs" type="CPSS_PM_AP_PORT_ATTR_STC"/>
  </Structure>
  <Structure name="CPSS_PM_ET_OVERRIDE_CFG_STC">
   <Member class="int" name="minLF" type="GT_U8"/>
   <Member class="int" name="maxLF" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_PM_MODE_LANE_PARAM_STC">
   <Member class="int" name="validLaneParamsBitMask" type="GT_U32"/>
   <Member class="int" name="globalLaneNum" type="GT_U16"/>
   <Member class="struct" name="txParams" type="CPSS_PORT_SERDES_TX_CONFIG_STC"/>
   <Member class="struct" name="rxParams" type="CPSS_PORT_SERDES_RX_CONFIG_STC"/>
  </Structure>
  <Structure name="CPSS_PM_PORT_ATTR_STC">
   <Member class="int" name="validAttrsBitMask" type="GT_U32"/>
   <Member class="enum" name="trainMode" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
   <Member class="bool" name="adaptRxTrainSupp" type="GT_BOOL"/>
   <Member class="bool" name="edgeDetectSupported" type="GT_BOOL"/>
   <Member class="struct" name="loopback" type="CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC"/>
   <Member class="struct" name="etOverride" type="CPSS_PM_ET_OVERRIDE_CFG_STC"/>
   <Member class="enum" name="fecMode" type="CPSS_PORT_FEC_MODE_ENT"/>
   <Member class="struct" name="calibrationMode" type="CPSS_PORT_MANAGER_CALIBRATION_MODE_STC"/>
   <Member class="enum" name="unMaskEventsMode" type="CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_ENT"/>
  </Structure>
  <Structure name="CPSS_PM_PORT_PARAMS_STC" special="union">
   <Member class="enum" name="portType" type="CPSS_PORT_MANAGER_PORT_TYPE_ENT"/>
   <Member class="int" name="magic" type="GT_U32"/>
   <Member class="union" name="portParamsType" type="CPSS_PM_PORT_PARAMS_TYPE_UNION"/>
  </Structure>
  <Structure name="CPSS_PM_PORT_PARAMS_TYPE_UNION">
   <Member class="struct" name="regPort" type="CPSS_PM_PORT_REG_PARAMS_STC"/>
   <Member class="struct" name="apPort" type="CPSS_PM_AP_PORT_PARAMS_STC"/>
  </Structure>
  <Structure name="CPSS_PM_PORT_REG_PARAMS_STC">
   <Member class="enum" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   <Member array="8" class="struct" name="laneParams" type="CPSS_PM_MODE_LANE_PARAM_STC"/>
   <Member class="struct" name="portAttributes" type="CPSS_PM_PORT_ATTR_STC"/>
  </Structure>
  <Structure name="CPSS_PORTS_BMP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORTS_BMP_STC
 *
 * @brief Defines the bmp of ports (up to 1024 ports)
*/]]>   </Comment>
   <Member array="32" class="int" name="ports" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PORT_AP_SERDES_RX_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_AP_SERDES_RX_CONFIG_STC
 *
 * @brief Structure for serdes RX parameters
 * to take place during AP port init TRx training
*/]]>   </Comment>
   <Member class="int" name="squelch" type="GT_U16"/>
   <Member class="int" name="lowFrequency" type="GT_U8"/>
   <Member class="int" name="highFrequency" type="GT_U8"/>
   <Member class="int" name="dcGain" type="GT_U8"/>
   <Member class="int" name="bandWidth" type="GT_U8"/>
   <Member class="int" name="loopBandwidth" type="GT_U8"/>
   <Member class="int" name="etlMinDelay" type="GT_U8"/>
   <Member class="int" name="etlMaxDelay" type="GT_U8"/>
   <Member class="bool" name="etlEnable" type="GT_BOOL"/>
   <Member class="int" name="fieldOverrideBmp" type="GT_U16"/>
   <Member class="enum" name="serdesSpeed" type="CPSS_PORT_SERDES_SPEED_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_AP_SERDES_TX_OFFSETS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_AP_SERDES_TX_OFFSETS_STC
 *
 * @brief Structure for serdes TX offset parameters
 * to take place during AP port init after resolution
 * found and prior to running TRx training
*/]]>   </Comment>
   <Member class="int" name="txAmpOffset" type="GT_8"/>
   <Member class="int" name="txEmph0Offset" type="GT_8"/>
   <Member class="int" name="txEmph1Offset" type="GT_8"/>
   <Member class="enum" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_ATTRIBUTES_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_ATTRIBUTES_STC
 *
 * @brief port attributes
*/]]>   </Comment>
   <Member class="bool" name="portLinkUp" type="GT_BOOL"/>
   <Member class="enum" name="portSpeed" type="CPSS_PORT_SPEED_ENT"/>
   <Member class="enum" name="portDuplexity" type="CPSS_PORT_DUPLEX_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_MAC_CG_COUNTER_SET_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MAC_CG_COUNTER_SET_STC
 *
 * @brief A struct represent the CG unit MAC counters.
 * The struct includes fields by the names of MIB counters, each
 * field represents the respective MIB counter.
*/]]>   </Comment>
   <Member class="struct" name="ifOutOctets" type="GT_U64"/>
   <Member class="struct" name="ifOutMulticastPkts" type="GT_U64"/>
   <Member class="struct" name="ifOutErrors" type="GT_U64"/>
   <Member class="struct" name="ifOutUcastPkts" type="GT_U64"/>
   <Member class="struct" name="ifOutBroadcastPkts" type="GT_U64"/>
   <Member class="struct" name="ifInOctets" type="GT_U64"/>
   <Member class="struct" name="ifInErrors" type="GT_U64"/>
   <Member class="struct" name="ifInBroadcastPkts" type="GT_U64"/>
   <Member class="struct" name="ifInMulticastPkts" type="GT_U64"/>
   <Member class="struct" name="ifInUcastPkts" type="GT_U64"/>
   <Member class="struct" name="aFramesTransmittedOK" type="GT_U64"/>
   <Member class="struct" name="aFramesReceivedOK" type="GT_U64"/>
   <Member class="struct" name="aFrameCheckSequenceErrors" type="GT_U64"/>
   <Member class="struct" name="aMACControlFramesTransmitted" type="GT_U64"/>
   <Member class="struct" name="aMACControlFramesReceived" type="GT_U64"/>
   <Member class="struct" name="aPAUSEMACCtrlFramesTransmitted" type="GT_U64"/>
   <Member class="struct" name="aPAUSEMACCtrlFramesReceived" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_0" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_1" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_2" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_3" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_4" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_5" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_6" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesTransmitted_7" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_0" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_1" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_2" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_3" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_4" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_5" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_6" type="GT_U64"/>
   <Member class="struct" name="aCBFCPAUSEFramesReceived_7" type="GT_U64"/>
   <Member class="struct" name="etherStatsOctets" type="GT_U64"/>
   <Member class="struct" name="etherStatsUndersizePkts" type="GT_U64"/>
   <Member class="struct" name="etherStatsOversizePkts" type="GT_U64"/>
   <Member class="struct" name="etherStatsJabbers" type="GT_U64"/>
   <Member class="struct" name="etherStatsDropEvents" type="GT_U64"/>
   <Member class="struct" name="etherStatsFragments" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts64Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts65to127Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts128to255Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts256to511Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts512to1023Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts1024to1518Octets" type="GT_U64"/>
   <Member class="struct" name="etherStatsPkts1519toMaxOctets" type="GT_U64"/>
   <Member class="struct" name="aAlignmentErrors" type="GT_U64"/>
   <Member class="struct" name="aFrameTooLongErrors" type="GT_U64"/>
   <Member class="struct" name="aInRangeLengthErrors" type="GT_U64"/>
   <Member class="struct" name="VLANTransmittedOK" type="GT_U64"/>
   <Member class="struct" name="VLANRecievedOK" type="GT_U64"/>
  </Structure>
  <Structure name="CPSS_PORT_MAC_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MAC_STATUS_STC
 *
 * @brief Structure for configuring Protocol based classification
*/]]>   </Comment>
   <Member class="bool" name="isPortRxPause" type="GT_BOOL"/>
   <Member class="bool" name="isPortTxPause" type="GT_BOOL"/>
   <Member class="bool" name="isPortBackPres" type="GT_BOOL"/>
   <Member class="bool" name="isPortBufFull" type="GT_BOOL"/>
   <Member class="bool" name="isPortSyncFail" type="GT_BOOL"/>
   <Member class="bool" name="isPortHiErrorRate" type="GT_BOOL"/>
   <Member class="bool" name="isPortAnDone" type="GT_BOOL"/>
   <Member class="bool" name="isPortFatalError" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_CALIBRATION_MODE_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MANAGER_CALIBRATION_MODE_STC
 *
 * @brief This structure contains port calibration configuration
*/]]>   </Comment>
   <Member class="enum" name="calibrationType" type="CPSS_PORT_MANAGER_CALIBRATION_TYPE_ENT"/>
   <Member class="struct" name="confidenceCfg" type="CPSS_PORT_MANAGER_CONFIDENCE_DATA_CONFIG_STC"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_CONFIDENCE_DATA_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MANAGER_CONFIDENCE_DATA_CONFIG_STC
 *
 * @brief This structure contains port confidence interval data
 *        configuration
*/]]>   </Comment>
   <Member class="int" name="lfMinThreshold" type="GT_U32"/>
   <Member class="int" name="lfMaxThreshold" type="GT_U32"/>
   <Member class="int" name="hfMinThreshold" type="GT_U32"/>
   <Member class="int" name="hfMaxThreshold" type="GT_U32"/>
   <Member class="int" name="eoMinThreshold" type="GT_U32"/>
   <Member class="int" name="eoMaxThreshold" type="GT_U32"/>
   <Member class="int" name="confidenceEnableBitMap" type="GT_U32"/>
   <Member class="int" name="calibrationTimeOutSec" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_GLOBAL_PARAMS_STC">
   <Member class="int" name="globalParamsBitmapType" type="GT_U32"/>
   <Member class="struct" name="signalDetectDbCfg" type="CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC"/>
   <Member class="bool" name="propHighSpeedPortEnabled" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC" special="union">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MANAGER_LOOPBACK_CONFIG_STC
 *
 * @brief This structure contains port loopback configuration
*/]]>   </Comment>
   <Member class="enum" name="loopbackType" type="CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT"/>
   <Member class="bool" name="loopbackMode.macLoopbackEnable" type="GT_BOOL"/>
   <Member class="enum" name="loopbackMode.pcsLoopbackMode" type="CPSS_PORT_PCS_LOOPBACK_MODE_ENT"/>
   <Member class="enum" name="loopbackMode.serdesLoopbackMode" type="CPSS_PORT_SERDES_LOOPBACK_MODE_ENT"/>
   <Member class="bool" name="enableRegularTrafic" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC">
   <Comment>
<![CDATA[/**
 * @struct CPSS_PORT_MANAGER_SIGNAL_DETECT_CONFIG_STC
 *
 * @brief This structure contains signal detect configuration
*/]]>   </Comment>
   <Member class="int" name="sdChangeInterval" type="GT_U32"/>
   <Member class="int" name="sdChangeMinWindowSize" type="GT_U32"/>
   <Member class="int" name="sdCheckTimeExpired" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MANAGER_STATUS_STC
 *
 * @brief This structure contains the information of the port current status
*/]]>   </Comment>
   <Member class="enum" name="portState" type="CPSS_PORT_MANAGER_STATE_ENT"/>
   <Member class="bool" name="portUnderOperDisable" type="GT_BOOL"/>
   <Member class="enum" name="failure" type="CPSS_PORT_MANAGER_FAILURE_ENT"/>
   <Member class="enum" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   <Member class="enum" name="fecType" type="CPSS_PORT_FEC_MODE_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_MANAGER_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MANAGER_STC
 *
 * @brief This structure contains the port event parameters used to operate the port.
*/]]>   </Comment>
   <Member class="enum" name="portEvent" type="CPSS_PORT_MANAGER_EVENT_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_MODE_SPEED_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_MODE_SPEED_STC
 *
 * @brief pair of port interface mode and speed
 * possible configuration
*/]]>   </Comment>
   <Member class="enum" name="ifMode" type="CPSS_PORT_INTERFACE_MODE_ENT"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
  </Structure>
  <Structure name="CPSS_PORT_SERDES_RX_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_SERDES_RX_CONFIG_STC
 *
 * @brief Port SERDES RX configuration parameters.
*/]]>   </Comment>
   <Member class="int" name="sqlch" type="GT_U32"/>
   <Member class="int" name="ffeRes" type="GT_U32"/>
   <Member class="int" name="ffeCap" type="GT_U32"/>
   <Member class="int" name="align90" type="GT_U32"/>
   <Member class="int" name="dcGain" type="GT_U32"/>
   <Member class="int" name="bandWidth" type="GT_U32"/>
   <Member class="int" name="loopBandwidth" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PORT_SERDES_TUNE_STC">
   <Comment>
<![CDATA[/**
* @struct *CPSS_PORT_SERDES_TUNE_STC_PTR
 *
 * @brief Port SERDES lanes fine tuning values.
*/]]>   </Comment>
   <Member class="int" name="dfe" type="GT_U32"/>
   <Member class="int" name="ffeR" type="GT_U32"/>
   <Member class="int" name="ffeC" type="GT_U32"/>
   <Member class="int" name="sampler" type="GT_U32"/>
   <Member class="int" name="sqlch" type="GT_U32"/>
   <Member class="int" name="txEmphAmp" type="GT_32"/>
   <Member class="int" name="txAmp" type="GT_U32"/>
   <Member class="int" name="txAmpAdj" type="GT_U32"/>
   <Member class="int" name="ffeS" type="GT_U32"/>
   <Member class="bool" name="txEmphEn" type="GT_BOOL"/>
   <Member class="int" name="txEmph1" type="GT_32"/>
   <Member class="int" name="align90" type="GT_U32"/>
   <Member class="bool" name="txEmphEn1" type="GT_BOOL"/>
   <Member class="bool" name="txAmpShft" type="GT_BOOL"/>
   <Member array="6" class="int" name="dfeValsArray" type="GT_32"/>
   <Member class="int" name="DC" type="GT_U32"/>
   <Member class="int" name="LF" type="GT_U32"/>
   <Member class="int" name="HF" type="GT_U32"/>
   <Member class="int" name="BW" type="GT_U32"/>
   <Member class="int" name="LB" type="GT_U32"/>
   <Member class="int" name="EO" type="GT_U32"/>
   <Member array="13" class="int" name="DFE" type="GT_32"/>
  </Structure>
  <Structure name="CPSS_PORT_SERDES_TX_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PORT_SERDES_TX_CONFIG_STC
 *
 * @brief Port SERDES TX configuration parameters.
*/]]>   </Comment>
   <Member class="int" name="txAmp" type="GT_U32"/>
   <Member class="bool" name="txAmpAdjEn" type="GT_BOOL"/>
   <Member class="int" name="emph0" type="GT_32"/>
   <Member class="int" name="emph1" type="GT_32"/>
   <Member class="bool" name="txAmpShft" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_CFG_DEV_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_CFG_DEV_INFO_STC
 *
 * @brief Px device info structure
*/]]>   </Comment>
   <Member class="struct" name="genDevInfo" type="CPSS_GEN_CFG_DEV_INFO_STC"/>
  </Structure>
  <Structure name="CPSS_PX_CNC_COUNTER_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_CNC_COUNTER_STC
 *
 * @brief The counter entry contents.
*/]]>   </Comment>
   <Member class="struct" name="byteCount" type="GT_U64"/>
   <Member class="struct" name="packetCount" type="GT_U64"/>
  </Structure>
  <Structure name="CPSS_PX_COS_ATTRIBUTES_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_COS_ATTRIBUTES_STC
 *
 * @brief structure representing CoS Attributes
*/]]>   </Comment>
   <Member class="int" name="trafficClass" type="GT_U32"/>
   <Member class="enum" name="dropPrecedence" type="CPSS_DP_LEVEL_ENT"/>
   <Member class="int" name="userPriority" type="GT_U32"/>
   <Member class="int" name="dropEligibilityIndication" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_COS_FORMAT_ENTRY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_COS_FORMAT_ENTRY_STC
 *
 * @brief structure representing one entry of CoS Format Table
*/]]>   </Comment>
   <Member class="enum" name="cosMode" type="CPSS_PX_COS_MODE_ENT"/>
   <Member class="int" name="cosByteOffset" type="GT_U32"/>
   <Member class="int" name="cosBitOffset" type="GT_U32"/>
   <Member class="int" name="cosNumOfBits" type="GT_U32"/>
   <Member class="struct" name="cosAttributes" type="CPSS_PX_COS_ATTRIBUTES_STC"/>
  </Structure>
  <Structure name="CPSS_PX_DETAILED_PORT_MAP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DETAILED_PORT_MAP_STC
 *
 * @brief A structure to hold shadow of physical port mapping.
*/]]>   </Comment>
   <Member class="bool" name="valid" type="GT_BOOL"/>
   <Member class="struct" name="portMap" type="CPSS_PX_SHADOW_PORT_MAP_STC"/>
  </Structure>
  <Structure name="CPSS_PX_DEV_PIZZA_ARBITER_STATE_STC" special="union">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DEV_PIZZA_ARBITER_STATE_STC
 *
 * @brief A structure to the state of all Pizza Arbiter units on specific device, the device type included.
*/]]>   </Comment>
   <Member class="enum" name="devType" type="CPSS_PP_FAMILY_TYPE_ENT"/>
   <Member class="struct" name="devState.pipe" type="CPSS_PX_DEV_UNITS_PIZZA_ARBITER_STATE_STC"/>
  </Structure>
  <Structure name="CPSS_PX_DEV_UNITS_PIZZA_ARBITER_STATE_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DEV_UNITS_PIZZA_ARBITER_STATE_STC
 *
 * @brief A structure to the state of all Pizza Arbiter units on specific device
*/]]>   </Comment>
   <Member array="6" class="enum" name="unitList" type="CPSS_PX_PA_UNIT_ENT"/>
   <Member array="5" class="struct" name="unitState" type="CPSS_PX_PIZZA_ARBITER_UNIT_STATE_STC"/>
  </Structure>
  <Structure name="CPSS_PX_DIAG_BIST_RESULT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DIAG_BIST_RESULT_STC
*
* @brief BIST result structure
*/]]>   </Comment>
   <Member class="enum" name="memType" type="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_ENT"/>
   <Member class="struct" name="location" type="CPSS_DIAG_DATA_INTEGRITY_MEMORY_LOCATION_STC"/>
  </Structure>
  <Structure name="CPSS_PX_DIAG_DATA_INTEGRITY_EVENT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DIAG_DATA_INTEGRITY_EVENT_STC
*
* @brief Data Integrity Event structure
*/]]>   </Comment>
   <Member class="enum" name="eventsType" type="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_ENT"/>
   <Member class="struct" name="location" type="CPSS_PX_LOCATION_FULL_INFO_STC"/>
   <Member class="enum" name="memoryUseType" type="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_ENT"/>
   <Member class="enum" name="correctionMethod" type="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_DIAG_PG_CONFIGURATIONS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_DIAG_PG_CONFIGURATIONS_STC
 *
 * @brief Packet generator's configurations for Pipe.
*/]]>   </Comment>
   <Member class="struct" name="macDa" type="GT_ETHERADDR"/>
   <Member class="bool" name="macDaIncrementEnable" type="GT_BOOL"/>
   <Member class="int" name="macDaIncrementLimit" type="GT_U32"/>
   <Member class="struct" name="macSa" type="GT_ETHERADDR"/>
   <Member class="bool" name="vlanTagEnable" type="GT_BOOL"/>
   <Member class="int" name="vpt" type="GT_U8"/>
   <Member class="int" name="cfi" type="GT_U8"/>
   <Member class="int" name="vid" type="GT_U16"/>
   <Member class="int" name="etherType" type="GT_U16"/>
   <Member class="enum" name="payloadType" type="CPSS_DIAG_PG_PACKET_PAYLOAD_TYPE_ENT"/>
   <Member array="64" class="int" name="cyclicPatternArr" type="GT_U8"/>
   <Member class="enum" name="packetLengthType" type="CPSS_DIAG_PG_PACKET_LENGTH_TYPE_ENT"/>
   <Member class="int" name="packetLength" type="GT_U32"/>
   <Member class="bool" name="undersizeEnable" type="GT_BOOL"/>
   <Member class="enum" name="transmitMode" type="CPSS_DIAG_PG_TRANSMIT_MODE_ENT"/>
   <Member class="int" name="packetCount" type="GT_U32"/>
   <Member class="enum" name="packetCountMultiplier" type="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_ENT"/>
   <Member class="int" name="ifg" type="GT_U32"/>
   <Member class="enum" name="interfaceSize" type="CPSS_DIAG_PG_IF_SIZE_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_HW_INDEX_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_HW_INDEX_INFO_STC
*
* @brief A struct to hold hw location information
*/]]>   </Comment>
   <Member class="enum" name="hwTableType" type="CPSS_PX_TABLE_ENT"/>
   <Member class="int" name="hwTableEntryIndex" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_HASH_UDBP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_HASH_UDBP_STC
 *
 * @brief This structure defines User Defined Bytes Pair for hash configuration.
*/]]>   </Comment>
   <Member class="enum" name="anchor" type="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_ENT"/>
   <Member class="int" name="offset" type="GT_U32"/>
   <Member array="4" class="bool" name="nibbleMaskArr" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_IP2ME_ENTRY_STC" special="union">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_IP2ME_ENTRY_STC
 *
 * @brief This structure defines IP2ME configurations
*/]]>   </Comment>
   <Member class="bool" name="valid" type="GT_BOOL"/>
   <Member class="int" name="prefixLength" type="GT_U32"/>
   <Member class="bool" name="isIpv6" type="GT_BOOL"/>
   <Member class="struct" name="ipAddr.ipv4Addr" type="GT_IPADDR"/>
   <Member class="struct" name="ipAddr.ipv6Addr" type="GT_IPV6ADDR"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_PACKET_BIT_FIELD_OFFSET_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_PACKET_BIT_FIELD_OFFSET_STC
 *
 * @brief This structure defines packet bit field offset in source/destination format table.
*/]]>   </Comment>
   <Member class="int" name="byteOffset" type="GT_U32"/>
   <Member class="int" name="startBit" type="GT_U32"/>
   <Member class="int" name="numBits" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_PACKET_TYPE_KEY_FORMAT_STC
 *
 * @brief Packet Type Key Table format
*/]]>   </Comment>
   <Member class="struct" name="macDa" type="GT_ETHERADDR"/>
   <Member class="int" name="etherType" type="GT_U16"/>
   <Member class="bool" name="isLLCNonSnap" type="GT_BOOL"/>
   <Member class="int" name="profileIndex" type="GT_U32"/>
   <Member array="4" class="struct" name="udbPairsArr" type="CPSS_PX_UDB_PAIR_DATA_STC"/>
   <Member class="int" name="ip2meIndex" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_PORT_MAP_PACKET_TYPE_FORMAT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_PORT_MAP_PACKET_TYPE_FORMAT_STC
 *
 * @brief This structure defines packet type format in Source/Destination format table.
*/]]>   </Comment>
   <Member array="4" class="struct" name="bitFieldArr" type="CPSS_PX_INGRESS_PACKET_BIT_FIELD_OFFSET_STC"/>
   <Member class="int" name="indexConst" type="GT_32"/>
   <Member class="int" name="indexMax" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_PORT_PACKET_TYPE_KEY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_PORT_PACKET_TYPE_KEY_STC
 *
 * @brief This structure defines port packet type key.
*/]]>   </Comment>
   <Member class="int" name="srcPortProfile" type="GT_U32"/>
   <Member array="4" class="struct" name="portUdbPairArr" type="CPSS_PX_UDB_PAIR_KEY_STC"/>
  </Structure>
  <Structure name="CPSS_PX_INGRESS_TPID_ENTRY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_INGRESS_TPID_ENTRY_STC
 *
 * @brief This structure defines global TPID configurations
*/]]>   </Comment>
   <Member class="int" name="val" type="GT_U16"/>
   <Member class="int" name="size" type="GT_U32"/>
   <Member class="bool" name="valid" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_LED_CLASS_MANIPULATION_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_LED_CLASS_MANIPULATION_STC
 *
 * @brief LED class manipulation configuration.
*/]]>   </Comment>
   <Member class="bool" name="blinkEnable" type="GT_BOOL"/>
   <Member class="enum" name="blinkSelect" type="CPSS_LED_BLINK_SELECT_ENT"/>
   <Member class="bool" name="forceEnable" type="GT_BOOL"/>
   <Member class="int" name="forceData" type="GT_U32"/>
   <Member class="bool" name="pulseStretchEnable" type="GT_BOOL"/>
   <Member class="bool" name="disableOnLinkDown" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_LED_CONF_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_LED_CONF_STC
 *
 * @brief LED stream configuration parameters.
*/]]>   </Comment>
   <Member class="enum" name="ledOrganize" type="CPSS_LED_ORDER_MODE_ENT"/>
   <Member class="enum" name="blink0DutyCycle" type="CPSS_LED_BLINK_DUTY_CYCLE_ENT"/>
   <Member class="enum" name="blink0Duration" type="CPSS_LED_BLINK_DURATION_ENT"/>
   <Member class="enum" name="blink1DutyCycle" type="CPSS_LED_BLINK_DUTY_CYCLE_ENT"/>
   <Member class="enum" name="blink1Duration" type="CPSS_LED_BLINK_DURATION_ENT"/>
   <Member class="enum" name="pulseStretch" type="CPSS_LED_PULSE_STRETCH_ENT"/>
   <Member class="int" name="ledStart" type="GT_U32"/>
   <Member class="int" name="ledEnd" type="GT_U32"/>
   <Member class="bool" name="invertEnable" type="GT_BOOL"/>
   <Member class="enum" name="ledClockFrequency" type="CPSS_LED_CLOCK_OUT_FREQUENCY_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_LOCATION_FULL_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_LOCATION_FULL_INFO_STC
*
* @brief A struct to hold location information
*/]]>   </Comment>
   <Member class="struct" name="logicalEntryInfo" type="CPSS_PX_LOGICAL_TABLE_INFO_STC"/>
   <Member class="struct" name="hwEntryInfo" type="CPSS_PX_HW_INDEX_INFO_STC"/>
   <Member class="struct" name="ramEntryInfo" type="CPSS_PX_RAM_INDEX_INFO_STC"/>
   <Member class="bool" name="isMppmInfoValid" type="GT_BOOL"/>
   <Member class="struct" name="mppmMemLocation" type="CPSS_DIAG_DATA_INTEGRITY_MPPM_MEMORY_LOCATION_STC"/>
  </Structure>
  <Structure name="CPSS_PX_LOGICAL_TABLE_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_LOGICAL_TABLE_INFO_STC
*
* @brief A struct to hold logical table information
*/]]>   </Comment>
   <Member class="enum" name="logicalTableType" type="CPSS_PX_LOGICAL_TABLE_ENT"/>
   <Member class="int" name="logicalTableEntryIndex" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_NET_SDMA_RX_COUNTERS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_NET_SDMA_RX_COUNTERS_STC
 *
 * @brief information about Rx counters -- per Queue (traffic class)
*/]]>   </Comment>
   <Member class="int" name="rxInPkts" type="GT_U32"/>
   <Member class="int" name="rxInOctets" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_NET_TX_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_NET_TX_PARAMS_STC
 *
 * @brief structure of Tx parameters , that contain information on
 * how to send packet from CPU to PP.
*/]]>   </Comment>
   <Member class="int" name="txQueue" type="GT_U32"/>
   <Member class="bool" name="recalcCrc" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_PIZZA_ARBITER_UNIT_STATE_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PIZZA_ARBITER_UNIT_STATE_STC
 *
 * @brief A structure to the state of Pizza Arbiter unit
*/]]>   </Comment>
   <Member class="int" name="totalConfiguredSlices" type="GT_U32"/>
   <Member class="int" name="totalSlicesOnUnit" type="GT_U32"/>
   <Member class="bool" name="workConservingBit" type="GT_BOOL"/>
   <Member class="bool" name="pizzaMapLoadEnBit" type="GT_BOOL"/>
   <Member array="340" class="bool" name="slice_enable" type="GT_BOOL"/>
   <Member array="340" class="int" name="slice_occupied_by" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_AP_INTROP_STC">
   <Comment>
<![CDATA[/*
* AP introp information:
*    attrBitMask            - Bit mask for attribute configuration:
*                             0x1 - TX Disable,....,0x80 - PD_Max Interval
*    txDisDuration          - Tx Disable duration in msec - default 60msec
*    abilityDuration        - Ability detect duration in msec - default 5 msec
*    abilityMaxInterval     - Ability detect max intervals - default 25 intervals ==> 5msec x 25 intervals = 125msec
*    abilityFailMaxInterval - Ability detect max number of failed intervals where ST_AN_GOOD_CK was detected
*                             But not resolution was found, trigger move to INIT state, instead of TX Disable in normal case
*    apLinkDuration         - AP Link check duration in msec - default 10 msec
*    apLinkMaxInterval      - AP Link check max intervals - default 50 intervals ==> 10msec x 50 intervals = 500msec
*    pdLinkDuration         - PD Link check duration in msec - default 10 msec
*    pdLinkMaxInterval      - PD Link check max intervals - default 25 intervals ==> 10msec x 25 intervals = 250msec
*/]]>   </Comment>
   <Member class="int" name="attrBitMask" type="GT_U16"/>
   <Member class="int" name="txDisDuration" type="GT_U16"/>
   <Member class="int" name="abilityDuration" type="GT_U16"/>
   <Member class="int" name="abilityMaxInterval" type="GT_U16"/>
   <Member class="int" name="abilityFailMaxInterval" type="GT_U16"/>
   <Member class="int" name="apLinkDuration" type="GT_U16"/>
   <Member class="int" name="apLinkMaxInterval" type="GT_U16"/>
   <Member class="int" name="pdLinkDuration" type="GT_U16"/>
   <Member class="int" name="pdLinkMaxInterval" type="GT_U16"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_AP_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_AP_PARAMS_STC
 *
 * @brief Structure for configuring AP special parameters and advertisment
 * options on port
*/]]>   </Comment>
   <Member class="bool" name="fcPause" type="GT_BOOL"/>
   <Member class="enum" name="fcAsmDir" type="CPSS_PX_PORT_AP_FLOW_CONTROL_ENT"/>
   <Member class="bool" name="fecSupported" type="GT_BOOL"/>
   <Member class="bool" name="fecRequired" type="GT_BOOL"/>
   <Member class="bool" name="noneceDisable" type="GT_BOOL"/>
   <Member class="int" name="laneNum" type="GT_U32"/>
   <Member array="10" class="struct" name="modesAdvertiseArr" type="CPSS_PORT_MODE_SPEED_STC"/>
   <Member array="10" class="enum" name="fecAbilityArr" type="CPSS_PORT_FEC_MODE_ENT"/>
   <Member array="10" class="enum" name="fecRequestedArr" type="CPSS_PORT_FEC_MODE_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_AP_STATS_STC">
   <Comment>
<![CDATA[/*
 * AP statistics information:
 *    abilityCnt        - Number of Ability detect intervals executed
 *    abilitySuccessCnt - Number of Ability detect successfull intervals executed
 *    linkFailCnt       - Number of Link check fail intervals executed
 *    linkSuccessCnt    - Number of Link check successfull intervals executed
 *    hcdResoultionTime - Time duration for HCD resolution
 *    linkUpTime        - Time duration for Link up
*/]]>   </Comment>
   <Member class="int" name="txDisCnt" type="GT_U16"/>
   <Member class="int" name="abilityCnt" type="GT_U16"/>
   <Member class="int" name="abilitySuccessCnt" type="GT_U16"/>
   <Member class="int" name="linkFailCnt" type="GT_U16"/>
   <Member class="int" name="linkSuccessCnt" type="GT_U16"/>
   <Member class="int" name="hcdResoultionTime" type="GT_U32"/>
   <Member class="int" name="linkUpTime" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_AP_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_AP_STATUS_STC
 *
 * @brief Structure for AP resolution result
*/]]>   </Comment>
   <Member class="int" name="postApPortNum" type="GT_U32"/>
   <Member class="struct" name="portMode" type="CPSS_PORT_MODE_SPEED_STC"/>
   <Member class="bool" name="hcdFound" type="GT_BOOL"/>
   <Member class="bool" name="fecEnabled" type="GT_BOOL"/>
   <Member class="bool" name="fcRxPauseEn" type="GT_BOOL"/>
   <Member class="bool" name="fcTxPauseEn" type="GT_BOOL"/>
   <Member class="enum" name="fecType" type="CPSS_PORT_FEC_MODE_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_AUTONEG_ADVERTISMENT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_AUTONEG_ADVERTISMENT_STC
 *
 * @brief A struct containing parameters to build
 * <TX Config Reg> data for Auto-Negotiation.
*/]]>   </Comment>
   <Member class="bool" name="link" type="GT_BOOL"/>
   <Member class="enum" name="speed" type="CPSS_PORT_SPEED_ENT"/>
   <Member class="enum" name="duplex" type="CPSS_PORT_DUPLEX_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_CNM_GENERATION_CONFIG_STC
 *
 * @brief CN message generation configurations
*/]]>   </Comment>
   <Member class="int" name="packetType" type="CPSS_PX_PACKET_TYPE"/>
   <Member class="int" name="priority" type="GT_U32"/>
   <Member class="enum" name="dropPrecedence" type="CPSS_DP_LEVEL_ENT"/>
   <Member class="int" name="tc4pfc" type="GT_U32"/>
   <Member class="bool" name="localGeneratedPacketTypeAssignmentEnable" type="GT_BOOL"/>
   <Member class="int" name="localGeneratedPacketType" type="CPSS_PX_PACKET_TYPE"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_CN_FB_CALCULATION_CONFIG_STC
 *
 * @brief Feedback calculation configurations.
*/]]>   </Comment>
   <Member class="int" name="wExp" type="GT_32"/>
   <Member class="int" name="fbLsb" type="GT_U32"/>
   <Member class="bool" name="deltaEnable" type="GT_BOOL"/>
   <Member class="int" name="fbMin" type="GT_U32"/>
   <Member class="int" name="fbMax" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_CN_PROFILE_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_CN_PROFILE_CONFIG_STC
 *
 * @brief CN Profile configurations.
*/]]>   </Comment>
   <Member class="bool" name="cnAware" type="GT_BOOL"/>
   <Member class="int" name="threshold" type="GT_U32"/>
   <Member class="enum" name="alpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_CN_SAMPLE_INTERVAL_ENTRY_STC
 *
 * @brief CN Sample Interval Table entry.
*/]]>   </Comment>
   <Member class="int" name="interval" type="GT_U32"/>
   <Member class="int" name="randBitmap" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_ECN_ENABLERS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_ECN_ENABLERS_STC
 *
 * @brief ECN marking enablers structure.
*/]]>   </Comment>
   <Member class="bool" name="tcDpLimit" type="GT_BOOL"/>
   <Member class="bool" name="portLimit" type="GT_BOOL"/>
   <Member class="bool" name="tcLimit" type="GT_BOOL"/>
   <Member class="bool" name="sharedPoolLimit" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_EGRESS_CNTR_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_EGRESS_CNTR_STC
 *
 * @brief Structure of egress counters for Pipe.
*/]]>   </Comment>
   <Member class="int" name="outFrames" type="GT_U32"/>
   <Member class="int" name="txqFilterDisc" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_MAC_COUNTERS_STC">
   <Comment>
<![CDATA[/*
 * typedef: struct CPSS_PX_PORT_MAC_COUNTERS_STC
 *
 * Description: array of ALL counters of 'port MAC MIB Counters'
 *
 *  mibCounter[] - array of ALL counters of 'port MAC MIB Counters'
 *                 index into the array is the 'Specific counter type'
 *                  according to enum : CPSS_PX_PORT_MAC_COUNTER_ENT
 */]]>   </Comment>
   <Member array="28" class="struct" name="mibCounter" type="GT_U64"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_MAP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_MAP_STC
 *
 * @brief General physical port map structure
*/]]>   </Comment>
   <Member class="int" name="physicalPortNumber" type="GT_PHYSICAL_PORT_NUM"/>
   <Member class="enum" name="mappingType" type="CPSS_PX_PORT_MAPPING_TYPE_ENT"/>
   <Member class="int" name="interfaceNum" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_PFC_PROFILE_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_PFC_PROFILE_CONFIG_STC
 *
 * @brief PFC Profile configurations.
*/]]>   </Comment>
   <Member class="int" name="xonThreshold" type="GT_U32"/>
   <Member class="int" name="xoffThreshold" type="GT_U32"/>
   <Member class="enum" name="xonAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
   <Member class="enum" name="xoffAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_STAT_TX_DROP_COUNTERS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_STAT_TX_DROP_COUNTERS_STC
 *
 * @brief Structure of TXQ drop counters.
*/]]>   </Comment>
   <Member class="int" name="egrMirrorDropCntr" type="GT_U32"/>
   <Member class="int" name="egrStcDropCntr" type="GT_U32"/>
   <Member class="int" name="egrQcnDropCntr" type="GT_U32"/>
   <Member class="int" name="dropPfcEventsCntr" type="GT_U32"/>
   <Member class="int" name="clearPacketsDroppedCounter" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_TX_SHAPER_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_TX_SHAPER_CONFIG_STC
 *
 * @brief Shaper configurations.
*/]]>   </Comment>
   <Member class="int" name="tokensRate" type="GT_U32"/>
   <Member class="int" name="slowRateRatio" type="GT_U32"/>
   <Member class="enum" name="tokensRateGran" type="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_ENT"/>
   <Member class="int" name="portsPacketLength" type="GT_U32"/>
   <Member class="int" name="cpuPacketLength" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_TC_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_TC_STC
 *
 * @brief The Tail Drop profile Traffic Class parameters.
*/]]>   </Comment>
   <Member class="int" name="dp0MaxBuffNum" type="GT_U32"/>
   <Member class="int" name="dp0MaxDescNum" type="GT_U32"/>
   <Member class="int" name="dp1MaxBuffNum" type="GT_U32"/>
   <Member class="int" name="dp1MaxDescNum" type="GT_U32"/>
   <Member class="int" name="dp2MaxBuffNum" type="GT_U32"/>
   <Member class="int" name="dp2MaxDescNum" type="GT_U32"/>
   <Member class="int" name="tcMaxBuffNum" type="GT_U32"/>
   <Member class="int" name="tcMaxDescNum" type="GT_U32"/>
   <Member class="enum" name="dp0QueueAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
   <Member class="enum" name="dp1QueueAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
   <Member class="enum" name="dp2QueueAlpha" type="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_ENABLER_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_TX_TAIL_DROP_WRTD_ENABLER_STC
 *
 * @brief Tail Drop limits enabling for Weigthed Random Tail Drop.
*/]]>   </Comment>
   <Member class="bool" name="tcDpLimit" type="GT_BOOL"/>
   <Member class="bool" name="portLimit" type="GT_BOOL"/>
   <Member class="bool" name="tcLimit" type="GT_BOOL"/>
   <Member class="bool" name="sharedPoolLimit" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_PORT_TX_TAIL_DROP_WRTD_MASK_LSB_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PORT_TX_TAIL_DROP_WRTD_MASK_LSB_STC
 *
 * @brief The Tail Drop WRTD masked lsbs' for each limit type.
*/]]>   </Comment>
   <Member class="int" name="tcDp" type="GT_U32"/>
   <Member class="int" name="port" type="GT_U32"/>
   <Member class="int" name="tc" type="GT_U32"/>
   <Member class="int" name="pool" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PTP_TAI_TOD_COUNT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PTP_TAI_TOD_COUNT_STC
 *
 * @brief Structure for TOD Counter.
*/]]>   </Comment>
   <Member class="int" name="nanoSeconds" type="GT_U32"/>
   <Member class="struct" name="seconds" type="GT_U64"/>
   <Member class="int" name="fracNanoSeconds" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PTP_TAI_TOD_STEP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PTP_TAI_TOD_STEP_STC
 *
 * @brief Structure for value of TOD Step.
*/]]>   </Comment>
   <Member class="int" name="nanoSeconds" type="GT_U32"/>
   <Member class="int" name="fracNanoSeconds" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_PTP_TSU_CONTROL_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PTP_TSU_CONTROL_STC
 *
 * @brief Structure for TSU (Time Stamping Unit) Control.
*/]]>   </Comment>
   <Member class="bool" name="unitEnable" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_PX_PTP_TYPE_KEY_FORMAT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PTP_TYPE_KEY_FORMAT_STC
 *
 * @brief PTP Type Key Table format
*/]]>   </Comment>
   <Member class="bool" name="isUdp" type="GT_BOOL"/>
   <Member class="int" name="srcPortProfile" type="GT_U32"/>
   <Member array="4" class="struct" name="udbPairsArr" type="CPSS_PX_UDB_PAIR_DATA_STC"/>
   <Member array="6" class="int" name="udbArr" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_PX_PTP_TYPE_KEY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_PTP_TYPE_KEY_STC
 *
 * @brief This structure defines port PTP type key.
*/]]>   </Comment>
   <Member array="2" class="struct" name="portUdbPairArr" type="CPSS_PX_UDB_PAIR_KEY_STC"/>
   <Member array="6" class="struct" name="portUdbArr" type="CPSS_PX_UDB_KEY_STC"/>
  </Structure>
  <Structure name="CPSS_PX_RAM_INDEX_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_RAM_INDEX_INFO_STC
*
* @brief A struct to hold ram location information
*/]]>   </Comment>
   <Member class="enum" name="memType" type="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_ENT"/>
   <Member class="int" name="ramRow" type="GT_U32"/>
   <Member class="struct" name="memLocation" type="CPSS_DIAG_DATA_INTEGRITY_MEMORY_LOCATION_STC"/>
  </Structure>
  <Structure name="CPSS_PX_SHADOW_PORT_MAP_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_SHADOW_PORT_MAP_STC
 *
 * @brief A structure to hold detailed information about
 * physical port mapping.
*/]]>   </Comment>
   <Member class="enum" name="mappingType" type="CPSS_PX_PORT_MAPPING_TYPE_ENT"/>
   <Member class="int" name="macNum" type="GT_U32"/>
   <Member class="int" name="dmaNum" type="GT_U32"/>
   <Member class="int" name="txqNum" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_UDB_KEY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_UDB_KEY_STC
 *
 * @brief This structure defines User Defined Byte for packet type key.
*/]]>   </Comment>
   <Member class="enum" name="udbAnchorType" type="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_ENT"/>
   <Member class="int" name="udbByteOffset" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_PX_UDB_PAIR_DATA_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_UDB_PAIR_DATA_STC
 *
 * @brief This structure defines 2 consecutive UDB bytes.
*/]]>   </Comment>
   <Member array="2" class="int" name="udb" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_PX_UDB_PAIR_KEY_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_PX_UDB_PAIR_KEY_STC
 *
 * @brief This structure defines User Defined Bytes Pair for packet type key.
*/]]>   </Comment>
   <Member class="enum" name="udbAnchorType" type="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_ENT"/>
   <Member class="int" name="udbByteOffset" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_RX_BUF_INFO_STC" special="unused"/>
  <Structure name="CPSS_SYSTEM_RECOVERY_INFO_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_SYSTEM_RECOVERY_INFO_STC
 *
 * @brief This struct containes information about system recovery process.
*/]]>   </Comment>
   <Member class="enum" name="systemRecoveryState" type="CPSS_SYSTEM_RECOVERY_STATE_ENT"/>
   <Member class="struct" name="systemRecoveryMode" type="CPSS_SYSTEM_RECOVERY_MODE_STC"/>
   <Member class="enum" name="systemRecoveryProcess" type="CPSS_SYSTEM_RECOVERY_PROCESS_ENT"/>
  </Structure>
  <Structure name="CPSS_SYSTEM_RECOVERY_MODE_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_SYSTEM_RECOVERY_MODE_STC
 *
 * @brief This struct containes description of system recovery modes.
*/]]>   </Comment>
   <Member class="bool" name="continuousRx" type="GT_BOOL"/>
   <Member class="bool" name="continuousTx" type="GT_BOOL"/>
   <Member class="bool" name="continuousAuMessages" type="GT_BOOL"/>
   <Member class="bool" name="continuousFuMessages" type="GT_BOOL"/>
   <Member class="bool" name="haCpuMemoryAccessBlocked" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_TM2TM_CNTRL_PKT_STRUCT_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM2TM_CNTRL_PKT_STRUCT_STC
 *
 * @brief TM2TM Control Packet Structure.
*/]]>   </Comment>
   <Member class="int" name="portsNum" type="GT_U32"/>
   <Member class="int" name="nodesNum" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM2TM_DELTA_RANGE_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM2TM_DELTA_RANGE_STC
 *
 * @brief TM2TM Delta Range Mapping to Priority.
*/]]>   </Comment>
   <Member class="int" name="upperRange0" type="GT_U32"/>
   <Member class="int" name="upperRange1" type="GT_U32"/>
   <Member class="int" name="upperRange2" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM2TM_EXTERNAL_HDR_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM2TM_EXTERNAL_HDR_STC
 *
 * @brief TM2TM External Headers.
*/]]>   </Comment>
   <Member class="int" name="size" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_A_NODE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_A_NODE_PARAMS_STC
 *
 * @brief A-Node Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="shapingProfilePtr" type="GT_U32"/>
   <Member class="int" name="quantum" type="GT_U32"/>
   <Member class="int" name="dropProfileInd" type="GT_U32"/>
   <Member class="enum" name="eligiblePrioFuncId" type="CPSS_TM_ELIG_FUNC_NODE_ENT"/>
   <Member class="int" name="numOfChildren" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_BAP_UNIT_ERROR_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_BAP_UNIT_ERROR_STATUS_STC
 *
 * @brief TM BAP Unit Global Error Status
*/]]>   </Comment>
   <Member class="int" name="bapStatus" type="GT_U32"/>
   <Member class="int" name="bapNum" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_TM_B_NODE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_B_NODE_PARAMS_STC
 *
 * @brief B-Node Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="shapingProfilePtr" type="GT_U32"/>
   <Member class="int" name="quantum" type="GT_U32"/>
   <Member class="int" name="dropProfileInd" type="GT_U32"/>
   <Member class="enum" name="eligiblePrioFuncId" type="CPSS_TM_ELIG_FUNC_NODE_ENT"/>
   <Member class="int" name="numOfChildren" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_CTL_LAD_INF_PARAM_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_CTL_LAD_INF_PARAM_STC
 *
 * @brief This struct defines custom LAD interface parameters,
 * its used when needed to overwrite LADs Default configuration.
*/]]>   </Comment>
   <Member class="int" name="minPkgSize" type="GT_U32"/>
   <Member class="int" name="pagesPerBank" type="GT_U32"/>
   <Member class="int" name="pkgesPerBank" type="GT_U32"/>
   <Member class="int" name="portChunksEmitPerSel" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_C_NODE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_C_NODE_PARAMS_STC
 *
 * @brief C-Node Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="shapingProfilePtr" type="GT_U32"/>
   <Member class="int" name="quantum" type="GT_U32"/>
   <Member class="int" name="dropCosMap" type="GT_U32"/>
   <Member class="enum" name="eligiblePrioFuncId" type="CPSS_TM_ELIG_FUNC_NODE_ENT"/>
   <Member class="int" name="numOfChildren" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_DROP_PROFILE_CA_TD_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_DROP_PROFILE_CA_TD_PARAMS_STC
 *
 * @brief Color Aware Drop configuration profile.
*/]]>   </Comment>
  </Structure>
  <Structure name="CPSS_TM_DROP_PROFILE_CA_WRED_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_DROP_PROFILE_CA_WRED_PARAMS_STC
 *
 * @brief Drop configuration profile.
*/]]>   </Comment>
   <Member class="int" name="aqlExponent" type="GT_U8"/>
  </Structure>
  <Structure name="CPSS_TM_DROP_PROFILE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_DROP_PROFILE_PARAMS_STC
 *
 * @brief Structure which groups the 3 drop modes.
*/]]>   </Comment>
   <Member class="enum" name="dropMode" type="CPSS_TM_DROP_MODE_ENT"/>
   <Member class="int" name="cbTdThresholdBytes" type="GT_U32"/>
   <Member class="struct" name="caTdDp" type="CPSS_TM_DROP_PROFILE_CA_TD_PARAMS_STC"/>
   <Member class="struct" name="caWredDp" type="CPSS_TM_DROP_PROFILE_CA_WRED_PARAMS_STC"/>
  </Structure>
  <Structure name="CPSS_TM_LEVEL_PERIODIC_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_LEVEL_PERIODIC_PARAMS_STC
 *
 * @brief Periodic Update Rate configuration params per level.
*/]]>   </Comment>
   <Member class="bool" name="periodicState" type="GT_BOOL"/>
   <Member class="bool" name="shaperDecoupling" type="GT_BOOL"/>
  </Structure>
  <Structure name="CPSS_TM_LIB_INIT_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_LIB_INIT_PARAMS_STC
 *
 * @brief Customize TM lib initialization parameters.
*/]]>   </Comment>
   <Member class="int" name="tmMtu" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_NODE_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_NODE_STATUS_STC
 *
 * @brief Node status data structure.
*/]]>   </Comment>
   <Member class="int" name="maxBucketLevel" type="GT_U32"/>
   <Member class="int" name="minBucketLevel" type="GT_U32"/>
   <Member class="int" name="deficit" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_PORT_DROP_PER_COS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_PORT_DROP_PER_COS_STC
 *
 * @brief Port Drop per Cos Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="dropCosMap" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_PORT_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_PORT_PARAMS_STC
 *
 * @brief Port Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="cirBw" type="GT_U32"/>
   <Member class="int" name="eirBw" type="GT_U32"/>
   <Member class="int" name="cbs" type="GT_U32"/>
   <Member class="int" name="ebs" type="GT_U32"/>
   <Member class="int" name="dropProfileInd" type="GT_U32"/>
   <Member class="enum" name="eligiblePrioFuncId" type="CPSS_TM_ELIG_FUNC_NODE_ENT"/>
   <Member class="int" name="numOfChildren" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_PORT_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_PORT_STATUS_STC
 *
 * @brief Port status data structure.
*/]]>   </Comment>
   <Member class="int" name="maxBucketLevel" type="GT_U32"/>
   <Member class="int" name="minBucketLevel" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_QMR_PKT_STATISTICS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_QMR_PKT_STATISTICS_STC
 *
 * @brief QMR Packet Statistics data structure.
*/]]>   </Comment>
   <Member class="struct" name="numPktsToUnInstallQueue" type="GT_U64"/>
  </Structure>
  <Structure name="CPSS_TM_QUANTUM_LIMITS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_QUANTUM_LIMITS_STC
 *
 * @brief quantum Limits for port/node. Used for read these parameters from TM instance
*/]]>   </Comment>
   <Member class="int" name="minQuantum" type="GT_U32"/>
   <Member class="int" name="maxQuantum" type="GT_U32"/>
   <Member class="int" name="resolution" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_QUEUE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_QUEUE_PARAMS_STC
 *
 * @brief Queue Parameters Data Structure.
*/]]>   </Comment>
   <Member class="int" name="shapingProfilePtr" type="GT_U32"/>
   <Member class="int" name="quantum" type="GT_U32"/>
   <Member class="int" name="dropProfileInd" type="GT_U32"/>
   <Member class="enum" name="eligiblePrioFuncId" type="CPSS_TM_ELIG_FUNC_QUEUE_ENT"/>
  </Structure>
  <Structure name="CPSS_TM_RCB_PKT_STATISTICS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_RCB_PKT_STATISTICS_STC
 *
 * @brief RCB Packet Statistics data structure.
*/]]>   </Comment>
   <Member class="struct" name="numPktsToSms" type="GT_U64"/>
   <Member class="struct" name="numCrcErrPktsToSms" type="GT_U64"/>
   <Member class="struct" name="numErrsFromSmsToDram" type="GT_U64"/>
   <Member class="struct" name="numPortFlushDrpDataPkts" type="GT_U64"/>
  </Structure>
  <Structure name="CPSS_TM_SHAPING_PROFILE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_SHAPING_PROFILE_PARAMS_STC
 *
 * @brief Shared Shaper Profile configuration structure.
*/]]>   </Comment>
   <Member class="int" name="cirBw" type="GT_U32"/>
   <Member class="int" name="cbs" type="GT_U32"/>
   <Member class="int" name="eirBw" type="GT_U32"/>
   <Member class="int" name="ebs" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_TREE_PARAMS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_TREE_PARAMS_STC
 *
 * @brief TM Tree HW properties and Limits.
*/]]>   </Comment>
   <Member class="int" name="maxQueues" type="GT_U32"/>
   <Member class="int" name="maxAnodes" type="GT_U32"/>
   <Member class="int" name="maxBnodes" type="GT_U32"/>
   <Member class="int" name="maxCnodes" type="GT_U32"/>
   <Member class="int" name="maxPorts" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TM_UNITS_ERROR_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_TM_UNITS_ERROR_STATUS_STC
 *
 * @brief TM Units Global Error Status
*/]]>   </Comment>
   <Member class="int" name="qmngrStatus" type="GT_U32"/>
   <Member class="int" name="dropStatus" type="GT_U32"/>
   <Member class="int" name="schedStatus" type="GT_U32"/>
   <Member class="int" name="rcbStatus" type="GT_U32"/>
  </Structure>
  <Structure name="CPSS_TRACE_FUNC_BIND_STC">
   <Comment>
<![CDATA[/* CPSS_TRACE_FUNC_BIND_STC -
*    structure that hold the "trace" functions needed be bound to cpss.
*
*       traceHwBindInfo -  set of call back functions -
*                           HW trace functions
*/]]>   </Comment>
   <Member class="struct" name="traceHwBindInfo" type="CPSS_TRACE_HW_ACCESS_FUNC_BIND_STC"/>
  </Structure>
  <Structure name="CPSS_VCT_ACCURATE_CABLE_LEN_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_ACCURATE_CABLE_LEN_STC
 *
 * @brief accurate cable length for each MDI pair.
*/]]>   </Comment>
  </Structure>
  <Structure name="CPSS_VCT_CABLE_EXTENDED_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_CABLE_EXTENDED_STATUS_STC
 *
 * @brief extended virtual cable diag. status per MDI pair/channel pair.
*/]]>   </Comment>
   <Member class="struct" name="vctExtendedCableStatus" type="CPSS_VCT_EXTENDED_STATUS_STC"/>
   <Member class="struct" name="accurateCableLen" type="CPSS_VCT_ACCURATE_CABLE_LEN_STC"/>
   <Member class="enum" name="twoPairDownShift" type="CPSS_VCT_DOWNSHIFT_STATUS_ENT"/>
  </Structure>
  <Structure name="CPSS_VCT_CABLE_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_CABLE_STATUS_STC
 *
 * @brief virtual cable diagnostic status per MDI pair.
*/]]>   </Comment>
   <Member class="enum" name="normalCableLen" type="CPSS_VCT_NORMAL_CABLE_LEN_ENT"/>
   <Member class="enum" name="phyType" type="CPSS_VCT_PHY_TYPES_ENT"/>
  </Structure>
  <Structure name="CPSS_VCT_CONFIG_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_CONFIG_STC
 *
 * @brief Holds cable length, configured by user.
*/]]>   </Comment>
   <Member class="enum" name="length" type="CPSS_VCT_CABLE_LEN_ENT"/>
  </Structure>
  <Structure name="CPSS_VCT_EXTENDED_STATUS_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_EXTENDED_STATUS_STC
 *
 * @brief extended virtual cable diagnostic status per MDI pair/channel
 * pair.
*/]]>   </Comment>
   <Member class="bool" name="isValid" type="GT_BOOL"/>
   <Member class="struct" name="pairSkew" type="CPSS_VCT_PAIR_SKEW_STC"/>
  </Structure>
  <Structure name="CPSS_VCT_PAIR_SKEW_STC">
   <Comment>
<![CDATA[/**
* @struct CPSS_VCT_PAIR_SKEW_STC
 *
 * @brief pair skew values.
*/]]>   </Comment>
   <Member class="bool" name="isValid" type="GT_BOOL"/>
  </Structure>
  <Structure name="GT_ETHERADDR" special="string"/>
  <Structure name="GT_IPADDR" special="string"/>
  <Structure name="GT_IPV6ADDR" special="string"/>
  <Structure name="GT_U64">
   <Member array="2" class="int" name="l" type="GT_U32"/>
  </Structure>
  <Structure name="GT_VERSION">
   <Comment>
<![CDATA[/**
* @struct GT_VERSION
 *
 * @brief This struct holds the package version.
*/]]>   </Comment>
   <Member array="30" class="int" name="version" type="GT_U8"/>
  </Structure>
  <Structure name="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_COOKIE_STC">
   <Member class="struct" name="trainSequence" type="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC"/>
   <Member class="int" name="phase" type="GT_U8"/>
   <Member class="bool" name="phaseFinished" type="GT_BOOL"/>
   <Member class="bool" name="allPhasesFinished" type="GT_BOOL"/>
   <Member class="bool" name="overrideEtParams" type="GT_BOOL"/>
   <Member class="int" name="min_LF" type="GT_U8"/>
   <Member class="int" name="max_LF" type="GT_U8"/>
  </Structure>
  <Structure name="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_DB_STC">
   <Member class="struct" name="cookie" type="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_COOKIE_STC"/>
   <Member class="enum" name="cyclicTune" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
  </Structure>
  <Structure name="PRV_CPSS_PORT_SERDES_CYCLIC_TUNE_SEQUENCE_STC">
   <Member class="enum" name="tune" type="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT"/>
   <Member class="bool" name="adaptiveEnabled" type="GT_BOOL"/>
   <Member class="bool" name="edgeDetectEnabled" type="GT_BOOL"/>
  </Structure>
 </Structures>
 <Enums>
  <Enum name="CPSS_PX_PORT_MAC_COUNTER_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_MAC_COUNTER_ENT
 *
 * @brief Enumeration of the port MAC MIB Counters.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_GOOD_OCTETS_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_BAD_OCTETS_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_CRC_ERRORS_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_GOOD_UNICAST_FRAMES_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_BROADCAST_FRAMES_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_MULTICAST_FRAMES_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_64_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_65_TO_127_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_128_TO_255_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_256_TO_511_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_512_TO_1023_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_MAX_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_1518_OCTETS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_GOOD_OCTETS_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_UNICAST_FRAME_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_MULTICAST_FRAMES_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_BROADCAST_FRAMES_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FC_SENT_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FC_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_RECEIVED_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_UNDERSIZE_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_FRAGMENTS_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_OVERSIZE_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_JABBER_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_RX_ERROR_FRAME_RECEIVED_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_BAD_CRC_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_COLLISION_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER_LATE_COLLISION_E"/>
   <Value str="CPSS_PX_PORT_MAC_COUNTER____LAST____E"/>
  </Enum>
  <Enum name="CPSS_LOG_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LOG_TYPE_ENT
 *
 * @brief This enum defines the different types of the log.
*/]]>   </Comment>
   <Value str="CPSS_LOG_TYPE_INFO_E"/>
   <Value str="CPSS_LOG_TYPE_ENTRY_LEVEL_FUNCTION_E"/>
   <Value str="CPSS_LOG_TYPE_NON_ENTRY_LEVEL_FUNCTION_E"/>
   <Value str="CPSS_LOG_TYPE_DRIVER_E"/>
   <Value str="CPSS_LOG_TYPE_ERROR_E"/>
   <Value str="CPSS_LOG_TYPE_ALL_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_PCS_LOOPBACK_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_PCS_LOOPBACK_MODE_ENT
 *
 * @brief Enumeration of port's PCS loopback modes.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_PCS_LOOPBACK_DISABLE_E"/>
   <Value str="CPSS_PX_PORT_PCS_LOOPBACK_TX2RX_E"/>
   <Value str="CPSS_PX_PORT_PCS_LOOPBACK_RX2TX_E"/>
  </Enum>
  <Enum name="CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_PERIODIC_FLOW_CONTROL_TYPE_ENT
 *
 * @brief Enumeration of Port Periodic FC type enablers.
*/]]>   </Comment>
   <Value str="CPSS_PORT_PERIODIC_FLOW_CONTROL_DISABLE_E"/>
   <Value str="CPSS_PORT_PERIODIC_FLOW_CONTROL_XON_XOFF_E"/>
   <Value str="CPSS_PORT_PERIODIC_FLOW_CONTROL_XON_ONLY_E"/>
   <Value str="CPSS_PORT_PERIODIC_FLOW_CONTROL_XOFF_ONLY_E"/>
  </Enum>
  <Enum name="CPSS_PORT_REF_CLOCK_SOURCE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_REF_CLOCK_SOURCE_ENT
 *
 * @brief Enumeration for port reference clock source parameter
*/]]>   </Comment>
   <Value str="CPSS_PORT_REF_CLOCK_SOURCE_PRIMARY_E"/>
   <Value str="CPSS_PORT_REF_CLOCK_SOURCE_SECONDARY_E"/>
   <Value str="CPSS_PORT_REF_CLOCK_SOURCE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_TEST_PROFILE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_TEST_PROFILE_ENT
 *
 * @brief Test profile.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_TEST_RANDOM_E"/>
   <Value str="CPSS_DIAG_TEST_INCREMENTAL_E"/>
   <Value str="CPSS_DIAG_TEST_BIT_TOGGLE_E"/>
   <Value str="CPSS_DIAG_TEST_AA_55_E"/>
  </Enum>
  <Enum name="CPSS_PX_DIAG_TEMPERATURE_SENSOR_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_DIAG_TEMPERATURE_SENSOR_ENT
 *
 * @brief Defines Temperature Sensors.
*/]]>   </Comment>
   <Value str="CPSS_PX_DIAG_TEMPERATURE_SENSOR_0_E"/>
   <Value str="CPSS_PX_DIAG_TEMPERATURE_SENSOR_AVERAGE_E"/>
   <Value str="CPSS_PX_DIAG_TEMPERATURE_SENSOR_MAX_E"/>
  </Enum>
  <Enum name="CPSS_LED_CLOCK_OUT_FREQUENCY_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_CLOCK_OUT_FREQUENCY_ENT
 *
 * @brief The LED clock out frequency
*/]]>   </Comment>
   <Value str="CPSS_LED_CLOCK_OUT_FREQUENCY_500_E"/>
   <Value str="CPSS_LED_CLOCK_OUT_FREQUENCY_1000_E"/>
   <Value str="CPSS_LED_CLOCK_OUT_FREQUENCY_2000_E"/>
   <Value str="CPSS_LED_CLOCK_OUT_FREQUENCY_3000_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_HASH_LAG_TABLE_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_HASH_LAG_TABLE_MODE_ENT
 *
 * @brief The LAG Designated Port Table mode
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_HASH_LAG_TABLE_SINGLE_MODE_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_LAG_TABLE_DUAL_MODE_E"/>
  </Enum>
  <Enum name="CPSS_UNI_EV_CAUSE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_UNI_EV_CAUSE_ENT
 *
 * @brief Enumeration of types of events that CPSS allow application to
 * get from the HW.
 * Each PP may support only some of those events
 * Note : 1. most of those listed events retrieved by calling function
 * cpssEventRecv(...)
 * 2. function cpssEventRecv(...) will retrieve the device number on
 * which event occur via parameter evDevPtr
 * 3. function cpssEventRecv(...) will retrieve extra info via parameter
 * evExtDataPtr for the next events:
 * (evExtDataPtr) as port number -
 * CPSS_PP_BM_MAX_BUFF_REACHED_E
 * CPSS_PP_PORT_LINK_STATUS_CHANGED_E
 * CPSS_PP_PORT_AN_COMPLETED_E
 * CPSS_PP_PORT_RX_FIFO_OVERRUN_E
 * CPSS_PP_PORT_TX_FIFO_UNDERRUN_E
 * CPSS_PP_PORT_TX_FIFO_OVERRUN_E
 * CPSS_PP_PORT_TX_UNDERRUN_E
 * CPSS_PP_PORT_ADDRESS_OUT_OF_RANGE_E
 * CPSS_PP_PORT_PRBS_ERROR_E
 * CPSS_PP_PORT_SYNC_STATUS_CHANGED_E
 * CPSS_PP_PORT_TX_CRC_ERROR_E
 * CPSS_PP_PORT_ILLEGAL_SEQUENCE_E
 * CPSS_PP_PORT_IPG_TOO_SMALL_E
 * CPSS_PP_PORT_FAULT_TYPE_CHANGE_E
 * CPSS_PP_PORT_FC_STATUS_CHANGED_E
 * CPSS_PP_PORT_CONSECUTIVE_TERM_CODE_E
 * CPSS_PP_TQ_WATCHDOG_EX_PORT_E
 * CPSS_PP_TQ_TXQ2_FLUSH_PORT_E
 * CPSS_PP_TQ_HOL_REACHED_PORT_E
 * CPSS_PP_TQ_RED_REACHED_PORT_E
 * CPSS_PP_MAC_SFLOW_E
 * CPSS_PP_EGRESS_SFLOW_E
 * CPSS_PP_INGRESS_SFLOW_SAMPLED_CNTR_E
 * CPSS_PP_EGRESS_SFLOW_SAMPLED_CNTR_E
 * CPSS_PP_PORT_NO_BUFF_PACKET_DROP_E
 * CPSS_PP_PORT_XAUI_PHY_E,
 * CPSS_PP_PORT_COUNT_COPY_DONE_E
 * CPSS_PP_PORT_COUNT_EXPIRED_E
 * CPSS_PP_TQ_PORT_FULL_XG_E
 * CPSS_PP_TQ_PORT_DESC_FULL_E
 * -- Per Port PCS (Physical Coding Sub-layer) events --
 * CPSS_PP_PORT_PCS_LINK_STATUS_CHANGED_E
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_PCS_DESKEW_TIMEOUT_E    -
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_PCS_DETECTED_COLUMN_IIAII_E -
 * supported by : xcat,exMxPm
 * CPSS_PP_PORT_PCS_DESKEW_ERROR_E     -
 * supported by : xcat,exMxPm
 * CPSS_PP_PORT_PCS_PPM_FIFO_UNDERRUN_E   -
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_PCS_PPM_FIFO_OVERRUN_E   -
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_PCS_ALIGN_LOCK_LOST_E    -
 * supported by : 40G PCS
 * CPSS_PP_PORT_PRBS_ERROR_QSGMII_E
 * in XCAT2 B1 this interrupt
 * means Signal Detect change.
 * Per port used for xCat2 only
 * CPSS_PP_PORT_MMPCS_SIGNAL_DETECT_CHANGE_E
 * in Lion2 means or MMPCS
 * signal detect change or
 * gearbox lock change.
 * Per port. Lion2, xCat3 and
 * all SIP5 use it.
 * (evExtDataPtr) as port number and lane number -
 * -- Per Port Per lane events --
 * formula is:
 * (evExtDataPtr) = (port) << 8 + (lane);
 * for example when (evExtDataPtr) = 0x1a03
 * meaning : event on port 0x1a (26) , lane 3
 * the events are :
 * CPSS_PP_PORT_LANE_PRBS_ERROR_E      -
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_LANE_DISPARITY_ERROR_E    -
 * supported by : xcat,exMxPm
 * CPSS_PP_PORT_LANE_SYMBOL_ERROR_E     -
 * supported by : xcat,exMxPm
 * CPSS_PP_PORT_LANE_CJR_PAT_ERROR_E     -
 * supported by : xcat,lion,exMxPm
 * CPSS_PP_PORT_LANE_SIGNAL_DETECT_CHANGED_E -
 * supported by : xcat,exMxPm,Lion2
 * CPSS_PP_PORT_LANE_SYNC_STATUS_CHANGED_E  -
 * supported by : xcat,exMxPm
 * CPSS_PP_PORT_LANE_DETECTED_IIAII_E    -
 * supported by : xcat,exMxPm
 * (evExtDataPtr) as queue number -
 * CPSS_PP_TX_BUFFER_QUEUE_E
 * CPSS_PP_TX_ERR_QUEUE_E
 * CPSS_PP_TX_END_E
 * CPSS_PP_RX_BUFFER_QUEUE0_E .. CPSS_PP_RX_BUFFER_QUEUE7_E
 * CPSS_PP_RX_ERR_QUEUE0_E    .. CPSS_PP_RX_ERR_QUEUE7_E
 ********
 * Supported for multi-CPU SDMA ports : (8 queues per CPU SDMA)
 * CPSS_PP_RX_BUFFER_QUEUE8_E .. CPSS_PP_RX_BUFFER_QUEUE127_E
 * CPSS_PP_RX_ERR_QUEUE8_E    .. CPSS_PP_RX_ERR_QUEUE127_E
 ********
 * (evExtDataPtr) as index -
 * CPSS_PP_GPP_E -
 * GPP index :
 * 0..99  : PP  GPPs
 * 100..199 : GPIO GPPs (CPU sub-system)
 * CPSS_PP_CNC_WRAPAROUND_BLOCK_E -
 * CNC block
 * CPSS_PP_LX_IPV4_LPM_ERR_E
 * exmx - lpm index
 * CPSS_PP_BM_PORT_RX_BUFFERS_CNT_UNDERRUN_E
 * dxch - 0 - port ,1 - GE , 2 - XG , 3 - global
 * CPSS_PP_BM_PORT_RX_BUFFERS_CNT_OVERRUN_E
 * dxch - 0 - port ,1 - GE , 2 - XG , 3 - global
 * CPSS_PP_BM_MISC_E
 * dxch -
 * 0 - LL port2 parity error
 * 1 - LL port1 parity error
 * 2 - control mem parity error
 * 3 - MC counter parity error
 * 4 - port RX full
 * 5 - MPPM parity error
 * exmxpm -
 * 0 - ingress/egress port rx full
 * 1 - ingress/egress clear before bind
 * 2 - ingress/egress triggered aging done
 * CPSS_PP_RX_CNTR_OVERFLOW_E
 * dxch :
 * 0 - sdma rx error resource counter off
 * 1 - sdma rx byte counter off
 * 2 - sdma rx packet counter off
 * CPSS_PP_GOP_ADDRESS_OUT_OF_RANGE_E
 * CPSS_PP_GOP_COUNT_EXPIRED_E
 * CPSS_PP_GOP_COUNT_COPY_DONE_E
 * CPSS_PP_GOP_XG_BAD_FC_PACKET_GOOD_CRC_E
 * CPSS_PP_GOP_GIG_BAD_FC_PACKET_GOOD_CRC_E
 * GOP index
 * CPSS_PP_TQ_MISC_E
 * 0 - bad address
 * 1 - descriptors full
 * 2 - buffer full
 * 3 - descriptor parity error
 * 4 - pointer parity error
 * CPSS_PP_IPVX_LPM_DATA_ERROR_E
 * Only for ExMxPm XG devices
 * - 0 - IPVX LPM0 Data Error
 * - 1 - IPVX LPM1 Data Error
 * - 2 - IPVX LPM2 Data Error
 * - 3 - IPVX LPM3 Data Error
 * - 4 - IPVX LPM4 Data Error
 * - 5 - IPVX LPM5 Data Error
 * - 6 - IPVX LPM6 Data Error
 * - 7 - IPVX LPM7 Data Error
 * CPSS_PP_SCT_RATE_LIMITER_E
 * - rate limiter
 * CPSS_PP_EXTERNAL_MEMORY_PARITY_ERROR_E
 * Only for ExMxPm devices
 * - 0 - LPM SRAM4 Parity Error
 * - 1 - LPM SRAM3 Parity Error
 * - 2 - LPM SRAM2 Parity Error
 * - 3 - LPM SRAM1 Parity Error
 * - 4 - Control memory Parity Error
 * - 5 - Ingress buffer memory Parity Error
 * - 6 - Egress buffer memory Parity Error
 * CPSS_PP_EXTERNAL_MEMORY_ECC_ERROR_E
 * Only for ExMxPm devices
 * - 0 - LPM SRAM4 ECC Error
 * - 1 - LPM SRAM3 ECC Error
 * - 2 - LPM SRAM2 ECC Error
 * - 3 - LPM SRAM1 ECC Error
 * - 4 - Control memory ECC Error
 * CPSS_PP_STAT_INF_TX_SYNC_FIFO_FULL_E
 * CPSS_PP_STAT_INF_TX_SYNC_FIFO_OVERRUN_E
 * CPSS_PP_STAT_INF_TX_SYNC_FIFO_UNDERRUN_E
 * CPSS_PP_STAT_INF_RX_SYNC_FIFO_FULL_E
 * CPSS_PP_STAT_INF_RX_SYNC_FIFO_OVERRUN_E
 * CPSS_PP_STAT_INF_RX_SYNC_FIFO_UNDERRUN_E
 * Only for ExMxPm devices
 * - 0 - PCS Egress EQ
 * - 1 - PCS Egress DQ
 * - 2 - PCS Ingress DQ
 * CPSS_PP_POLICER_ADDR_OUT_OF_MEMORY_E
 * CPSS_PP_POLICER_DATA_ERR_E
 * ExMxPm devices :
 * 0 - ingerss policer ,
 * 1 - egress policer
 * xcat :
 * 0 - ingerss policer stage 0,
 * 1 - egress policer ,
 * 2 - ingress policer stage 1
 * CPSS_PP_POLICER_IPFIX_WRAP_AROUND_E
 * CPSS_PP_POLICER_IPFIX_ALARM_E
 * CPSS_PP_POLICER_IPFIX_ALARMED_ENTRIES_FIFO_WRAP_AROUND_E
 * xcat :
 * 0 - ingerss policer stage 0,
 * 1 - egress policer ,
 * 2 - ingress policer stage 1
 * CPSS_PP_PCL_LOOKUP_DATA_ERROR_E
 * - ExMxPm :
 * 0 - ingress PCL lookup 00
 * 1 - ingress PCL lookup 01
 * 2 - ingress PCL lookup 10
 * 3 - ingress PCL lookup 11
 * - xcat :
 * 0 - ingress PCL lookup 00
 * 1 - ingress PCL lookup 01
 * 2 - ingress PCL lookup 1
 * CPSS_PP_PCL_LOOKUP_FIFO_FULL_E
 * - ExMxPm :
 * 0 - ingress PCL lookup 0
 * 2 - ingress PCL lookup 1
 * - xcat :
 * 0 - ingress PCL lookup 00
 * 1 - ingress PCL lookup 01
 * 2 - ingress PCL lookup 1
 * CPSS_PP_PCL_CONFIG_TABLE_DATA_ERROR_E
 * - ExMxPm : 0
 * - xcat : 0 - table 0 , 1 - table 1
 * CPSS_PP_TCC_TCAM_ERROR_DETECTED_E
 * CPSS_PP_TCC_TCAM_BIST_FAILED_E
 * - xcat : 0 - ingress PCL , 1 - ipvx
 * CPSS_PP_GTS_GLOBAL_FIFO_FULL_E
 * CPSS_PP_GTS_VALID_TIME_SAMPLE_MESSAGE_E
 * -  lion :
 * (evExtDataPtr) comprise information about direction as following:
 * 0 - ingress , 1 - egress
 * - Bobcat2, Bobk Cetus, Bobk Caelum, Aldrin, AC3X, BobCat3:
 * (evExtDataPtr) comprise information about direction, queue number, type and port number as following:
 * bit 0   : 0 - ingress, 1 - egress
 * bit 1 - 3 : queue number
 * bit 4 - 6 : reserved
 * bit 7   : 1 - per port, 0 - global
 * bit 8 - 17 : port number
 * per port queue example: (evExtDataPtr) = 0x1a83
 * meaning : event on port 0x1a (26) ,per port queue type, queue number 1 and egress direction.
 * global queue example: (evExtDataPtr) = 0x03
 * meaning : event on global queue type, queue number 1 and egress direction.
 * CPSS_PP_OAM_EXCEPTION_KEEPALIVE_AGING_E
 * CPSS_PP_OAM_EXCEPTION_EXCESS_KEEPALIVE_E
 * CPSS_PP_OAM_EXCEPTION_INVALID_KEEPALIVE_E
 * CPSS_PP_OAM_EXCEPTION_RDI_STATUS_E
 * CPSS_PP_OAM_EXCEPTION_TX_PERIOD_E
 * CPSS_PP_OAM_EXCEPTION_MEG_LEVEL_E
 * CPSS_PP_OAM_EXCEPTION_SOURCE_INTERFACE_E
 * CPSS_PP_OAM_ILLEGAL_ENTRY_INDEX_E
 * 0 - ingress , 1 - egress
 * (evExtDataPtr) as device specific event number -
 * CPSS_PP_CRITICAL_HW_ERROR_E - HW event which
 * requires application reference,
 * e.g. soft reset.
 * (evExtDataPtr) as port number and 'specific event' -
 * formula is:
 * (evExtDataPtr) = (port) << 8 + (specific event);
 * for example when (evExtDataPtr) = 0x1a02
 * meaning : event on port 0x1a (26) , specific event = 2
 * CPSS_PP_PORT_EEE_E - IEEE 802.3az Energy Efficient Ethernet (EEE) related.
 * Hold next 'specific events' :
 * 0 --> PCS_RX_PATH_RECEIVED_LPI
 * 1 --> PCS_TX_PATH_RECEIVED_LPI
 * 2 --> MAC_RX_PATH_RECEIVED_LPI
 * (evExtDataPtr) as fabric port number -
 * CPSS_PP_XBAR_RX_FIFO_OVERRUN_CNTR_RL_E
 * CPSS_PP_XBAR_INVALID_TRG_DROP_CNTR_RL_E
 * CPSS_PP_XBAR_SRC_FILTER_DROP_CNTR_RL_E
 * CPSS_PP_XBAR_RX_CELL_CNTR_RL_E
 * CPSS_PP_XBAR_PRIORITY_0_3_TX_DROP_CNTR_RL_E
 * CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XOFF_E
 * CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XON_E
 * CPSS_PP_XBAR_SHP_TX_DROP_CNTR_RL_E
 * CPSS_PP_XBAR_SHP_TX_DROP_CNTR_INC_E
 * CPSS_PP_XBAR_INVALID_ADDR_E
 * CPSS_PP_XBAR_TX_CELL_CNTR_RL_E
 * CPSS_PP_XBAR_TX_CELL_CNTR_INC_E
 * CPSS_PP_HGLINK_PING_RECEIVED_E
 * CPSS_PP_HGLINK_PING_SENT_E
 * CPSS_PP_HGLINK_MAC_TX_OVERRUN_E
 * CPSS_PP_HGLINK_MAC_TX_UNDERRUN_E
 * CPSS_PP_HGLINK_RX_ERR_CNTR_RL_E
 * CPSS_PP_HGLINK_BAD_PCS_TO_MAC_REFORMAT_RX_E
 * CPSS_PP_HGLINK_BAD_HEAD_CELL_RX_E
 * CPSS_PP_HGLINK_BAD_LENGTH_CELL_RX_E
 * CPSS_PP_HGLINK_FC_CELL_RX_INT_E
 * CPSS_PP_HGLINK_FC_CELL_TX_INT_E
 * CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC0_E
 * CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC1_E
 * CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC2_E
 * CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC3_E
 * CPSS_PP_HGLINK_ADDR_OUT_OF_RANGE_E
 * Dragonite events -
 * CPSS_DRAGONITE_PORT_ON_E
 * CPSS_DRAGONITE_PORT_OFF_E
 * CPSS_DRAGONITE_DETECT_FAIL_E
 * CPSS_DRAGONITE_PORT_FAULT_E
 * CPSS_DRAGONITE_PORT_UDL_E
 * CPSS_DRAGONITE_PORT_FAULT_ON_STARTUP_E
 * CPSS_DRAGONITE_PORT_PM_E
 * CPSS_DRAGONITE_POWER_DENIED_E
 * CPSS_DRAGONITE_PORT_SPARE0_E      - reserved
 * CPSS_DRAGONITE_PORT_SPARE1_E      - reserved
 * CPSS_DRAGONITE_OVER_TEMP_E
 * CPSS_DRAGONITE_TEMP_ALARM_E
 * CPSS_DRAGONITE_DEVICE_FAULT_E
 * CPSS_DRAGONITE_DEVICE_SPARE0_E     - reserved
 * CPSS_DRAGONITE_DEVICE_SPARE1_E     - reserved
 * CPSS_DRAGONITE_OVER_CONSUM_E
 * CPSS_DRAGONITE_VMAIN_LOW_AF_E
 * CPSS_DRAGONITE_VMAIN_LOW_AT_E
 * CPSS_DRAGONITE_VMAIN_HIGH_E
 * CPSS_DRAGONITE_SYSTEM_SPARE0_E      - reserved
 * CPSS_DRAGONITE_SYSTEM_SPARE1_E      - reserved
 * CPSS_DRAGONITE_READ_EVENT_E
 * CPSS_DRAGONITE_WRITE_EVENT_E
 * CPSS_DRAGONITE_ERROR_E     - SW event for error in DRAGONITE IRQ mechanism,
 * at this moment I'm aware of one possible scenario
 * Case IMO_bit != 0 means: Kirkwood get signal on
 * DRAGONITE interrupt line, but when it approach to read
 * IRQ_Cause_Out register it sees that Dragonite is
 * still owner of IRQ memory. It's possible only
 * as result of firmware internal bug. Application
 * will decide what should be done in such case.
 * NOTE: about multi-port groups indication.
 * for the next events the (evExtDataPtr) also hold the (portGroupId) indication
 * this is not relevant for the non 'multi-port groups' devices.
 * The formula is : (evExtDataPtr) = index + (portGroupId << 16)
 * for example : CPSS_PP_POLICER_IPFIX_WRAP_AROUND_E with value of
 * (evExtDataPtr) = 0x00020001 --> means : portGroupId = 2 , index = 1 --> egress policer
 * The events are :
 * -- GPP --
 * CPSS_PP_GPP_E
 * -- CNC --
 * CPSS_PP_CNC_WRAPAROUND_BLOCK_E
 * CPSS_PP_CNC_DUMP_FINISHED_E
 * -- Policer --
 * CPSS_PP_POLICER_DATA_ERR_E
 * CPSS_PP_POLICER_IPFIX_WRAP_AROUND_E
 * CPSS_PP_POLICER_IPFIX_ALARM_E
 * CPSS_PP_POLICER_IPFIX_ALARMED_ENTRIES_FIFO_WRAP_AROUND_E
 * Pipe events -
 * (evExtDataPtr) as zero based index:
 * CPSS_PP_PIPE_PCP_E
 * 0 - The CPU address is out of range
 * 1 - Packet type key lookup resulted in a miss event (no entry+mask matched the packet key)
 *
 * CPSS_PP_PHA_E - (PIPE device and sip6 devices)
 *    Multi PHA units support :
 *      Support for 'multi PHA units' (we have one per 'port group') add the
 *          <portGroupId> as : (portGroupId) << 16
 *      APPLICABLE DEVICES: Falcon
 *
 * 0 - An error from a register file that there is host access to an unmapped address.
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 1 - A single ECC error is detected in the packet header. This is a correctable error.
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 2 - A double ECC error is detected in the packet header. This is an irrecoverable error.
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 3 - The host tries to access an unmapped address in the PPA address space.
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 4/5/6/7 - An error from a PPG <%n> register file that the host accesses an unmapped address.
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 8 - The host accesses an unmapped address in the PPN memory map.
 * The following formula describes extended data encoding: 8 + 0 + n where n (0..31) represents PPN
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 40 - The core accesses an unmapped address in the PPN memory map.
 * The following formula describes extended data encoding: 8 + 32 + n where n (0..31) represents PPN
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 72 - The prefetch buffer accesses an address within 32 bytes of IMEM end.
 * The following formula describes extended data encoding: 8 + 64 + n where n (0..31) represents PPN
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 104 - The PPN requests a doorbell interrupt from the host or CM3.
 * The following formula describes extended data encoding: 8 + 96 + n where n (0..31) represents PPN
 *  APPLICABLE DEVICES: PIPE , Falcon
 * 512 - PHA Table Access Overlap Error
 *  APPLICABLE DEVICES: Falcon
 * 513 - Header Size Violation
 *  APPLICABLE DEVICES: Falcon
 * 514 - PPA Clock Down Violation
 *  APPLICABLE DEVICES: Falcon
 * 515/516/517(/518) - PPG Table Access Overlap Error (per PPG)
 *  APPLICABLE DEVICES: Falcon
 *
 * -- TAI --
 * CPSS_PP_PTP_TAI_INCOMING_TRIGGER_E
 * 0 - TAI (Caelum, Aldrin) or TAI 0 (for devices with multiple TAI, e.g. Bobcat3, Aldrin2)
 * 1 - TAI 1 (for devices with multiple TAI, e.g. Bobcat3, Aldrin2)
 * CPSS_PP_PTP_TAI_GENERATION_E
 * 0 - TAI (Caelum, Aldrin) or TAI 0 (for devices with multiple TAI, e.g. Bobcat3, Aldrin2)
 * 1 - TAI 1 (for devices with multiple TAI, e.g. Bobcat3, Aldrin2)
*/]]>   </Comment>
   <Value str="CPSS_PP_UNI_EV_MIN_E"/>
   <Value str="CPSS_PP_SLV_WRITE_ERR_E"/>
   <Value str="CPSS_PP_MAS_WRITE_ERR_E"/>
   <Value str="CPSS_PP_ADDR_ERR_E"/>
   <Value str="CPSS_PP_MAS_ABORT_E"/>
   <Value str="CPSS_PP_TARGET_ABORT_E"/>
   <Value str="CPSS_PP_SLV_READ_ERR_E"/>
   <Value str="CPSS_PP_MAS_READ_ERR_E"/>
   <Value str="CPSS_PP_RETRY_CNTR_E"/>
   <Value str="CPSS_PP_MISC_TWSI_TIME_OUT_E"/>
   <Value str="CPSS_PP_MISC_TWSI_STATUS_E"/>
   <Value str="CPSS_PP_MISC_ILLEGAL_ADDR_E"/>
   <Value str="CPSS_PP_MISC_CPU_PORT_RX_OVERRUN_E"/>
   <Value str="CPSS_PP_MISC_CPU_PORT_TX_OVERRUN_E"/>
   <Value str="CPSS_PP_MISC_TX_CRC_PORT_E"/>
   <Value str="CPSS_PP_MISC_C2C_W_FAR_END_UP_E"/>
   <Value str="CPSS_PP_MISC_C2C_N_FAR_END_UP_E"/>
   <Value str="CPSS_PP_MISC_C2C_DATA_ERR_E"/>
   <Value str="CPSS_PP_MISC_MSG_TIME_OUT_E"/>
   <Value str="CPSS_PP_MISC_UPDATED_STAT_E"/>
   <Value str="CPSS_PP_GPP_E"/>
   <Value str="CPSS_PP_MISC_UPLINK_W_ECC_ON_DATA_E"/>
   <Value str="CPSS_PP_MISC_UPLINK_W_ECC_ON_HEADER_E"/>
   <Value str="CPSS_PP_MISC_UPLINK_N_ECC_ON_DATA_E"/>
   <Value str="CPSS_PP_MISC_UPLINK_N_ECC_ON_HEADER_E"/>
   <Value str="CPSS_PP_MISC_PEX_ADDR_UNMAPPED_E"/>
   <Value str="CPSS_PP_MISC_GENXS_READ_DMA_DONE_E"/>
   <Value str="CPSS_PP_BM_EMPTY_CLEAR_E"/>
   <Value str="CPSS_PP_BM_EMPTY_INC_E"/>
   <Value str="CPSS_PP_BM_AGED_PACKET_E"/>
   <Value str="CPSS_PP_BM_MAX_BUFF_REACHED_E"/>
   <Value str="CPSS_PP_BM_PORT_RX_BUFFERS_CNT_UNDERRUN_E"/>
   <Value str="CPSS_PP_BM_PORT_RX_BUFFERS_CNT_OVERRUN_E"/>
   <Value str="CPSS_PP_BM_INVALID_ADDRESS_E"/>
   <Value str="CPSS_PP_BM_WRONG_SRC_PORT_E"/>
   <Value str="CPSS_PP_BM_MC_INC_OVERFLOW_E"/>
   <Value str="CPSS_PP_BM_MC_INC_UNDERRUN_E"/>
   <Value str="CPSS_PP_BM_TQ_PARITY_ERROR_PORT_E"/>
   <Value str="CPSS_PP_BM_RX_MEM_READ_ECC_ERROR_E"/>
   <Value str="CPSS_PP_BM_VLT_ECC_ERR_E"/>
   <Value str="CPSS_PP_BM_MISC_E"/>
   <Value str="CPSS_PP_BM_TRIGGER_AGING_DONE_E"/>
   <Value str="CPSS_PP_BM_PORT_RX_FULL_E"/>
   <Value str="CPSS_PP_BM_ALL_GIGA_PORTS_BUFF_LIMIT_REACHED_E"/>
   <Value str="CPSS_PP_BM_ALL_HG_STACK_PORTS_BUFF_LIMIT_REACHED_E"/>
   <Value str="CPSS_PP_PORT_LINK_STATUS_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_AN_COMPLETED_E"/>
   <Value str="CPSS_PP_PORT_RX_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_PORT_TX_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_PORT_TX_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_PORT_TX_UNDERRUN_E"/>
   <Value str="CPSS_PP_PORT_ADDRESS_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_PORT_PRBS_ERROR_E"/>
   <Value str="CPSS_PP_PORT_SYNC_STATUS_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_TX_CRC_ERROR_E"/>
   <Value str="CPSS_PP_PORT_ILLEGAL_SEQUENCE_E"/>
   <Value str="CPSS_PP_PORT_IPG_TOO_SMALL_E"/>
   <Value str="CPSS_PP_PORT_FAULT_TYPE_CHANGE_E"/>
   <Value str="CPSS_PP_PORT_FC_STATUS_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_CONSECUTIVE_TERM_CODE_E"/>
   <Value str="CPSS_PP_INTERNAL_PHY_E"/>
   <Value str="CPSS_PP_PORT_NO_BUFF_PACKET_DROP_E"/>
   <Value str="CPSS_PP_PORT_XAUI_PHY_E"/>
   <Value str="CPSS_PP_PORT_COUNT_COPY_DONE_E"/>
   <Value str="CPSS_PP_PORT_COUNT_EXPIRED_E"/>
   <Value str="CPSS_PP_GOP_ADDRESS_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_GOP_COUNT_EXPIRED_E"/>
   <Value str="CPSS_PP_GOP_COUNT_COPY_DONE_E"/>
   <Value str="CPSS_PP_GOP_GIG_BAD_FC_PACKET_GOOD_CRC_E"/>
   <Value str="CPSS_PP_GOP_XG_BAD_FC_PACKET_GOOD_CRC_E"/>
   <Value str="CPSS_PP_XSMI_WRITE_DONE_E"/>
   <Value str="CPSS_PP_TQ_WATCHDOG_EX_PORT_E"/>
   <Value str="CPSS_PP_TQ_TXQ2_FLUSH_PORT_E"/>
   <Value str="CPSS_PP_TQ_TXQ2_MG_FLUSH_E"/>
   <Value str="CPSS_PP_TQ_ONE_ECC_ERROR_E"/>
   <Value str="CPSS_PP_TQ_TWO_ECC_ERROR_E"/>
   <Value str="CPSS_PP_TQ_MG_READ_ERR_E"/>
   <Value str="CPSS_PP_TQ_HOL_REACHED_PORT_E"/>
   <Value str="CPSS_PP_TQ_RED_REACHED_PORT_E"/>
   <Value str="CPSS_PP_TQ_TOTAL_DESC_UNDERFLOW_E"/>
   <Value str="CPSS_PP_TQ_TOTAL_DESC_OVERFLOW_E"/>
   <Value str="CPSS_PP_TQ_TOTAL_BUFF_UNDERFLOW_E"/>
   <Value str="CPSS_PP_TQ_SNIFF_DESC_DROP_E"/>
   <Value str="CPSS_PP_TQ_MLL_PARITY_ERR_E"/>
   <Value str="CPSS_PP_TQ_MC_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_TQ_MISC_E"/>
   <Value str="CPSS_PP_TQ_PORT_DESC_FULL_E"/>
   <Value str="CPSS_PP_TQ_MC_DESC_FULL_E"/>
   <Value str="CPSS_PP_TQ_GIGA_FIFO_FULL_E"/>
   <Value str="CPSS_PP_TQ_XG_MC_FIFO_FULL_E"/>
   <Value str="CPSS_PP_TQ_PORT_FULL_XG_E"/>
   <Value str="CPSS_PP_EB_AUQ_FULL_E"/>
   <Value str="CPSS_PP_EB_AUQ_PENDING_E"/>
   <Value str="CPSS_PP_EB_AUQ_OVER_E"/>
   <Value str="CPSS_PP_EB_AUQ_ALMOST_FULL_E"/>
   <Value str="CPSS_PP_EB_FUQ_FULL_E"/>
   <Value str="CPSS_PP_EB_FUQ_PENDING_E"/>
   <Value str="CPSS_PP_EB_NA_FIFO_FULL_E"/>
   <Value str="CPSS_PP_EB_MG_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_EB_VLAN_TBL_OP_DONE_E"/>
   <Value str="CPSS_PP_EB_SECURITY_BREACH_UPDATE_E"/>
   <Value str="CPSS_PP_EB_VLAN_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_NA_NOT_LEARNED_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_SA_MSG_DISCARDED_E"/>
   <Value str="CPSS_PP_EB_QA_MSG_DISCARDED_E"/>
   <Value str="CPSS_PP_EB_SA_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_DA_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_DA_SA_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_NA_ON_LOCKED_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_MAC_RANGE_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_INVALID_SA_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_VLAN_NOT_VALID_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_VLAN_NOT_MEMBER_DROP_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_VLAN_RANGE_DROP_SECURITY_BREACH_E"/>
   <Value str="CPSS_PP_EB_INGRESS_FILTER_PCKT_E"/>
   <Value str="CPSS_PP_MAC_TBL_READ_ECC_ERR_E"/>
   <Value str="CPSS_PP_MAC_SFLOW_E"/>
   <Value str="CPSS_PP_MAC_NUM_OF_HOP_EXP_E"/>
   <Value str="CPSS_PP_MAC_NA_LEARNED_E"/>
   <Value str="CPSS_PP_MAC_NA_NOT_LEARNED_E"/>
   <Value str="CPSS_PP_MAC_AGE_VIA_TRIGGER_ENDED_E"/>
   <Value str="CPSS_PP_MAC_MG_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_MAC_UPDATE_FROM_CPU_DONE_E"/>
   <Value str="CPSS_PP_MAC_MESSAGE_TO_CPU_READY_E"/>
   <Value str="CPSS_PP_MAC_NA_SELF_LEARNED_E"/>
   <Value str="CPSS_PP_MAC_NA_FROM_CPU_LEARNED_E"/>
   <Value str="CPSS_PP_MAC_NA_FROM_CPU_DROPPED_E"/>
   <Value str="CPSS_PP_MAC_AGED_OUT_E"/>
   <Value str="CPSS_PP_MAC_FIFO_2_CPU_EXCEEDED_E"/>
   <Value str="CPSS_PP_MAC_1ECC_ERRORS_E"/>
   <Value str="CPSS_PP_MAC_2ECC_ERRORS_E"/>
   <Value str="CPSS_PP_MAC_TBL_OP_DONE_E"/>
   <Value str="CPSS_PP_MAC_PACKET_RSSI_LESS_THAN_THRESH_E"/>
   <Value str="CPSS_PP_MAC_UPD_AVG_RSSI_LESS_THAN_THRESH_E"/>
   <Value str="CPSS_PP_MAC_STG_TBL_DATA_ERROR_E"/>
   <Value str="CPSS_PP_MAC_VIDX_TBL_DATA_ERROR_E"/>
   <Value str="CPSS_PP_LX_LB_ERR_E"/>
   <Value str="CPSS_PP_LX_CTRL_MEM_2_RF_ERR_E"/>
   <Value str="CPSS_PP_LX_TCB_CNTR_E"/>
   <Value str="CPSS_PP_LX_IPV4_MC_ERR_E"/>
   <Value str="CPSS_PP_LX_IPV4_LPM_ERR_E"/>
   <Value str="CPSS_PP_LX_IPV4_ROUTE_ERR_E"/>
   <Value str="CPSS_PP_LX_IPV4_CNTR_E"/>
   <Value str="CPSS_PP_LX_L3_L7_ERR_ADDR_E"/>
   <Value str="CPSS_PP_LX_TRUNK_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_LX_IPV4_REFRESH_AGE_OVERRUN_E"/>
   <Value str="CPSS_PP_LX_PCE_PAR_ERR_E"/>
   <Value str="CPSS_PP_LX_TC_2_RF_CNTR_ALRM_E"/>
   <Value str="CPSS_PP_LX_TC_2_RF_PLC_ALRM_E"/>
   <Value str="CPSS_PP_LX_TC_2_RF_TBL_ERR_E"/>
   <Value str="CPSS_PP_LX_CLASSIFIER_HASH_PAR_ERR_E"/>
   <Value str="CPSS_PP_LX_FLOW_LKUP_PAR_ERR_E"/>
   <Value str="CPSS_PP_LX_FLOW_KEY_TBL_PAR_ERR_E"/>
   <Value str="CPSS_PP_LX_MPLS_ILM_TBL_PAR_ERR_E"/>
   <Value str="CPSS_PP_LX_MPLS_CNTR_E"/>
   <Value str="CPSS_PP_EB_TCC_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE0_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE1_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE2_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE3_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE4_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE5_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE6_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE7_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE0_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE1_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE2_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE3_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE4_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE5_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE6_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE7_E"/>
   <Value str="CPSS_PP_RX_CNTR_OVERFLOW_E"/>
   <Value str="CPSS_PP_TX_BUFFER_QUEUE_E"/>
   <Value str="CPSS_PP_TX_ERR_QUEUE_E"/>
   <Value str="CPSS_PP_TX_END_E"/>
   <Value str="CPSS_PP_PORT_LANE_PRBS_ERROR_E"/>
   <Value str="CPSS_PP_PORT_LANE_DISPARITY_ERROR_E"/>
   <Value str="CPSS_PP_PORT_LANE_SYMBOL_ERROR_E"/>
   <Value str="CPSS_PP_PORT_LANE_CJR_PAT_ERROR_E"/>
   <Value str="CPSS_PP_PORT_LANE_SIGNAL_DETECT_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_LANE_SYNC_STATUS_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_LANE_DETECTED_IIAII_E"/>
   <Value str="CPSS_PP_PORT_PCS_LINK_STATUS_CHANGED_E"/>
   <Value str="CPSS_PP_PORT_PCS_DESKEW_TIMEOUT_E"/>
   <Value str="CPSS_PP_PORT_PCS_DETECTED_COLUMN_IIAII_E"/>
   <Value str="CPSS_PP_PORT_PCS_DESKEW_ERROR_E"/>
   <Value str="CPSS_PP_PORT_PCS_PPM_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_PORT_PCS_PPM_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_PORT_PCS_ALIGN_LOCK_LOST_E"/>
   <Value str="CPSS_PP_BM_EGRESS_EMPTY_CLEAR_E"/>
   <Value str="CPSS_PP_BM_EGRESS_EMPTY_INC_E"/>
   <Value str="CPSS_PP_BM_EGRESS_AGED_PACKET_E"/>
   <Value str="CPSS_PP_BM_EGRESS_MAX_BUFF_REACHED_E"/>
   <Value str="CPSS_PP_BM_EGRESS_PORT_RX_BUFFERS_CNT_UNDERRUN_E"/>
   <Value str="CPSS_PP_BM_EGRESS_PORT_RX_BUFFERS_CNT_OVERRUN_E"/>
   <Value str="CPSS_PP_BM_EGRESS_INVALID_ADDRESS_E"/>
   <Value str="CPSS_PP_BM_EGRESS_WRONG_SRC_PORT_E"/>
   <Value str="CPSS_PP_BM_EGRESS_MC_INC_OVERFLOW_E"/>
   <Value str="CPSS_PP_BM_EGRESS_MC_INC_UNDERRUN_E"/>
   <Value str="CPSS_PP_BM_EGRESS_TQ_PARITY_ERROR_PORT_E"/>
   <Value str="CPSS_PP_BM_EGRESS_RX_MEM_READ_ECC_ERROR_E"/>
   <Value str="CPSS_PP_BM_EGRESS_VLT_ECC_ERR_E"/>
   <Value str="CPSS_PP_BM_EGRESS_MISC_E"/>
   <Value str="CPSS_PP_PEX_DL_DOWN_TX_ACC_ERR_E"/>
   <Value str="CPSS_PP_PEX_MASTER_DISABLED_E"/>
   <Value str="CPSS_PP_PEX_ERROR_WR_TO_REG_E"/>
   <Value str="CPSS_PP_PEX_HIT_DEFAULT_WIN_ERR_E"/>
   <Value str="CPSS_PP_PEX_COR_ERROR_DET_E"/>
   <Value str="CPSS_PP_PEX_NON_FATAL_ERROR_DET_E"/>
   <Value str="CPSS_PP_PEX_FATAL_ERROR_DET_E"/>
   <Value str="CPSS_PP_PEX_DSTATE_CHANGED_E"/>
   <Value str="CPSS_PP_PEX_BIST_E"/>
   <Value str="CPSS_PP_PEX_RCV_ERROR_FATAL_E"/>
   <Value str="CPSS_PP_PEX_RCV_ERROR_NON_FATAL_E"/>
   <Value str="CPSS_PP_PEX_RCV_ERROR_COR_E"/>
   <Value str="CPSS_PP_PEX_RCV_CRS_E"/>
   <Value str="CPSS_PP_PEX_PEX_SLAVE_HOT_RESET_E"/>
   <Value str="CPSS_PP_PEX_PEX_SLAVE_DISABLE_LINK_E"/>
   <Value str="CPSS_PP_PEX_PEX_SLAVE_LOOPBACK_E"/>
   <Value str="CPSS_PP_PEX_PEX_LINK_FAIL_E"/>
   <Value str="CPSS_PP_PEX_RCV_A_E"/>
   <Value str="CPSS_PP_PEX_RCV_B_E"/>
   <Value str="CPSS_PP_PEX_RCV_C_E"/>
   <Value str="CPSS_PP_PEX_RCV_D_E"/>
   <Value str="CPSS_PP_BUF_MEM_MAC_ERROR_E"/>
   <Value str="CPSS_PP_BUF_MEM_ONE_ECC_ERROR_E"/>
   <Value str="CPSS_PP_BUF_MEM_TWO_OR_MORE_ECC_ERRORS_E"/>
   <Value str="CPSS_PP_POLICER_ADDR_OUT_OF_MEMORY_E"/>
   <Value str="CPSS_PP_POLICER_DATA_ERR_E"/>
   <Value str="CPSS_PP_POLICER_IPFIX_WRAP_AROUND_E"/>
   <Value str="CPSS_PP_POLICER_IPFIX_ALARM_E"/>
   <Value str="CPSS_PP_POLICER_IPFIX_ALARMED_ENTRIES_FIFO_WRAP_AROUND_E"/>
   <Value str="CPSS_PP_PCL_TCC_ECC_ERR_E"/>
   <Value str="CPSS_PP_PCL_MG_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_PCL_LOOKUP_DATA_ERROR_E"/>
   <Value str="CPSS_PP_PCL_ACTION_ERROR_DETECTED_E"/>
   <Value str="CPSS_PP_PCL_MG_LOOKUP_RESULTS_READY_E"/>
   <Value str="CPSS_PP_PCL_INLIF_TABLE_DATA_ERROR_E"/>
   <Value str="CPSS_PP_PCL_CONFIG_TABLE_DATA_ERROR_E"/>
   <Value str="CPSS_PP_PCL_LOOKUP_FIFO_FULL_E"/>
   <Value str="CPSS_PP_CNC_WRAPAROUND_BLOCK_E"/>
   <Value str="CPSS_PP_CNC_DUMP_FINISHED_E"/>
   <Value str="CPSS_PP_SCT_RATE_LIMITER_E"/>
   <Value str="CPSS_PP_EGRESS_SFLOW_E"/>
   <Value str="CPSS_PP_INGRESS_SFLOW_SAMPLED_CNTR_E"/>
   <Value str="CPSS_PP_EGRESS_SFLOW_SAMPLED_CNTR_E"/>
   <Value str="CPSS_PP_TTI_CPU_ADDRESS_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_TTI_ACCESS_DATA_ERROR_E"/>
   <Value str="CPSS_PP_DIT_MC_DIT_TTL_TRHOLD_EXCEED_E"/>
   <Value str="CPSS_PP_DIT_UC_DIT_TTL_TRHOLD_EXCEED_E"/>
   <Value str="CPSS_PP_DIT_DATA_ERROR_E"/>
   <Value str="CPSS_PP_DIT_MC0_PARITY_ERROR_E"/>
   <Value str="CPSS_PP_DIT_INT_TABLE_ECC_ERROR_CNTR_E"/>
   <Value str="CPSS_PP_DIT_MC0_IP_TV_PARITY_ERROR_CNTR_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_INT_SUM_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_IO_ERR_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_RX_PARITY_ERR_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_MG_CMD_EXE_DONE_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_NEW_DATA_IN_MAILBOX_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_MG_WRONG_EXP_RES_LEN_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_RSP_IDQ_EMPTY_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_PHASE_ERROR_E"/>
   <Value str="CPSS_PP_EXTERNAL_TCAM_TRAINING_SEQUENCE_DONE_E"/>
   <Value str="CPSS_PP_EXTERNAL_MEMORY_PARITY_ERROR_E"/>
   <Value str="CPSS_PP_EXTERNAL_MEMORY_ECC_ERROR_E"/>
   <Value str="CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_PARITY_ERR_LOW_E"/>
   <Value str="CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_PARITY_ERR_HIGH_E"/>
   <Value str="CPSS_PP_EXTERNAL_MEMORY_RLDRAM_UNIT_MG_CMD_DONE_E"/>
   <Value str="CPSS_PP_VOQ_DROP_DEV_EN_E"/>
   <Value str="CPSS_PP_VOQ_GLOBAL_DESC_FULL_E"/>
   <Value str="CPSS_PP_VOQ_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_VOQ_ECC_ERR_E"/>
   <Value str="CPSS_PP_VOQ_GLOBAL_BUF_FULL_E"/>
   <Value str="CPSS_PP_XBAR_INVALID_TRG_DROP_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_SRC_FILTER_DROP_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_RX_CELL_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_PRIORITY_0_3_TX_DROP_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_SHP_TX_DROP_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_RX_FIFO_OVERRUN_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_RX_FIFO_OVERRUN_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_INVALID_TRG_DROP_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_SRC_FILTER_DROP_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_RX_CELL_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_PRIORITY_0_3_TX_DROP_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_SHP_TX_DROP_CNTR_INC_E"/>
   <Value str="CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XOFF_E"/>
   <Value str="CPSS_PP_XBAR_PRIORITY_0_3_TX_FC_CHANGED_TO_XON_E"/>
   <Value str="CPSS_PP_XBAR_INVALID_ADDR_E"/>
   <Value str="CPSS_PP_XBAR_TX_CELL_CNTR_RL_E"/>
   <Value str="CPSS_PP_XBAR_TX_CELL_CNTR_INC_E"/>
   <Value str="CPSS_PP_CRX_MAIL_ARRIVED_E"/>
   <Value str="CPSS_PP_CRX_READ_EMPTY_CPU_E"/>
   <Value str="CPSS_PP_CRX_DATA_DROP_E"/>
   <Value str="CPSS_PP_CRX_CPU_DROP_E"/>
   <Value str="CPSS_PP_CRX_AGED_OUT_CONTEXT_E"/>
   <Value str="CPSS_PP_CRX_CRC_DROP_E"/>
   <Value str="CPSS_PP_CRX_PACKET_LENGTH_DROP_E"/>
   <Value str="CPSS_PP_CRX_MAX_BUFFERS_DROP_E"/>
   <Value str="CPSS_PP_CRX_BAD_CONTEXT_DROP_E"/>
   <Value str="CPSS_PP_CRX_NO_BUFFERS_DROP_E"/>
   <Value str="CPSS_PP_CRX_MULTICAST_CONGESTION_DROP_E"/>
   <Value str="CPSS_PP_CRX_DATA_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_CRX_DATA_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_CRX_CPU_UNDERRUN_E"/>
   <Value str="CPSS_PP_CRX_CPU_OVERRUN_E"/>
   <Value str="CPSS_PP_CRX_E2E_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_CRX_E2E_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_CRX_UNKNOWN_CELL_TYPE_E"/>
   <Value str="CPSS_PP_CRX_COUNTER_BAD_ADDR_E"/>
   <Value str="CPSS_PP_CRX_PSM_BAD_ADDR_E"/>
   <Value str="CPSS_PP_TXD_SEG_FIFO_PARITY_ERR_E"/>
   <Value str="CPSS_PP_TXD_CPU_MAIL_SENT_E"/>
   <Value str="CPSS_PP_TXD_SEG_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_TXD_WRONG_CH_TO_FABRIC_DIST_E"/>
   <Value str="CPSS_PP_IPVX_DATA_ERROR_E"/>
   <Value str="CPSS_PP_IPVX_ADDRESS_OUT_OF_MEMORY_E"/>
   <Value str="CPSS_PP_IPVX_LPM_DATA_ERROR_E"/>
   <Value str="CPSS_PP_STAT_INF_TX_SYNC_FIFO_FULL_E"/>
   <Value str="CPSS_PP_STAT_INF_TX_SYNC_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_STAT_INF_TX_SYNC_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_STAT_INF_RX_SYNC_FIFO_FULL_E"/>
   <Value str="CPSS_PP_STAT_INF_RX_SYNC_FIFO_OVERRUN_E"/>
   <Value str="CPSS_PP_STAT_INF_RX_SYNC_FIFO_UNDERRUN_E"/>
   <Value str="CPSS_PP_HGLINK_PING_RECEIVED_E"/>
   <Value str="CPSS_PP_HGLINK_PING_SENT_E"/>
   <Value str="CPSS_PP_HGLINK_MAC_TX_OVERRUN_E"/>
   <Value str="CPSS_PP_HGLINK_MAC_TX_UNDERRUN_E"/>
   <Value str="CPSS_PP_HGLINK_RX_ERR_CNTR_RL_E"/>
   <Value str="CPSS_PP_HGLINK_BAD_PCS_TO_MAC_REFORMAT_RX_E"/>
   <Value str="CPSS_PP_HGLINK_BAD_HEAD_CELL_RX_E"/>
   <Value str="CPSS_PP_HGLINK_BAD_LENGTH_CELL_RX_E"/>
   <Value str="CPSS_PP_HGLINK_FC_CELL_RX_INT_E"/>
   <Value str="CPSS_PP_HGLINK_FC_CELL_TX_INT_E"/>
   <Value str="CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC0_E"/>
   <Value str="CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC1_E"/>
   <Value str="CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC2_E"/>
   <Value str="CPSS_PP_HGLINK_FC_XOFF_DEAD_LOCK_TC3_E"/>
   <Value str="CPSS_PP_HGLINK_ADDR_OUT_OF_RANGE_E"/>
   <Value str="CPSS_PP_TCC_TCAM_ERROR_DETECTED_E"/>
   <Value str="CPSS_PP_TCC_TCAM_BIST_FAILED_E"/>
   <Value str="CPSS_PP_BCN_COUNTER_WRAP_AROUND_ERR_E"/>
   <Value str="CPSS_PP_GTS_GLOBAL_FIFO_FULL_E"/>
   <Value str="CPSS_PP_GTS_VALID_TIME_SAMPLE_MESSAGE_E"/>
   <Value str="CPSS_PP_CRITICAL_HW_ERROR_E"/>
   <Value str="CPSS_PP_PORT_PRBS_ERROR_QSGMII_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_1_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_2_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_3_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_4_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_5_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_6_E"/>
   <Value str="CPSS_PP_PORT_802_3_AP_CORE_7_E"/>
   <Value str="CPSS_PP_PORT_MMPCS_SIGNAL_DETECT_CHANGE_E"/>
   <Value str="CPSS_PP_DATA_INTEGRITY_ERROR_E"/>
   <Value str="CPSS_PP_MAC_BANK_LEARN_COUNTERS_OVERFLOW_E"/>
   <Value str="CPSS_PP_PORT_EEE_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_KEEPALIVE_AGING_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_EXCESS_KEEPALIVE_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_INVALID_KEEPALIVE_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_RDI_STATUS_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_TX_PERIOD_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_MEG_LEVEL_E"/>
   <Value str="CPSS_PP_OAM_EXCEPTION_SOURCE_INTERFACE_E"/>
   <Value str="CPSS_PP_OAM_ILLEGAL_ENTRY_INDEX_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE8_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE9_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE10_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE11_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE12_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE13_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE14_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE15_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE8_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE9_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE10_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE11_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE12_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE13_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE14_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE15_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE16_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE17_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE18_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE19_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE20_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE21_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE22_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE23_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE16_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE17_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE18_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE19_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE20_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE21_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE22_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE23_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE24_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE25_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE26_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE27_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE28_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE29_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE30_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE31_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE24_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE25_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE26_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE27_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE28_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE29_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE30_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE31_E"/>
   <Value str="CPSS_PP_PIPE_PCP_E"/>
   <Value str="CPSS_PP_PHA_E"/>
   <Value str="CPSS_PP_PORT_PCS_GB_LOCK_SYNC_CHANGE_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE32_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE33_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE34_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE35_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE36_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE37_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE38_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE39_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE40_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE41_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE42_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE43_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE44_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE45_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE46_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE47_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE48_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE49_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE50_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE51_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE52_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE53_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE54_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE55_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE56_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE57_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE58_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE59_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE60_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE61_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE62_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE63_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE64_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE65_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE66_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE67_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE68_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE69_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE70_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE71_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE72_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE73_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE74_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE75_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE76_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE77_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE78_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE79_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE80_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE81_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE82_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE83_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE84_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE85_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE86_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE87_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE88_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE89_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE90_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE91_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE92_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE93_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE94_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE95_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE96_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE97_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE98_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE99_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE100_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE101_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE102_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE103_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE104_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE105_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE106_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE107_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE108_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE109_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE110_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE111_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE112_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE113_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE114_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE115_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE116_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE117_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE118_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE119_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE120_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE121_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE122_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE123_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE124_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE125_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE126_E"/>
   <Value str="CPSS_PP_RX_BUFFER_QUEUE127_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE32_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE33_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE34_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE35_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE36_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE37_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE38_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE39_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE40_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE41_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE42_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE43_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE44_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE45_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE46_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE47_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE48_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE49_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE50_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE51_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE52_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE53_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE54_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE55_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE56_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE57_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE58_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE59_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE60_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE61_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE62_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE63_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE64_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE65_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE66_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE67_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE68_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE69_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE70_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE71_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE72_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE73_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE74_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE75_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE76_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE77_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE78_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE79_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE80_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE81_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE82_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE83_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE84_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE85_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE86_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE87_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE88_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE89_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE90_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE91_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE92_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE93_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE94_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE95_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE96_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE97_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE98_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE99_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE100_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE101_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE102_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE103_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE104_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE105_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE106_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE107_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE108_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE109_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE110_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE111_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE112_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE113_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE114_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE115_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE116_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE117_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE118_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE119_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE120_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE121_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE122_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE123_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE124_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE125_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE126_E"/>
   <Value str="CPSS_PP_RX_ERR_QUEUE127_E"/>
   <Value str="CPSS_PP_PTP_TAI_INCOMING_TRIGGER_E"/>
   <Value str="CPSS_PP_PTP_TAI_GENERATION_E"/>
   <Value str="CPSS_PP_UNI_EV_DUMMY_MAX_E"/>
   <Value str="CPSS_PP_UNI_EV_MAX_E"/>
   <Value str="CPSS_SRVCPU_IPC_E"/>
   <Value str="CPSS_SRVCPU_PORT_LINK_STATUS_CHANGED_E"/>
   <Value str="CPSS_SRVCPU_PORT_802_3_AP_E"/>
   <Value str="CPSS_SRVCPU_MAX_E"/>
   <Value str="CPSS_XBAR_UNI_EV_MIN_E"/>
   <Value str="CPSS_XBAR_HG_LANE_SYNCH_CHANGE_E"/>
   <Value str="CPSS_XBAR_HG_LANE_COMMA_ALIGN_CHANGE_E"/>
   <Value str="CPSS_XBAR_GPORT_INVALID_TRG_DROP_CNT_INC_E"/>
   <Value str="CPSS_XBAR_GPORT_DIAG_CELL_RX_CNTR_INC_E"/>
   <Value str="CPSS_XBAR_MISC_E"/>
   <Value str="CPSS_XBAR_HG_PING_RECEIVED_E"/>
   <Value str="CPSS_XBAR_HOST_RX_FIFO_PEND_E"/>
   <Value str="CPSS_XBAR_HOST_SEND_CELL_E"/>
   <Value str="CPSS_XBAR_HG_ALIGNMENT_LOCK_CHANGE_E"/>
   <Value str="CPSS_XBAR_HG_PING_E"/>
   <Value str="CPSS_XBAR_SD_INV_ADDR_E"/>
   <Value str="CPSS_XBAR_SXBAR_INV_ADDR_E"/>
   <Value str="CPSS_XBAR_S_INV_ADDR_E"/>
   <Value str="CPSS_XBAR_G_INV_ADDR_E"/>
   <Value str="CPSS_XBAR_MC_INV_ADDR_E"/>
   <Value str="CPSS_XBAR_UNI_EV_DUMMY_MAX_E"/>
   <Value str="CPSS_XBAR_UNI_EV_MAX_E"/>
   <Value str="CPSS_FA_UNI_EV_MIN_E"/>
   <Value str="CPSS_FA_UC_PRIO_BUF_FULL_E"/>
   <Value str="CPSS_FA_MC_PRIO_BUF_FULL_E"/>
   <Value str="CPSS_FA_UC_RX_BUF_FULL_E"/>
   <Value str="CPSS_FA_MC_RX_BUF_FULL_E"/>
   <Value str="CPSS_FA_WD_FPORT_GRP_E"/>
   <Value str="CPSS_FA_MC_WD_EXP_E"/>
   <Value str="CPSS_FA_GLBL_DESC_FULL_E"/>
   <Value str="CPSS_FA_MAC_UPD_THRS_E"/>
   <Value str="CPSS_FA_DROP_DEV_EN_E"/>
   <Value str="CPSS_FA_MISC_I2C_TIMEOUT_E"/>
   <Value str="CPSS_FA_MISC_STATUS_E"/>
   <Value str="CPSS_FA_UNI_EV_DUMMY_MAX_E"/>
   <Value str="CPSS_FA_UNI_EV_MAX_E"/>
   <Value str="CPSS_DRAGONITE_UNI_EV_MIN_E"/>
   <Value str="CPSS_DRAGONITE_PORT_ON_E"/>
   <Value str="CPSS_DRAGONITE_PORT_OFF_E"/>
   <Value str="CPSS_DRAGONITE_DETECT_FAIL_E"/>
   <Value str="CPSS_DRAGONITE_PORT_FAULT_E"/>
   <Value str="CPSS_DRAGONITE_PORT_UDL_E"/>
   <Value str="CPSS_DRAGONITE_PORT_FAULT_ON_STARTUP_E"/>
   <Value str="CPSS_DRAGONITE_PORT_PM_E"/>
   <Value str="CPSS_DRAGONITE_POWER_DENIED_E"/>
   <Value str="CPSS_DRAGONITE_OVER_TEMP_E"/>
   <Value str="CPSS_DRAGONITE_TEMP_ALARM_E"/>
   <Value str="CPSS_DRAGONITE_DEVICE_FAULT_E"/>
   <Value str="CPSS_DRAGONITE_OVER_CONSUM_E"/>
   <Value str="CPSS_DRAGONITE_VMAIN_LOW_AF_E"/>
   <Value str="CPSS_DRAGONITE_VMAIN_LOW_AT_E"/>
   <Value str="CPSS_DRAGONITE_VMAIN_HIGH_E"/>
   <Value str="CPSS_DRAGONITE_READ_EVENT_E"/>
   <Value str="CPSS_DRAGONITE_WRITE_EVENT_E"/>
   <Value str="CPSS_DRAGONITE_ERROR_E"/>
   <Value str="CPSS_DRAGONITE_UNI_EV_DUMMY_MAX_E"/>
   <Value str="CPSS_DRAGONITE_UNI_EV_MAX_E"/>
   <Value str="CPSS_UNI_EV_DUMMY_MAX_E"/>
   <Value str="CPSS_UNI_EVENT_COUNT_E"/>
   <Value str="CPSS_UNI_RSRVD_EVENT_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_AP_FLOW_CONTROL_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_AP_FLOW_CONTROL_ENT
 *
 * @brief Enumerator of AP Port FC Direction enablers.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_AP_FLOW_CONTROL_SYMMETRIC_E"/>
   <Value str="CPSS_PX_PORT_AP_FLOW_CONTROL_ASYMMETRIC_E"/>
  </Enum>
  <Enum name="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_ENT
 *
 * @brief The types of header alteration handling on the egress packet.
*/]]>   </Comment>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_EXTENDED_PORT_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_EXTENDED_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_CASCADE_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_CASCADE_PORT_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_CPU_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_CPU_PORT_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_EXTENDED_PORT_TAGGED_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_EXTENDED_PORT_UNTAGGED_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_UPSTREAM_PORT_TO_EXTENDED_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_UPSTREAM_PORT_MIRRORING_TO_EXTENDED_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_CPU_PORT_TO_UPSTREAM_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DSA_QCN_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_IPL_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_IPL_PORT_TO_IPL_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_EXTENDED_PORT_TO_UPSTREAM_PORT_UNTAGGED_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_EXTENDED_M4_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_802_1BR_UPSTREAM_PORT_TO_EXTENDED_M8_PORT_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DROP_PACKET_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_EVB_E2U_PACKET_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_EVB_U2E_PACKET_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE_DO_NOT_MODIFY_E"/>
   <Value str="CPSS_PX_EGRESS_HEADER_ALTERATION_TYPE___MUST_BE_LAST___E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_PFC_ENABLE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_PFC_ENABLE_ENT
 *
 * @brief Enumeration of PFC enable options.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_PFC_ENABLE_TRIGGERING_ONLY_E"/>
   <Value str="CPSS_PX_PORT_PFC_ENABLE_TRIGGERING_AND_RESPONSE_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_MAPPING_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_MAPPING_TYPE_ENT
 *
 * @brief interface types of physical ports.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_MAPPING_TYPE_ETHERNET_MAC_E"/>
   <Value str="CPSS_PX_PORT_MAPPING_TYPE_CPU_SDMA_E"/>
   <Value str="CPSS_PX_PORT_MAPPING_TYPE_MAX_E"/>
   <Value str="CPSS_PX_PORT_MAPPING_TYPE_INVALID_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_CN_MESSAGE_TYPE_ENT
 *
 * @brief Enumeration describes congestion notification message type
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_CN_MESSAGE_TYPE_QCN_E"/>
   <Value str="CPSS_PX_PORT_CN_MESSAGE_TYPE_CCFC_E"/>
  </Enum>
  <Enum name="CPSS_PORT_FLOW_CONTROL_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_FLOW_CONTROL_ENT
 *
 * @brief Enumeration of Port FC Direction enablers.
*/]]>   </Comment>
   <Value str="CPSS_PORT_FLOW_CONTROL_DISABLE_E"/>
   <Value str="CPSS_PORT_FLOW_CONTROL_RX_TX_E"/>
   <Value str="CPSS_PORT_FLOW_CONTROL_RX_ONLY_E"/>
   <Value str="CPSS_PORT_FLOW_CONTROL_TX_ONLY_E"/>
  </Enum>
  <Enum name="CPSS_LOG_LIB_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LOG_LIB_ENT
 *
 * @brief This enum defines the different libraries in cpss.
 * used for enable/disable the log activity for each lib.
*/]]>   </Comment>
   <Value str="CPSS_LOG_LIB_APP_DRIVER_CALL_E"/>
   <Value str="CPSS_LOG_LIB_BRIDGE_E"/>
   <Value str="CPSS_LOG_LIB_CNC_E"/>
   <Value str="CPSS_LOG_LIB_CONFIG_E"/>
   <Value str="CPSS_LOG_LIB_COS_E"/>
   <Value str="CPSS_LOG_LIB_HW_INIT_E"/>
   <Value str="CPSS_LOG_LIB_CSCD_E"/>
   <Value str="CPSS_LOG_LIB_CUT_THROUGH_E"/>
   <Value str="CPSS_LOG_LIB_DIAG_E"/>
   <Value str="CPSS_LOG_LIB_FABRIC_E"/>
   <Value str="CPSS_LOG_LIB_IP_E"/>
   <Value str="CPSS_LOG_LIB_IPFIX_E"/>
   <Value str="CPSS_LOG_LIB_IP_LPM_E"/>
   <Value str="CPSS_LOG_LIB_L2_MLL_E"/>
   <Value str="CPSS_LOG_LIB_LOGICAL_TARGET_E"/>
   <Value str="CPSS_LOG_LIB_LPM_E"/>
   <Value str="CPSS_LOG_LIB_MIRROR_E"/>
   <Value str="CPSS_LOG_LIB_MULTI_PORT_GROUP_E"/>
   <Value str="CPSS_LOG_LIB_NETWORK_IF_E"/>
   <Value str="CPSS_LOG_LIB_NST_E"/>
   <Value str="CPSS_LOG_LIB_OAM_E"/>
   <Value str="CPSS_LOG_LIB_PCL_E"/>
   <Value str="CPSS_LOG_LIB_PHY_E"/>
   <Value str="CPSS_LOG_LIB_POLICER_E"/>
   <Value str="CPSS_LOG_LIB_PORT_E"/>
   <Value str="CPSS_LOG_LIB_PROTECTION_E"/>
   <Value str="CPSS_LOG_LIB_PTP_E"/>
   <Value str="CPSS_LOG_LIB_SYSTEM_RECOVERY_E"/>
   <Value str="CPSS_LOG_LIB_TCAM_E"/>
   <Value str="CPSS_LOG_LIB_TM_GLUE_E"/>
   <Value str="CPSS_LOG_LIB_TRUNK_E"/>
   <Value str="CPSS_LOG_LIB_TTI_E"/>
   <Value str="CPSS_LOG_LIB_TUNNEL_E"/>
   <Value str="CPSS_LOG_LIB_VNT_E"/>
   <Value str="CPSS_LOG_LIB_RESOURCE_MANAGER_E"/>
   <Value str="CPSS_LOG_LIB_VERSION_E"/>
   <Value str="CPSS_LOG_LIB_TM_E"/>
   <Value str="CPSS_LOG_LIB_SMI_E"/>
   <Value str="CPSS_LOG_LIB_INIT_E"/>
   <Value str="CPSS_LOG_LIB_DRAGONITE_E"/>
   <Value str="CPSS_LOG_LIB_VIRTUAL_TCAM_E"/>
   <Value str="CPSS_LOG_LIB_INGRESS_E"/>
   <Value str="CPSS_LOG_LIB_EGRESS_E"/>
   <Value str="CPSS_LOG_LIB_LATENCY_MONITORING_E"/>
   <Value str="CPSS_LOG_LIB_TAM_E"/>
   <Value str="CPSS_LOG_LIB_EXACT_MATCH_E"/>
   <Value str="CPSS_LOG_LIB_PHA_E"/>
   <Value str="CPSS_LOG_LIB_ALL_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_SET_ENT
 *
 * @brief There are Drop Profile sets of parameters. This enumeration specifies
 * which Drop Profile set a given physical port is associated with.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_0_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_1_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_2_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_3_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_4_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_5_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_6_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_7_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_8_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_9_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_10_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_11_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_12_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_13_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_14_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_PROFILE_15_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_ENT
 *
 * @brief Drop Precedence (DP) enable mode to use the shared pool.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_DISABLE_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_ALL_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_DP0_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_DP_MODE_DP0_DP1_E"/>
  </Enum>
  <Enum name="CPSS_PORT_PCS_LOOPBACK_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_PCS_LOOPBACK_MODE_ENT
 *
 * @brief Enumeration of port's PCS loopback modes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_PCS_LOOPBACK_DISABLE_E"/>
   <Value str="CPSS_PORT_PCS_LOOPBACK_TX2RX_E"/>
   <Value str="CPSS_PORT_PCS_LOOPBACK_RX2TX_E"/>
  </Enum>
  <Enum name="CPSS_PORT_RX_FC_PROFILE_SET_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_RX_FC_PROFILE_SET_ENT
 *
 * @brief Enumeration of Flow control profile set
*/]]>   </Comment>
   <Value str="CPSS_PORT_RX_FC_PROFILE_1_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_2_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_3_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_4_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_5_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_6_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_7_E"/>
   <Value str="CPSS_PORT_RX_FC_PROFILE_8_E"/>
  </Enum>
  <Enum name="MV_HWS_PORT_STANDARD">
   <Comment>
<![CDATA[/**
* @enum MV_HWS_PORT_STANDARD
 *
 * @brief Defines the different port standard metrics.
*/]]>   </Comment>
   <Value str="_100Base_FX"/>
   <Value str="SGMII"/>
   <Value str="_1000Base_X"/>
   <Value str="SGMII2_5"/>
   <Value str="QSGMII"/>
   <Value str="_10GBase_KX4"/>
   <Value str="_10GBase_KX2"/>
   <Value str="_10GBase_KR"/>
   <Value str="_20GBase_KR"/>
   <Value str="_40GBase_KR"/>
   <Value str="_100GBase_KR10"/>
   <Value str="HGL"/>
   <Value str="RHGL"/>
   <Value str="CHGL"/>
   <Value str="RXAUI"/>
   <Value str="_20GBase_KX4"/>
   <Value str="_10GBase_SR_LR"/>
   <Value str="_20GBase_SR_LR"/>
   <Value str="_40GBase_SR_LR"/>
   <Value str="_12_1GBase_KR"/>
   <Value str="XLHGL_KR4"/>
   <Value str="HGL16G"/>
   <Value str="HGS"/>
   <Value str="HGS4"/>
   <Value str="_100GBase_SR10"/>
   <Value str="CHGL_LR12"/>
   <Value str="TCAM"/>
   <Value str="INTLKN_12Lanes_6_25G"/>
   <Value str="INTLKN_16Lanes_6_25G"/>
   <Value str="INTLKN_24Lanes_6_25G"/>
   <Value str="INTLKN_12Lanes_10_3125G"/>
   <Value str="INTLKN_16Lanes_10_3125G"/>
   <Value str="INTLKN_12Lanes_12_5G"/>
   <Value str="INTLKN_16Lanes_12_5G"/>
   <Value str="INTLKN_16Lanes_3_125G"/>
   <Value str="INTLKN_24Lanes_3_125G"/>
   <Value str="CHGL11_LR12"/>
   <Value str="INTLKN_4Lanes_3_125G"/>
   <Value str="INTLKN_8Lanes_3_125G"/>
   <Value str="INTLKN_4Lanes_6_25G"/>
   <Value str="INTLKN_8Lanes_6_25G"/>
   <Value str="_2_5GBase_QX"/>
   <Value str="_5GBase_DQX"/>
   <Value str="_5GBase_HX"/>
   <Value str="_12GBaseR"/>
   <Value str="_5_625GBaseR"/>
   <Value str="_48GBaseR"/>
   <Value str="_12GBase_SR"/>
   <Value str="_48GBase_SR"/>
   <Value str="_5GBaseR"/>
   <Value str="_22GBase_SR"/>
   <Value str="_24GBase_KR2"/>
   <Value str="_12_5GBase_KR"/>
   <Value str="_25GBase_KR2"/>
   <Value str="_50GBase_KR4"/>
   <Value str="_25GBase_KR"/>
   <Value str="_50GBase_KR2"/>
   <Value str="_100GBase_KR4"/>
   <Value str="_25GBase_SR"/>
   <Value str="_50GBase_SR2"/>
   <Value str="_100GBase_SR4"/>
   <Value str="_100GBase_MLG"/>
   <Value str="_107GBase_KR4"/>
   <Value str="_25GBase_KR_C"/>
   <Value str="_50GBase_KR2_C"/>
   <Value str="_40GBase_KR2"/>
   <Value str="_29_09GBase_SR"/>
   <Value str="_40GBase_CR4"/>
   <Value str="_25GBase_CR"/>
   <Value str="_50GBase_CR2"/>
   <Value str="_100GBase_CR4"/>
   <Value str="_25GBase_KR_S"/>
   <Value str="_25GBase_CR_S"/>
   <Value str="_25GBase_CR_C"/>
   <Value str="_50GBase_CR2_C"/>
   <Value str="_50GBase_KR"/>
   <Value str="_100GBase_KR2"/>
   <Value str="_200GBase_KR4"/>
   <Value str="_200GBase_KR8"/>
   <Value str="_400GBase_KR8"/>
   <Value str="_102GBase_KR4"/>
   <Value str="_52_5GBase_KR2"/>
   <Value str="_40GBase_KR4"/>
   <Value str="_26_7GBase_KR"/>
   <Value str="NON_SUP_MODE"/>
   <Value str="LAST_PORT_MODE"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_FAILURE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_FAILURE_ENT
 *
 * @brief Enumeration of the different port failure causes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_FAILURE_NONE_E"/>
   <Value str="CPSS_PORT_MANAGER_FAILURE_SIGNAL_STABILITY_FAILED_E"/>
   <Value str="CPSS_PORT_MANAGER_FAILURE_TRAINING_FAILED_E"/>
   <Value str="CPSS_PORT_MANAGER_FAILURE_ALIGNMENT_TIMER_EXPIRED_E"/>
   <Value str="CPSS_PORT_MANAGER_FAILURE_CONFIDENCE_INTERVAL_TIMER_EXPIRED_E"/>
   <Value str="CPSS_PORT_MANAGER_FAILURE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_HASH_PACKET_TYPE_ENT
 *
 * @brief Hash packet type
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_IPV4_TCP_UDP_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_IPV6_TCP_UDP_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_IPV4_NO_TCP_UDP_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_IPV6_NO_TCP_UDP_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_MPLS_SINGLE_LABEL_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_MPLS_MULTI_LABEL_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE1_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_UDE2_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_ETHERNET_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PACKET_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_LED_BLINK_SELECT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_BLINK_SELECT_ENT
 *
 * @brief Blink types to select
*/]]>   </Comment>
   <Value str="CPSS_LED_BLINK_SELECT_0_E"/>
   <Value str="CPSS_LED_BLINK_SELECT_1_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_CPLL_INPUT_FREQUENCY_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_CPLL_INPUT_FREQUENCY_ENT
 *
 * @brief Enumeration of port's SERDES CPLL input clock.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_CPLL_INPUT_FREQUENCY_25M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_INPUT_FREQUENCY_156M_E"/>
  </Enum>
  <Enum name="CPSS_EVENT_MASK_SET_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_EVENT_MASK_SET_ENT
 *
 * @brief Defines the different interrupt node states, that an interrupt
 * node may have.
*/]]>   </Comment>
   <Value str="CPSS_EVENT_MASK_E"/>
   <Value str="CPSS_EVENT_UNMASK_E"/>
  </Enum>
  <Enum name="CPSS_PORT_DUPLEX_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_DUPLEX_ENT
 *
 * @brief Enumeration of port duplex modes
*/]]>   </Comment>
   <Value str="CPSS_PORT_FULL_DUPLEX_E"/>
   <Value str="CPSS_PORT_HALF_DUPLEX_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_UNMASK_EVENTS_TYPE_ENT
 *
 * @brief Enumeration of unmask operation per port treatment,
 * defines whether to allow port manager unMask:
 * 1. MAC level EVENTS - CPSS_PP_PORT_LINK_STATUS_CHANGED_E.
 * 2. LOW level EVENTS - CPSS_PP_PORT_PCS_ALIGN_LOCK_LOST_E,
 *                       CPSS_PP_PORT_PCS_GB_LOCK_SYNC_CHANGE_E,
 *                       CPSS_PP_PORT_MMPCS_SIGNAL_DETECT_CHANGE_E
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_UNMASK_MAC_LOW_LEVEL_EVENTS_ENABLE_MODE_E"/>
   <Value str="CPSS_PORT_MANAGER_UNMASK_MAC_LOW_LEVEL_EVENTS_DISABLE_MODE_E"/>
   <Value str="CPSS_PORT_MANAGER_UNMASK_MAC_LEVEL_EVENTS_DISABLE_MODE_E"/>
   <Value str="CPSS_PORT_MANAGER_UNMASK_LOW_LEVEL_EVENTS_DISABLE_MODE_E"/>
   <Value str="CPSS_PORT_MANAGER_UNMASK_EVENTS_MODE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PORT_DIRECTION_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_DIRECTION_ENT
 *
 * @brief Enumeration of port direction.
*/]]>   </Comment>
   <Value str="CPSS_PORT_DIRECTION_RX_E"/>
   <Value str="CPSS_PORT_DIRECTION_TX_E"/>
   <Value str="CPSS_PORT_DIRECTION_BOTH_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TAI_CLOCK_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TAI_CLOCK_MODE_ENT
 *
 * @brief This enum defines the clock mode.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_MODE_DISABLED_E"/>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_MODE_OUTPUT_E"/>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_MODE_INPUT_E"/>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_MODE_INPUT_ADJUST_E"/>
  </Enum>
  <Enum name="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_ENT
 *
 * @brief CNC modes of Egress Queue counting.
*/]]>   </Comment>
   <Value str="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_TAIL_DROP_E"/>
   <Value str="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_CN_E"/>
   <Value str="CPSS_PX_CNC_EGRESS_QUEUE_CLIENT_MODE_TAIL_DROP_REDUCED_E"/>
  </Enum>
  <Enum name="CPSS_EMBEDDED_COMMANDS_TEST_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_EMBEDDED_COMMANDS_TEST_TYPE_ENT
 *
 * @brief Enumeration of embedded commands test types.
*/]]>   </Comment>
   <Value str="CPSS_EMBEDDED_COMMANDS_PORT_ENABLE_DISABLE_TEST_TYPE_E"/>
   <Value str="CPSS_EMBEDDED_COMMANDS_TX_ENABLE_DISABLE_TEST_TYPE_E"/>
   <Value str="CPSS_EMBEDDED_COMMANDS_TX_ENABLE_DISABLE_TEST_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENT
 *
 * @brief Enumeration of port's serdes auto tuning modes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_CFG_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_START_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_TX_TRAINING_STATUS_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_TRAINING_STOP_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_START_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ADAPTIVE_RX_TRAINING_STOP_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_ENHANCE_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_EDGE_DETECT_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_WAIT_FOR_FINISH_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_RX_TRAINING_VSR_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_MODE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PG_IF_SIZE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PG_IF_SIZE_ENT
 *
 * @brief interface size (what is the word width to the port, instead of the TxDMA).
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PG_IF_SIZE_1_BYTE_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_8_BYTES_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_16_BYTES_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_32_BYTES_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_64_BYTES_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_DEFAULT_E"/>
   <Value str="CPSS_DIAG_PG_IF_SIZE_NOT_APPLICABLE_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_ENT
 *
 * @brief Enumeration of oversized packets counter mode.
 * that relate to counters of:
 * CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_MAX_OCTETS_E
 * CPSS_PX_PORT_MAC_COUNTER_FRAMES_1024_TO_1518_OCTETS_E
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_NORMAL_E"/>
   <Value str="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_HISTOGRAM_1518_E"/>
   <Value str="CPSS_PX_PORT_MAC_OVERSIZED_PACKETS_COUNTER_MODE_HISTOGRAM_1522_E"/>
  </Enum>
  <Enum name="CPSS_PORT_SPEED_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_SPEED_ENT
 *
 * @brief Enumeration of port speeds
*/]]>   </Comment>
   <Value str="CPSS_PORT_SPEED_10_E"/>
   <Value str="CPSS_PORT_SPEED_100_E"/>
   <Value str="CPSS_PORT_SPEED_1000_E"/>
   <Value str="CPSS_PORT_SPEED_10000_E"/>
   <Value str="CPSS_PORT_SPEED_12000_E"/>
   <Value str="CPSS_PORT_SPEED_2500_E"/>
   <Value str="CPSS_PORT_SPEED_5000_E"/>
   <Value str="CPSS_PORT_SPEED_13600_E"/>
   <Value str="CPSS_PORT_SPEED_20000_E"/>
   <Value str="CPSS_PORT_SPEED_40000_E"/>
   <Value str="CPSS_PORT_SPEED_16000_E"/>
   <Value str="CPSS_PORT_SPEED_15000_E"/>
   <Value str="CPSS_PORT_SPEED_75000_E"/>
   <Value str="CPSS_PORT_SPEED_100G_E"/>
   <Value str="CPSS_PORT_SPEED_50000_E"/>
   <Value str="CPSS_PORT_SPEED_140G_E"/>
   <Value str="CPSS_PORT_SPEED_11800_E"/>
   <Value str="CPSS_PORT_SPEED_47200_E"/>
   <Value str="CPSS_PORT_SPEED_22000_E"/>
   <Value str="CPSS_PORT_SPEED_23600_E"/>
   <Value str="CPSS_PORT_SPEED_12500_E"/>
   <Value str="CPSS_PORT_SPEED_25000_E"/>
   <Value str="CPSS_PORT_SPEED_107G_E"/>
   <Value str="CPSS_PORT_SPEED_29090_E"/>
   <Value str="CPSS_PORT_SPEED_200G_E"/>
   <Value str="CPSS_PORT_SPEED_400G_E"/>
   <Value str="CPSS_PORT_SPEED_102G_E"/>
   <Value str="CPSS_PORT_SPEED_52500_E"/>
   <Value str="CPSS_PORT_SPEED_26700_E"/>
   <Value str="CPSS_PORT_SPEED_NA_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_SERDES_LOOPBACK_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_SERDES_LOOPBACK_MODE_ENT
 *
 * @brief Enumeration of port's serdes loopback modes.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_SERDES_LOOPBACK_DISABLE_E"/>
   <Value str="CPSS_PX_PORT_SERDES_LOOPBACK_ANALOG_TX2RX_E"/>
   <Value str="CPSS_PX_PORT_SERDES_LOOPBACK_DIGITAL_TX2RX_E"/>
   <Value str="CPSS_PX_PORT_SERDES_LOOPBACK_DIGITAL_RX2TX_E"/>
   <Value str="CPSS_PX_PORT_SERDES_LOOPBACK_MAX_E"/>
  </Enum>
  <Enum name="CPSS_PHY_XSMI_INTERFACE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PHY_XSMI_INTERFACE_ENT
 *
 * @brief XSMI interface number.
*/]]>   </Comment>
   <Value str="CPSS_PHY_XSMI_INTERFACE_0_E"/>
   <Value str="CPSS_PHY_XSMI_INTERFACE_1_E"/>
   <Value str="CPSS_PHY_XSMI_INTERFACE_2_E"/>
   <Value str="CPSS_PHY_XSMI_INTERFACE_3_E"/>
   <Value str="CPSS_PHY_XSMI_INTERFACE_MAX_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_ENT
 *
 * @brief Enumeration of MTU for DSWRR, resolution of WRR weights for byte
 * based Transmit Scheduler count mode
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_64_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_128_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_256_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_512_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_1K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_2K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_4K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_8K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_16K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_32K_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_MTU_64K_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SCHEDULER_WRR_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SCHEDULER_WRR_MODE_ENT
 *
 * @brief Enumeration of Transmit Scheduler mode
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_PACKET_MODE_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_BYTE_MODE_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_ENT
*
* @brief Data Integrity types of correction methods
*/]]>   </Comment>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_UNKNOWN_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_NONE_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_DROP_OR_RESEND_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_HW_CORRECTION_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_SW_CORRECTION_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_REBOOT_CHIP_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_CORRECTION_METHOD_SCRUB_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT
 *
 * @brief Enumeration of different port loopback types
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_LOOPBACK_TYPE_MAC_E"/>
   <Value str="CPSS_PORT_MANAGER_LOOPBACK_TYPE_SERDES_E"/>
   <Value str="CPSS_PORT_MANAGER_LOOPBACK_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SCHEDULER_ARB_GROUP_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SCHEDULER_ARB_GROUP_ENT
 *
 * @brief The Traffic Class Queue Arbritration Group
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_ARB_GROUP_0_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_WRR_ARB_GROUP_1_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_SP_ARB_GROUP_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_ENT
 *
 * @brief Enumeration of shared pool allocation policy
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_UNCONSTRAINED_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_SHARED_POLICY_CONSTRAINED_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_CN_PACKET_LENGTH_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_CN_PACKET_LENGTH_ENT
 *
 * @brief Enumeration of packet length used by the CN frames triggering logic.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_CN_LENGTH_ORIG_PACKET_E"/>
   <Value str="CPSS_PX_PORT_CN_LENGTH_1_5_KB_E"/>
   <Value str="CPSS_PX_PORT_CN_LENGTH_2_KB_E"/>
   <Value str="CPSS_PX_PORT_CN_LENGTH_10_KB_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TAI_CLOCK_SELECT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TAI_CLOCK_SELECT_ENT
 *
 * @brief This enum defines TAI input clock selection mode.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_SELECT_PTP_PLL_E"/>
   <Value str="CPSS_PX_PTP_TAI_CLOCK_SELECT_CORE_PLL_E"/>
  </Enum>
  <Enum name="CPSS_PP_INTERFACE_CHANNEL_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PP_INTERFACE_CHANNEL_ENT
 *
 * @brief Packet Processor interface channel to the CPU
 * Used to select driver which performs low-level access to
 * Switching registers
*/]]>   </Comment>
   <Value str="CPSS_CHANNEL_PCI_E"/>
   <Value str="CPSS_CHANNEL_SMI_E"/>
   <Value str="CPSS_CHANNEL_TWSI_E"/>
   <Value str="CPSS_CHANNEL_PEX_E"/>
   <Value str="CPSS_CHANNEL_PEX_MBUS_E"/>
   <Value str="CPSS_CHANNEL_PEX_EAGLE_E"/>
   <Value str="CPSS_CHANNEL_PEX_KERNEL_E"/>
   <Value str="CPSS_CHANNEL_LAST_E"/>
  </Enum>
  <Enum name="CPSS_LED_PULSE_STRETCH_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_PULSE_STRETCH_ENT
 *
 * @brief The length of stretching for dynamic signals
 * (see HW spec doc for meaning of values).
*/]]>   </Comment>
   <Value str="CPSS_LED_PULSE_STRETCH_0_NO_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_1_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_2_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_3_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_4_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_5_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_6_E"/>
   <Value str="CPSS_LED_PULSE_STRETCH_7_E"/>
  </Enum>
  <Enum name="CPSS_PX_CNC_BYTE_COUNT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_CNC_BYTE_COUNT_MODE_ENT
 *
 * @brief CNC modes for byte count counters.
*/]]>   </Comment>
   <Value str="CPSS_PX_CNC_BYTE_COUNT_MODE_L2_E"/>
   <Value str="CPSS_PX_CNC_BYTE_COUNT_MODE_L3_E"/>
  </Enum>
  <Enum name="CPSS_PX_COS_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_COS_MODE_ENT
 *
 * @brief CoS Mode options for obtaining CoS Attributes.
*/]]>   </Comment>
   <Value str="CPSS_PX_COS_MODE_PORT_E"/>
   <Value str="CPSS_PX_COS_MODE_PACKET_DSA_E"/>
   <Value str="CPSS_PX_COS_MODE_PACKET_L2_E"/>
   <Value str="CPSS_PX_COS_MODE_PACKET_L3_E"/>
   <Value str="CPSS_PX_COS_MODE_PACKET_MPLS_E"/>
   <Value str="CPSS_PX_COS_MODE_FORMAT_ENTRY_E"/>
   <Value str="CPSS_PX_COS_MODE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_ETHERTYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_ETHERTYPE_ENT
 *
 * @brief Enumeration of packet ethertype
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_IPV4_E"/>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_IPV6_E"/>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_MPLS1_E"/>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_MPLS2_E"/>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_IPV6_EH_E"/>
   <Value str="CPSS_PX_INGRESS_ETHERTYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_FC_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_FC_MODE_ENT
 *
 * @brief Enumeration of FC modes.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_FC_MODE_802_3X_E"/>
   <Value str="CPSS_PX_PORT_FC_MODE_PFC_E"/>
   <Value str="CPSS_PX_PORT_FC_MODE_LL_FC_E"/>
  </Enum>
  <Enum name="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_ENT
 *
 * @brief The types of info that the target port entry may hold.
*/]]>   </Comment>
   <Value str="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_COMMON_E"/>
   <Value str="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_DSA_QCN_E"/>
   <Value str="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_DO_NOT_MODIFY_E"/>
   <Value str="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE_EVB_E"/>
   <Value str="CPSS_PX_EGRESS_TARGET_PORT_ENTRY_TYPE___MUST_BE_LAST___E"/>
  </Enum>
  <Enum name="CPSS_DRV_HW_TRACE_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DRV_HW_TRACE_TYPE_ENT
 *
 * @brief HW Trace type
*/]]>   </Comment>
   <Value str="CPSS_DRV_HW_TRACE_TYPE_READ_E"/>
   <Value str="CPSS_DRV_HW_TRACE_TYPE_WRITE_E"/>
   <Value str="CPSS_DRV_HW_TRACE_TYPE_BOTH_E"/>
   <Value str="CPSS_DRV_HW_TRACE_TYPE_WRITE_DELAY_E"/>
   <Value str="CPSS_DRV_HW_TRACE_TYPE_ALL_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_ENT
 *
 * @brief Enumeration of recovered clock select bus.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_0_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLOCK_SELECT_1_E"/>
  </Enum>
  <Enum name="CPSS_PORT_AP_FLOW_CONTROL_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_AP_FLOW_CONTROL_ENT
 *
 * @brief Enumerator of AP Port FC Direction enablers.
*/]]>   </Comment>
   <Value str="CPSS_PORT_AP_FLOW_CONTROL_SYMMETRIC_E"/>
   <Value str="CPSS_PORT_AP_FLOW_CONTROL_ASYMMETRIC_E"/>
  </Enum>
  <Enum name="CPSS_PP_SUB_FAMILY_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PP_SUB_FAMILY_TYPE_ENT
 *
 * @brief Defines the different device sub families that may exist in system.
*/]]>   </Comment>
   <Value str="CPSS_PP_SUB_FAMILY_NONE_E"/>
   <Value str="CPSS_PP_SUB_FAMILY_BOBCAT2_BOBK_E"/>
   <Value str="CPSS_MAX_SUB_FAMILY"/>
   <Value str="CPSS_BAD_SUB_FAMILY"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SHAPER_GRANULARITY_ENT
 *
 * @brief Enumeration of shaper granularity.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_64_CORE_CLOCKS_E"/>
   <Value str="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_1024_CORE_CLOCKS_E"/>
   <Value str="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_128_CORE_CLOCKS_E"/>
   <Value str="CPSS_PX_PORT_TX_SHAPER_GRANULARITY_256_CORE_CLOCKS_E"/>
  </Enum>
  <Enum name="CPSS_PX_DIAG_TRANSMIT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_DIAG_TRANSMIT_MODE_ENT
 *
 * @brief Transmit modes.
*/]]>   </Comment>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_REGULAR_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_ZEROS_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_ONES_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_CYCLIC_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS7_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS9_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS15_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS23_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_PRBS31_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_1T_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_2T_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_5T_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_10T_E"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_DFETraining"/>
   <Value str="CPSS_PX_DIAG_TRANSMIT_MODE_MAX_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MAC_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MAC_TYPE_ENT
 *
 * @brief Port MAC Type enumeration
*/]]>   </Comment>
   <Value str="CPSS_PORT_MAC_TYPE_NOT_EXISTS_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_FE_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_GE_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_XG_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_XLG_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_HGL_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_CG_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_ILKN_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_MTI_64_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_MTI_400_E"/>
   <Value str="CPSS_PORT_MAC_TYPE_NOT_APPLICABLE_E"/>
  </Enum>
  <Enum name="CPSS_PORT_INTERFACE_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_INTERFACE_MODE_ENT
 *
 * @brief Enumeration of port interface modes
*/]]>   </Comment>
   <Value str="CPSS_PORT_INTERFACE_MODE_REDUCED_10BIT_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_REDUCED_GMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_MII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_SGMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_XGMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_MGMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_1000BASE_X_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_GMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_MII_PHY_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_QX_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_HX_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_RXAUI_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_100BASE_FX_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_QSGMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_XLG_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_LOCAL_XGMII_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_NO_SERDES_PORT_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_HGL_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CHGL_12_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_ILKN12_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_SR_LR_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_ILKN16_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_ILKN24_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_ILKN4_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_ILKN8_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_XHGS_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_XHGS_SR_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR2_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR4_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_SR_LR2_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_SR_LR4_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_MLG_40G_10G_40G_10G_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR_C_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR_C_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR2_C_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR2_C_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR2_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR4_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR_S_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_CR_S_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_KR8_E"/>
   <Value str="CPSS_PORT_INTERFACE_MODE_NA_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_ENT
 *
 * @brief Enumeration of packet count multiplier.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_1_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_256_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_512_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_1K_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_4K_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_64K_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_1M_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_COUNT_MULTIPLIER_16M_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_ENT
 *
 * @brief Enumeration of BC (Byte Count) Change enable options.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_DISABLE_ALL_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_SHAPER_ONLY_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_SCHEDULER_ONLY_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_BC_CHANGE_ENABLE_SHAPER_AND_SCHEDULER_E"/>
  </Enum>
  <Enum name="CPSS_PX_CNC_CLIENT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_CNC_CLIENT_ENT
 *
 * @brief CNC clients.
*/]]>   </Comment>
   <Value str="CPSS_PX_CNC_CLIENT_INGRESS_PROCESSING_E"/>
   <Value str="CPSS_PX_CNC_CLIENT_EGRESS_PROCESSING_E"/>
   <Value str="CPSS_PX_CNC_CLIENT_EGRESS_QUEUE_PASS_DROP_QCN_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_ENT
 *
 * @brief The Tail Drop Dynamic Buffers Allocation (DBA) ratio of the free buffers
 * used for queue thresholds.
 * Alpha = 1 enables a single congested port to get 50% of free packet
 * buffers. Higher Alphas will give more weight for a single queue allowing
 * better utilization of the packet memory.
 * Amount of buffers for dynamic allocation per port calculated as:
 * PortAlpha
 * DynamicFactor = FreeBuffers -------------------------------------
 * 1 + SumOfAlphaOfAllDestinationPorts
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_0_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_0_25_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_0_5_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_1_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_2_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_DBA_ALPHA_4_E"/>
  </Enum>
  <Enum name="CPSS_PHY_SMI_INTERFACE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PHY_SMI_INTERFACE_ENT
 *
 * @brief Generic Serial Management Interface numbering
 * used for both usual SMI and XSMI
*/]]>   </Comment>
   <Value str="CPSS_PHY_SMI_INTERFACE_0_E"/>
   <Value str="CPSS_PHY_SMI_INTERFACE_1_E"/>
   <Value str="CPSS_PHY_SMI_INTERFACE_2_E"/>
   <Value str="CPSS_PHY_SMI_INTERFACE_3_E"/>
   <Value str="CPSS_PHY_SMI_INTERFACE_MAX_E"/>
   <Value str="CPSS_PHY_SMI_INTERFACE_INVALID_E"/>
  </Enum>
  <Enum name="CPSS_PORT_SERDES_LOOPBACK_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_SERDES_LOOPBACK_MODE_ENT
 *
 * @brief Enumeration of port's serdes loopback modes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_SERDES_LOOPBACK_DISABLE_E"/>
   <Value str="CPSS_PORT_SERDES_LOOPBACK_ANALOG_TX2RX_E"/>
   <Value str="CPSS_PORT_SERDES_LOOPBACK_DIGITAL_TX2RX_E"/>
   <Value str="CPSS_PORT_SERDES_LOOPBACK_DIGITAL_RX2TX_E"/>
   <Value str="CPSS_PORT_SERDES_LOOPBACK_MAX_E"/>
  </Enum>
  <Enum name="CPSS_EMBEDDED_COMMANDS_HW_UNIT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_EMBEDDED_COMMANDS_HW_UNIT_ENT
 *
 * @brief Enumeration of embedded commands HW units.
*/]]>   </Comment>
   <Value str="CPSS_EMBEDDED_COMMANDS_MAC_UNIT_E"/>
   <Value str="CPSS_EMBEDDED_COMMANDS_PCS_UNIT_E"/>
   <Value str="CPSS_EMBEDDED_COMMANDS_SERDES_UNIT_E"/>
  </Enum>
  <Enum name="CPSS_LED_BLINK_DURATION_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_BLINK_DURATION_ENT
 *
 * @brief The period of the LED Blink signal
 * (see HW spec doc for meaning of values).
*/]]>   </Comment>
   <Value str="CPSS_LED_BLINK_DURATION_0_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_1_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_2_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_3_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_4_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_5_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_6_E"/>
   <Value str="CPSS_LED_BLINK_DURATION_7_E"/>
  </Enum>
  <Enum name="CPSS_PX_DIAG_BIST_STATUS_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_DIAG_BIST_STATUS_ENT
*
* @brief This enum defines BIST results status
*/]]>   </Comment>
   <Value str="CPSS_PX_DIAG_BIST_STATUS_NOT_READY_E"/>
   <Value str="CPSS_PX_DIAG_BIST_STATUS_PASS_E"/>
   <Value str="CPSS_PX_DIAG_BIST_STATUS_FAIL_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_TYPE_ENT
 *
 * @brief Enumeration of physical recovery clock output pins.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK0_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK1_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_HASH_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_HASH_MODE_ENT
 *
 * @brief Hash calculation mode
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_HASH_MODE_CRC32_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_MODE_SELECTED_BITS_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_EVENT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_EVENT_ENT
 *
 * @brief Enumeration of the port management events which controls all port operations
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_EVENT_CREATE_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_DELETE_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_ENABLE_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_DISABLE_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_INIT_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_LOW_LEVEL_STATUS_CHANGED_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_MAC_LEVEL_STATUS_CHANGED_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_PORT_AP_HCD_FOUND_E"/>
   <Value str="CPSS_PORT_MANAGER_EVENT_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_PORT_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_PORT_TYPE_ENT
 *
 * @brief Enumeration of different port types in CPSS.
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_PORT_TYPE_REGULAR_E"/>
   <Value str="CPSS_PORT_MANAGER_PORT_TYPE_802_3AP_E"/>
   <Value str="CPSS_PORT_MANAGER_PORT_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_ENT
*
* @brief This enum defines Data Integrity module Memory types
*/]]>   </Comment>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_MGCAM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_RXDATA_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_RXHDR_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_SDMA_TX_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_PEX2_TXDATA_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MG_CONFI_PROCESSOR_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MUNIT_MUNIT_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_IMEM_BANK_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_PPN_SCRATCHPAD_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PPA_SHARED_DMEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PHA_HA_TABLE_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_BC_CT_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_CLEAR_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_FINAL_UDB_CLEAR_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_FREE_BUFFERS_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HA_DESC_IDDB_FREE_ID_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HA_DESC_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_HEADER_REORDER_MEM_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INTERNAL_DESC_IDDB_FREE_ID_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_INTERNAL_DESC_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MC_CLEAR_SHIFTER_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BMA_MC_COUNTERS_FLOOR_BANK_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_NEXT_CT_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_NEXT_TABLE_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_NUMBER_OF_BUFFERS_TABLE_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PAYLOAD_REORDER_MEM_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXDMA_PREF_MEM_ID_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_BM_VALID_TABLE_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_QCN_BUFFER_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_BMX_DATA_BASE_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_DQ_Q_BUF_LIMIT_DP0_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_DQ_Q_DESC_LIMIT_DP0_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_EQ_Q_LIMIT_DP0_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_EQ_Q_LIMIT_DP12_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_BMX_FREE_ENTRY_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CPFC_IND_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_LL_LINK_LIST_PTR_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_QCN_SAMPLE_INTERVALS_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXQ_Q_SHARED_Q_LIMIT_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_BANK_RAM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_RX_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_MPPM_TXDMA_RD_BURST_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_CT_BC_IDDB_FREE_ID_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_CT_BC_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_DESCRIPTOR_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_LL_FREE_BUFS_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_HEADER_LL_LINK_LIST_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_RXDMA_IBUF_HDR_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_IDDB_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_LL_FREE_BUFS_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TXFIFO_PAYLOAD_LL_LINK_LIST_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_CG_RX_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_CG_TX_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_DESKEW_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_RS_FEC_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_CG_RX_PREAMBLE_MEM_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_CNC_IP_COUNTERS_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PCP_IP_DST_PORT_MAP_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_SIP_PCP_IP_SRC_PORT_MAP_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_DDU_FIFO_E"/>
   <Value str="CPSS_PX_DIAG_DATA_INTEGRITY_MEM_TYPE_TABLE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_LED_ORDER_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_ORDER_MODE_ENT
 *
 * @brief LED stream ordering mode
*/]]>   </Comment>
   <Value str="CPSS_LED_ORDER_MODE_BY_PORT_E"/>
   <Value str="CPSS_LED_ORDER_MODE_BY_CLASS_E"/>
  </Enum>
  <Enum name="CPSS_PX_PA_UNIT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PA_UNIT_ENT
 *
 * @brief Enumeration of PA units
*/]]>   </Comment>
   <Value str="CPSS_PX_PA_UNIT_UNDEFINED_E"/>
   <Value str="CPSS_PX_PA_UNIT_RXDMA_0_E"/>
   <Value str="CPSS_PX_PA_UNIT_TXQ_0_E"/>
   <Value str="CPSS_PX_PA_UNIT_TXQ_1_E"/>
   <Value str="CPSS_PX_PA_UNIT_TXDMA_0_E"/>
   <Value str="CPSS_PX_PA_UNIT_TX_FIFO_0_E"/>
   <Value str="CPSS_PX_PA_UNIT_MAX_E"/>
  </Enum>
  <Enum name="CPSS_ADJUST_OPERATION_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_ADJUST_OPERATION_ENT
 *
 * @brief adjust operation.
*/]]>   </Comment>
   <Value str="CPSS_ADJUST_OPERATION_ADD_E"/>
   <Value str="CPSS_ADJUST_OPERATION_SUBSTRUCT_E"/>
  </Enum>
  <Enum name="CPSS_PORT_PCS_RESET_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_PCS_RESET_MODE_ENT
 *
 * @brief Enumeration of port PCS reset direction.
*/]]>   </Comment>
   <Value str="CPSS_PORT_PCS_RESET_MODE_RX_E"/>
   <Value str="CPSS_PORT_PCS_RESET_MODE_TX_E"/>
   <Value str="CPSS_PORT_PCS_RESET_MODE_ALL_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_ENT
 *
 * @brief UDB anchor type.
 * CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L2_E - L2 Anchor - start of packet.
 * CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L3_E - L3 Anchor - start of L3 header.
 * CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L4_E - L4 Anchor - start of L4 header.
 * CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_PTP_E - PTP Anchor - start of PTP header.
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L2_E"/>
   <Value str="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L3_E"/>
   <Value str="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_L4_E"/>
   <Value str="CPSS_PX_INGRESS_UDB_ANCHOR_TYPE_PTP_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PG_PACKET_LENGTH_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PG_PACKET_LENGTH_TYPE_ENT
 *
 * @brief Enumeration of packet's length types.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PG_PACKET_LENGTH_CONSTANT_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_LENGTH_RANDOM_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SCHEDULER_PROFILE_SET_ENT
 *
 * @brief Enumeration of Tx Queue scheduler profile set
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_0_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_1_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_2_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_3_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_4_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_5_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_6_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_7_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_8_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_9_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_10_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_11_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_12_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_13_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_14_E"/>
   <Value str="CPSS_PX_PORT_TX_SCHEDULER_PROFILE_15_E"/>
  </Enum>
  <Enum name="CPSS_DRV_HW_RESOURCE_TYPE_ENT">
   <Comment>
<![CDATA[/*
 * Typedef enum CPSS_DRV_HW_RESOURCE_TYPE_ENT
 *
 * Description:
 *      define the resource type.
 *
 *      CPSS_DRV_HW_RESOURCE_SWITCHING_AND_MG0_CORE_E:
 *         The Switching Core of the Packet Processor
 *         that also includes management unit #0
 *
 *      CPSS_DRV_HW_RESOURCE_MG1_CORE_E:
 *          Management Unit #1
 *
 *      CPSS_DRV_HW_RESOURCE_MG2_CORE_E:
 *          Management Unit #2
 *
 *      CPSS_DRV_HW_RESOURCE_MG3_CORE_E:
 *          Management Unit #3
 *
 *      CPSS_DRV_HW_RESOURCE_DFX_CORE_E:
 *          The reset and Init Controler
 *
 *      CPSS_DRV_HW_RESOURCE_INTERNAL_PCI_E
 *          The internal PCI registers
 **/]]>   </Comment>
   <Value str="CPSS_DRV_HW_RESOURCE_SWITCHING_AND_MG0_CORE_E"/>
   <Value str="CPSS_DRV_HW_RESOURCE_MG1_CORE_E"/>
   <Value str="CPSS_DRV_HW_RESOURCE_MG2_CORE_E"/>
   <Value str="CPSS_DRV_HW_RESOURCE_MG3_CORE_E"/>
   <Value str="CPSS_DRV_HW_RESOURCE_INTERNAL_PCI_E"/>
   <Value str="CPSS_DRV_HW_RESOURCE_DFX_CORE_E"/>
  </Enum>
  <Enum name="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PHY_SMI_MDC_DIVISION_FACTOR_ENT
 *
 * @brief Generic Serial Management Interface clock (MDC)
 * division factor
*/]]>   </Comment>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_8_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_16_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_32_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_64_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_128_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_256_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_512_E"/>
   <Value str="CPSS_PHY_SMI_MDC_DIVISION_FACTOR_MAX_E"/>
  </Enum>
  <Enum name="CPSS_HW_PP_RESET_SKIP_TYPE_ENT">
   <Comment>
<![CDATA[/*
 * Typedef enum CPSS_HW_PP_RESET_SKIP_TYPE_ENT
 *
 * Description:
 *      define the skip type parameter to set. setting this parameters are
 *      relevant when setting <SoftResetTrigger> to 1.
 *          CPSS_HW_PP_RESET_SKIP_TYPE_REGISTER_E:Skip the registers
 *                        initialization at soft reset.
 *              Disable = Set: At software reset, registers are set to their
 *                        default value.
 *              Enable  = Not Set: At software reset, registers are not set to
 *                        their default value. Their value remains as it was
 *                        before the software reset.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_TABLE_E:Skip the tables
 *                        initialization at soft reset.
 *              Disable = Set: At software reset, tables are set to their
 *                        default value.
 *              Enable = Not Set: At software reset, tables are not set to
 *                       their default value. Their value remains as it was
 *                       before the software reset.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_EEPROM_E: Skip the EEPROM
 *                        initialization at soft reset.
 *              Disable  = Performed: At software reset, EEPROM initialization
 *                         is performed.
 *              Enable   = Not Performed: At software reset, EEPROM initialization
 *                         is not performed
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_PEX_E: Skip the PEX initialization at soft reset.
 *              Disable = Do Not Skip: Reset the PEX on SW Reset.
 *              Enable  = Skip: Do not reset the PEX on SW Reset.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_LINK_LOSS_E: Soft reset done without link loss.
 *              Disable = Do Not Skip: Link Loss on SW Reset.
 *              Enable  = Skip: No Link Loss on SW Reset.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_CHIPLETS_E: Skip the Chiplets initialization at soft reset.
 *              Disable = Do Not Skip: Reset the Chiplets on SW Reset.
 *              Enable  = Skip: Do not reset the Chiplets on SW Reset.
 *              (APPLICABLE DEVICES: Falcon)
 *              This feature cofigured on Main Dies only.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_ALL_E: All options above
 *              Disable = Do Not Skip on SW Reset.
 *              Enable  = Skip on SW Reset.
 *
 *          CPSS_HW_PP_RESET_SKIP_TYPE_ALL_EXCLUDE_PEX_E :
 *              like CPSS_HW_PP_RESET_SKIP_TYPE_ALL_E but exclude CPSS_HW_PP_RESET_SKIP_TYPE_PEX_E
 *              this case is useful when wanting the device to do soft reset
 *              without the need to reconfigure the PEX again.
 *
 */]]>   </Comment>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_REGISTER_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_TABLE_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_EEPROM_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_PEX_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_LINK_LOSS_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_CHIPLETS_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_ALL_E"/>
   <Value str="CPSS_HW_PP_RESET_SKIP_TYPE_ALL_EXCLUDE_PEX_E"/>
  </Enum>
  <Enum name="CPSS_PX_CNC_COUNTER_FORMAT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_CNC_COUNTER_FORMAT_ENT
 *
 * @brief CNC modes of counter formats.
*/]]>   </Comment>
   <Value str="CPSS_PX_CNC_COUNTER_FORMAT_MODE_0_E"/>
   <Value str="CPSS_PX_CNC_COUNTER_FORMAT_MODE_1_E"/>
   <Value str="CPSS_PX_CNC_COUNTER_FORMAT_MODE_2_E"/>
   <Value str="CPSS_PX_CNC_COUNTER_FORMAT_MODE_3_E"/>
   <Value str="CPSS_PX_CNC_COUNTER_FORMAT_MODE_4_E"/>
  </Enum>
  <Enum name="CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_SERDES_AUTO_TUNE_STATUS_ENT
 *
 * @brief Enumeration of port's serdes auto tuning modes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_PASS_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_FAIL_E"/>
   <Value str="CPSS_PORT_SERDES_AUTO_TUNE_NOT_COMPLITED_E"/>
  </Enum>
  <Enum name="CPSS_HW_PP_INIT_STAGE_ENT">
   <Comment>
<![CDATA[/*
 * Typedef enum CPSS_HW_PP_INIT_STAGE_ENT
 *
 * Description:
 *      Indicates the initialization stage of the device.
 *
 *      CPSS_HW_PP_INIT_STAGE_INIT_DURING_RESET_E = Initialization is during reset
 *
 *      CPSS_HW_PP_INIT_STAGE_EEPROM_DONE_INT_MEM_DONE_E = Initialize after reset.
 *                   EEPROM initialization is done and Internal memory
 *                   initialization is not done.
 *
 *      CPSS_HW_PP_INIT_STAGE_EEPROM_NOT_DONE_INT_MEM_DONE_E = Initialize after reset.
 *                   Internal memory initialization is done and EEPROM
 *                   initialization is not done.
 *
 *      CPSS_HW_PP_INIT_STAGE_FULLY_FUNC_E = Initialization is fully functional.
 *
 */]]>   </Comment>
   <Value str="CPSS_HW_PP_INIT_STAGE_INIT_DURING_RESET_E"/>
   <Value str="CPSS_HW_PP_INIT_STAGE_EEPROM_DONE_INT_MEM_DONE_E"/>
   <Value str="CPSS_HW_PP_INIT_STAGE_EEPROM_NOT_DONE_INT_MEM_DONE_E"/>
   <Value str="CPSS_HW_PP_INIT_STAGE_FULLY_FUNC_E"/>
  </Enum>
  <Enum name="CPSS_PORT_EGRESS_CNT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_EGRESS_CNT_MODE_ENT
 *
 * @brief Enumeration for egress counters mode bitmap
*/]]>   </Comment>
   <Value str="CPSS_EGRESS_CNT_PORT_E"/>
   <Value str="CPSS_EGRESS_CNT_VLAN_E"/>
   <Value str="CPSS_EGRESS_CNT_TC_E"/>
   <Value str="CPSS_EGRESS_CNT_DP_E"/>
  </Enum>
  <Enum name="CPSS_PORT_FEC_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_FEC_MODE_ENT
 *
 * @brief Enumeration of port's Forward Error Correction modes.
*/]]>   </Comment>
   <Value str="CPSS_PORT_FEC_MODE_ENABLED_E"/>
   <Value str="CPSS_PORT_FEC_MODE_DISABLED_E"/>
   <Value str="CPSS_PORT_RS_FEC_MODE_ENABLED_E"/>
   <Value str="CPSS_PORT_BOTH_FEC_MODE_ENABLED_E"/>
   <Value str="CPSS_PORT_RS_FEC_544_514_MODE_ENABLED_E"/>
   <Value str="CPSS_PORT_FEC_MODE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_BM_POOL_ALIGNMENT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_BM_POOL_ALIGNMENT_ENT
 *
 * @brief Define the buffer alignment supported by the module.
*/]]>   </Comment>
   <Value str="CPSS_BM_POOL_1_BYTE_ALIGNMENT_E"/>
   <Value str="CPSS_BM_POOL_4_BYTE_ALIGNMENT_E"/>
   <Value str="CPSS_BM_POOL_8_BYTE_ALIGNMENT_E"/>
   <Value str="CPSS_BM_POOL_16_BYTE_ALIGNMENT_E"/>
  </Enum>
  <Enum name="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_ENT
 *
 * @brief The types of info that the source port entry may hold.
*/]]>   </Comment>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_802_1BR_E"/>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_802_1BR_UNTAGGED_E"/>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_DSA_E"/>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_NOT_USED_E"/>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE_EVB_E"/>
   <Value str="CPSS_PX_EGRESS_SOURCE_PORT_ENTRY_TYPE___MUST_BE_LAST___E"/>
  </Enum>
  <Enum name="CPSS_LOG_POINTER_FORMAT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LOG_POINTER_FORMAT_ENT
 *
 * @brief This enum determines how pointer values will look in the log.
*/]]>   </Comment>
   <Value str="CPSS_LOG_POINTER_FORMAT_SIMPLE_E"/>
   <Value str="CPSS_LOG_POINTER_FORMAT_PREFIX_E"/>
  </Enum>
  <Enum name="CPSS_LOG_API_FORMAT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LOG_API_FORMAT_ENT
 *
 * @brief This enum defines the different formats of the log for documenting the
 * parameters values of a function.
*/]]>   </Comment>
   <Value str="CPSS_LOG_API_FORMAT_NO_PARAMS_E"/>
   <Value str="CPSS_LOG_API_FORMAT_ALL_PARAMS_E"/>
   <Value str="CPSS_LOG_API_FORMAT_NON_ZERO_PARAMS_E"/>
  </Enum>
  <Enum name="CPSS_PORT_SERDES_SPEED_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_SERDES_SPEED_ENT
 *
 * @brief Defines SERDES speed.
*/]]>   </Comment>
   <Value str="CPSS_PORT_SERDES_SPEED_1_25_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_3_125_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_3_75_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_6_25_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_5_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_4_25_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_2_5_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_5_156_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_10_3125_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_3_333_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_12_5_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_7_5_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_11_25_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_11_5625_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_10_9375_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_12_1875_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_5_625_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_12_8906_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_20_625_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_25_78125_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_27_5_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_28_05_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_26_25_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_27_1_E"/>
   <Value str="CPSS_PORT_SERDES_SPEED_NA_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TAI_TOD_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TAI_TOD_TYPE_ENT
 *
 * @brief This enum defines type of value of TOD (Time Of Day) counter.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TAI_TOD_TYPE_TRIGGER_GENERATION_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_TYPE_TRIGGER_GENERATION_MASK_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_TYPE_LOAD_VALUE_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_TYPE_CAPTURE_VALUE0_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_TYPE_CAPTURE_VALUE1_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_CTLE_BIAS_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_CTLE_BIAS_MODE_ENT
 *
 * @brief Defines ctle bias mode per port
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_CTLE_BIAS_NORMAL_E"/>
   <Value str="CPSS_PX_PORT_CTLE_BIAS_HIGH_E"/>
  </Enum>
  <Enum name="CPSS_PX_MIN_SPEED_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_MIN_SPEED_ENT
 *
 * @brief granularity speed used in some pizza algorithms
*/]]>   </Comment>
   <Value str="CPSS_PX_MIN_SPEED_INVALID_E"/>
   <Value str="CPSS_PX_MIN_SPEED_500_Mbps_E"/>
   <Value str="CPSS_PX_MIN_SPEED_1000_Mbps_E"/>
   <Value str="CPSS_PX_MIN_SPEED_2000_Mbps_E"/>
   <Value str="CPSS_PX_MIN_SPEED_5000_Mbps_E"/>
   <Value str="CPSS_PX_MIN_SPEED_10000_Mbps_E"/>
   <Value str="CPSS_PX_MIN_SPEED_MAX"/>
  </Enum>
  <Enum name="CPSS_PX_NET_RESOURCE_ERROR_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_NET_RESOURCE_ERROR_MODE_ENT
 *
 * @brief Defines the behavior in case of Rx SDMA resource error
*/]]>   </Comment>
   <Value str="CPSS_PX_NET_RESOURCE_ERROR_MODE_RETRY_E"/>
   <Value str="CPSS_PX_NET_RESOURCE_ERROR_MODE_ABORT_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PP_REG_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PP_REG_TYPE_ENT
 *
 * @brief Packet Process registers type.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PP_REG_INTERNAL_E"/>
   <Value str="CPSS_DIAG_PP_REG_PCI_CFG_E"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_STATE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_STATE_ENT
 *
 * @brief Enumeration of the port state within the port manager state machine (managed internally by CPSS).
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_STATE_RESET_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_LINK_DOWN_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_INIT_IN_PROGRESS_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_LINK_UP_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_MAC_LINK_DOWN_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_FAILURE_E"/>
   <Value str="CPSS_PORT_MANAGER_STATE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_SYSTEM_RECOVERY_STATE_ENT">
   <Comment>
<![CDATA[/*
 * Typedef enum CPSS_SYSTEM_RECOVERY_STATE_ENT
 *
 * Description: Indicates in which state system recovery process is.
 *
 * Enumerations:
 *      CPSS_SYSTEM_RECOVERY_PREPARATION_STATE_E - system is preparing to recovery process
 *      CPSS_SYSTEM_RECOVERY_INIT_STATE_E        - system is going through recovery init
 *      CPSS_SYSTEM_RECOVERY_COMPLETION_STATE_E  - system recovery is completed
 *      CPSS_SYSTEM_RECOVERY_HW_CATCH_UP_STATE_E - system is going to make hw catch up
 */]]>   </Comment>
   <Value str="CPSS_SYSTEM_RECOVERY_PREPARATION_STATE_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_INIT_STATE_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_COMPLETION_STATE_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_HW_CATCH_UP_STATE_E"/>
  </Enum>
  <Enum name="CPSS_MEMORY_DUMP_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_MEMORY_DUMP_TYPE_ENT
 *
 * @brief This enumeration defines format of memory dump
*/]]>   </Comment>
   <Value str="CPSS_MEMORY_DUMP_BYTE_E"/>
   <Value str="CPSS_MEMORY_DUMP_SHORT_E"/>
   <Value str="CPSS_MEMORY_DUMP_WORD_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_ENT
 *
 * @brief This enum defines the packet counter type.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_TOTAL_E"/>
   <Value str="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_PTP_V1_E"/>
   <Value str="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_PTP_V2_E"/>
   <Value str="CPSS_PX_PTP_TSU_PACKET_COUNTER_TYPE_ADD_CORR_TIME_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_ENT
 *
 * @brief Enumeration of how packet buffer consumption is calculated for Tail Drop
 * and Scheduling.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_BYTE_E"/>
   <Value str="CPSS_PX_PORT_TX_TAIL_DROP_BUFFER_CONSUMPTION_MODE_PACKET_E"/>
  </Enum>
  <Enum name="CPSS_SYSTEM_RECOVERY_PROCESS_ENT">
   <Comment>
<![CDATA[/*
 * Typedef enum CPSS_SYSTEM_RECOVERY_PROCESS_ENT
 *
 * Description: Indicates which system recovery process is running.
 *
 * Enumerations:
 *      CPSS_SYSTEM_RECOVERY_PROCESS_HSU_E        - HSU process
 *      CPSS_SYSTEM_RECOVERY_PROCESS_FAST_BOOT_E  - Fast Boot process
 *      CPSS_SYSTEM_RECOVERY_PROCESS_HA_E         - recovery process after HA event
 *      CPSS_SYSTEM_RECOVERY_PROCESS_NOT_ACTIVE_E - there is no active system recovery process
 *
 */]]>   </Comment>
   <Value str="CPSS_SYSTEM_RECOVERY_PROCESS_HSU_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_PROCESS_FAST_BOOT_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_PROCESS_HA_E"/>
   <Value str="CPSS_SYSTEM_RECOVERY_PROCESS_NOT_ACTIVE_E"/>
  </Enum>
  <Enum name="CPSS_PORT_XGMII_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_XGMII_MODE_ENT
 *
 * @brief Enumeration of XGMII Transmit Inter-Packet Gap (IPG) modes
 * that can be used in the Prestera system.
*/]]>   </Comment>
   <Value str="CPSS_PORT_XGMII_LAN_E"/>
   <Value str="CPSS_PORT_XGMII_WAN_E"/>
   <Value str="CPSS_PORT_XGMII_FIXED_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_TX_SHAPER_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_TX_SHAPER_MODE_ENT
 *
 * @brief Token Bucket Shaper mode
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_TX_SHAPER_BYTE_MODE_E"/>
   <Value str="CPSS_PX_PORT_TX_SHAPER_PACKET_MODE_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PG_TRANSMIT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PG_TRANSMIT_MODE_ENT
 *
 * @brief Enumeration of packet generator transmit modes.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PG_TRANSMIT_CONTINUES_E"/>
   <Value str="CPSS_DIAG_PG_TRANSMIT_SINGLE_BURST_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_ENT
 *
 * @brief Enumeration of port map type
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_PORT_FILTERING_E"/>
   <Value str="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_DESTINATION_E"/>
   <Value str="CPSS_PX_INGRESS_PORT_MAP_TABLE_TYPE_LAST"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_PFC_COUNT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_PFC_COUNT_MODE_ENT
 *
 * @brief Enumeration of PFC Counting modes.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_PFC_COUNT_BUFFERS_MODE_E"/>
   <Value str="CPSS_PX_PORT_PFC_COUNT_PACKETS_E"/>
  </Enum>
  <Enum name="CPSS_GEN_CFG_HW_DEV_NUM_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_GEN_CFG_HW_DEV_NUM_MODE_ENT
 *
 * @brief defines device's HW device usage
*/]]>   </Comment>
   <Value str="CPSS_GEN_CFG_HW_DEV_NUM_MODE_SINGLE_E"/>
   <Value str="CPSS_GEN_CFG_HW_DEV_NUM_MODE_DUAL_E"/>
  </Enum>
  <Enum name="CPSS_LED_BLINK_DUTY_CYCLE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LED_BLINK_DUTY_CYCLE_ENT
 *
 * @brief Duty cycle of LED blink signal
*/]]>   </Comment>
   <Value str="CPSS_LED_BLINK_DUTY_CYCLE_0_E"/>
   <Value str="CPSS_LED_BLINK_DUTY_CYCLE_1_E"/>
   <Value str="CPSS_LED_BLINK_DUTY_CYCLE_2_E"/>
   <Value str="CPSS_LED_BLINK_DUTY_CYCLE_3_E"/>
  </Enum>
  <Enum name="CPSS_PP_FAMILY_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PP_FAMILY_TYPE_ENT
 *
 * @brief Defines the different device families that may exist in system.
*/]]>   </Comment>
   <Value str="CPSS_PP_FAMILY_START_EXMX_E"/>
   <Value str="CPSS_PP_FAMILY_TWISTC_E"/>
   <Value str="CPSS_PP_FAMILY_TWISTD_E"/>
   <Value str="CPSS_PP_FAMILY_SAMBA_E"/>
   <Value str="CPSS_PP_FAMILY_TIGER_E"/>
   <Value str="CPSS_PP_FAMILY_END_EXMX_E"/>
   <Value str="CPSS_PP_FAMILY_START_DXSAL_E"/>
   <Value str="CPSS_PP_FAMILY_SALSA_E"/>
   <Value str="CPSS_PP_FAMILY_END_DXSAL_E"/>
   <Value str="CPSS_PP_FAMILY_START_DXCH_E"/>
   <Value str="CPSS_PP_FAMILY_CHEETAH_E"/>
   <Value str="CPSS_PP_FAMILY_CHEETAH2_E"/>
   <Value str="CPSS_PP_FAMILY_CHEETAH3_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_XCAT_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_XCAT3_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_LION_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_XCAT2_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_LION2_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_LION3_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_BOBCAT2_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_BOBCAT3_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_ALDRIN_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_AC3X_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_ALDRIN2_E"/>
   <Value str="CPSS_PP_FAMILY_DXCH_FALCON_E"/>
   <Value str="CPSS_PP_FAMILY_END_DXCH_E"/>
   <Value str="CPSS_PP_FAMILY_START_EXMXPM_E"/>
   <Value str="CPSS_PP_FAMILY_PUMA_E"/>
   <Value str="CPSS_PP_FAMILY_PUMA3_E"/>
   <Value str="CPSS_PP_FAMILY_END_EXMXPM_E"/>
   <Value str="CPSS_PX_FAMILY_START_E"/>
   <Value str="CPSS_PX_FAMILY_PIPE_E"/>
   <Value str="CPSS_PX_FAMILY_END_E"/>
   <Value str="CPSS_PP_FAMILY_LAST_E"/>
   <Value str="CPSS_MAX_FAMILY"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_ENT
 *
 * @brief Enumeration of port's SERDES CPLL output clock.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_78M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_156M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_200M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_312M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_161M_E"/>
   <Value str="CPSS_PX_PORT_CPLL_OUTPUT_FREQUENCY_164M_E"/>
  </Enum>
  <Enum name="CPSS_DP_LEVEL_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DP_LEVEL_ENT
 *
 * @brief Enumeration of drop precedence levels.
*/]]>   </Comment>
   <Value str="CPSS_DP_GREEN_E"/>
   <Value str="CPSS_DP_YELLOW_E"/>
   <Value str="CPSS_DP_RED_E"/>
   <Value str="CPSS_DP_LAST_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_PG_PACKET_PAYLOAD_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_PG_PACKET_PAYLOAD_TYPE_ENT
 *
 * @brief Enumeration of packet's payload types.
*/]]>   </Comment>
   <Value str="CPSS_DIAG_PG_PACKET_PAYLOAD_CYCLIC_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_PAYLOAD_RANDOM_E"/>
   <Value str="CPSS_DIAG_PG_PACKET_PAYLOAD_CONSTANT_E"/>
  </Enum>
  <Enum name="CPSS_NET_CPU_PORT_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_NET_CPU_PORT_MODE_ENT
 *
 * @brief Defines the possible CPU network interface modes
*/]]>   </Comment>
   <Value str="CPSS_NET_CPU_PORT_MODE_SDMA_E"/>
   <Value str="CPSS_NET_CPU_PORT_MODE_MII_E"/>
   <Value str="CPSS_NET_CPU_PORT_MODE_NONE_E"/>
  </Enum>
  <Enum name="CPSS_PM_AP_LANE_SERDES_SPEED">
   <Comment>
<![CDATA[/**
 * @brief enum used as 1st index into CPSS_PM_AP_PORT_ATTR_STC.overrideLaneParams[][]
 *        to store the parameters corres. to the serdes speeds - 10G and 25G
 *
 */]]>   </Comment>
   <Value str="CPSS_PM_AP_LANE_SERDES_SPEED_10000_E"/>
   <Value str="CPSS_PM_AP_LANE_SERDES_SPEED_25000_E"/>
   <Value str="CPSS_PM_AP_LANE_SERDES_SPEED_NONE_E"/>
  </Enum>
  <Enum name="CPSS_LOG_TIME_FORMAT_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_LOG_TIME_FORMAT_ENT
 *
 * @brief This enum describes log time format.
*/]]>   </Comment>
   <Value str="CPSS_LOG_TIME_FORMAT_DATE_TIME_E"/>
   <Value str="CPSS_LOG_TIME_FORMAT_SHORT_DATE_TIME_E"/>
   <Value str="CPSS_LOG_TIME_FORMAT_SHORT_DATE_ISO_TIME_E"/>
   <Value str="CPSS_LOG_TIME_FORMAT_NO_DATE_TIME_E"/>
  </Enum>
  <Enum name="CPSS_PX_CFG_CNTR_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_CFG_CNTR_ENT
 *
 * @brief enumerator for the MCFC counters
*/]]>   </Comment>
   <Value str="CPSS_PX_CFG_CNTR_RECEIVED_PFC_E"/>
   <Value str="CPSS_PX_CFG_CNTR_RECEIVED_MC_E"/>
   <Value str="CPSS_PX_CFG_CNTR_RECEIVED_UC_E"/>
   <Value str="CPSS_PX_CFG_CNTR_RECEIVED_QCN_E"/>
   <Value str="CPSS_PX_CFG_CNTR_RECEIVED_MC_QCN_E"/>
   <Value str="CPSS_PX_CFG_CNTR_INGRESS_DROP_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_MC_PACKETS_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_QCN_TO_PFC_MSG_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_QCN_PACKETS_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_PFC_PACKETS_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_UC_PACKETS_E"/>
   <Value str="CPSS_PX_CFG_CNTR_OUT_MC_QCN_PACKETS_E"/>
   <Value str="CPSS_PX_CFG_CNTR_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_LOGICAL_TABLE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_LOGICAL_TABLE_ENT
 *
 * @brief names of the 'logical' tables
*/]]>   </Comment>
   <Value str="CPSS_PX_LOGICAL_TABLE_INGRESS_DST_PORT_MAP_TABLE_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_INGRESS_PORT_FILTERING_TABLE_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_EGRESS_HEADER_ALTERATION_TABLE_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_TAIL_DROP_LIMITS_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_BUFFERS_MANAGER_MULTICAST_COUNTERS_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_CNC_0_COUNTERS_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_CNC_1_COUNTERS_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_TXQ_QCN_CN_SAMPLE_INTERVALS_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_PHA_SHARED_DMEM_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_PHA_FW_IMAGE_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_MANAGEMENT_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_PACKET_DATA_ECC_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_PACKET_DATA_PARITY_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_CM3_RAM_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_PHA_RAM_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_PACKET_DATA_CONTROL_ECC_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_PACKET_DATA_CONTROL_PARITY_E"/>
   <Value str="CPSS_PX_LOGICAL_INTERNAL_TABLE_DESCRIPTORS_CONTROL_E"/>
   <Value str="CPSS_PX_LOGICAL_TABLE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PORT_XG_FIXED_IPG_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_XG_FIXED_IPG_ENT
 *
 * @brief Enumeration of The IPG base used to calculate the IPG when XG
 * port is set to fixed mode.
*/]]>   </Comment>
   <Value str="CPSS_PORT_XG_FIXED_IPG_8_BYTES_E"/>
   <Value str="CPSS_PORT_XG_FIXED_IPG_12_BYTES_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_ENT
*
* @brief Data Integrity types of 'Memory usage'
*/]]>   </Comment>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_UNKNOWN_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_CONFIGURATION_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_DATA_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_MEMORY_USAGE_TYPE_STATE_E"/>
  </Enum>
  <Enum name="CPSS_IP_PROTOCOL_STACK_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_IP_PROTOCOL_STACK_ENT
 *
 * @brief type of IP stack used
*/]]>   </Comment>
   <Value str="CPSS_IP_PROTOCOL_IPV4_E"/>
   <Value str="CPSS_IP_PROTOCOL_IPV6_E"/>
   <Value str="CPSS_IP_PROTOCOL_IPV4V6_E"/>
   <Value str="CPSS_IP_PROTOCOL_FCOE_E"/>
   <Value str="CPSS_IP_PROTOCOL_ALL_E"/>
  </Enum>
  <Enum name="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_ENT
 *
 * @brief This enum defines ECC/parity error cause type
*/]]>   </Comment>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_PARITY_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_SINGLE_ECC_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_MULTIPLE_ECC_E"/>
   <Value str="CPSS_DIAG_DATA_INTEGRITY_ERROR_CAUSE_TYPE_SINGLE_AND_MULTIPLE_ECC_E"/>
  </Enum>
  <Enum name="MV_HWS_SERDES_SPEED">
   <Value str="SPEED_NA"/>
   <Value str="_1_25G"/>
   <Value str="_3_125G"/>
   <Value str="_3_33G"/>
   <Value str="_3_75G"/>
   <Value str="_4_25G"/>
   <Value str="_5G"/>
   <Value str="_6_25G"/>
   <Value str="_7_5G"/>
   <Value str="_10_3125G"/>
   <Value str="_11_25G"/>
   <Value str="_11_5625G"/>
   <Value str="_12_5G"/>
   <Value str="_10_9375G"/>
   <Value str="_12_1875G"/>
   <Value str="_5_625G"/>
   <Value str="_5_15625G"/>
   <Value str="_12_8906G"/>
   <Value str="_20_625G"/>
   <Value str="_25_78125G"/>
   <Value str="_27_5G"/>
   <Value str="_28_05G"/>
   <Value str="_26_5625G"/>
   <Value str="_28_28125G"/>
   <Value str="_26_5625G_PAM4"/>
   <Value str="_28_28125G_PAM4"/>
   <Value str="_26_25G"/>
   <Value str="_27_1G"/>
   <Value str="LAST_MV_HWS_SERDES_SPEED"/>
  </Enum>
  <Enum name="CPSS_PORT_MANAGER_CALIBRATION_TYPE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PORT_MANAGER_LOOPBACK_TYPE_ENT
 *
 * @brief Enumeration of different port loopback types
*/]]>   </Comment>
   <Value str="CPSS_PORT_MANAGER_DEFAULT_CALIBRATION_TYPE_E"/>
   <Value str="CPSS_PORT_MANAGER_OPTICAL_CALIBRATION_TYPE_E"/>
   <Value str="CPSS_PORT_MANAGER_CALIBRATION_TYPE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_ENT
 *
 * @brief Enumeration of recovery clock divider values.
*/]]>   </Comment>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_1_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_2_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_3_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_4_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_5_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_8_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_16_E"/>
   <Value str="CPSS_PX_PORT_SYNC_ETHER_RECOVERY_CLK_DIVIDER_2_5_E"/>
  </Enum>
  <Enum name="CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_ENT
 *
 * @brief Link aggregation designated port table indexing mode
*/]]>   </Comment>
   <Value str="CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_HASH_E"/>
   <Value str="CPSS_PX_INGRESS_HASH_PORT_INDEX_MODE_PRNG_E"/>
  </Enum>
  <Enum name="CPSS_PX_TABLE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_TABLE_ENT
 *
 * @brief names of the tables that requires 'tabels access mechanism'.
 * (for direct and in direct access for read/write)
 * !!!! Values of enum linked with tables DB. Tables DB must be updated
 * in any cases of changes in the enum !!!!!!
*/]]>   </Comment>
   <Value str="CPSS_PX_TABLE_BMA_PORT_MAPPING_E"/>
   <Value str="CPSS_PX_TABLE_BMA_MULTICAST_COUNTERS_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_DQ_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_DQ_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_DQ_PFC_RESPONSE_PORT_MAPPING_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_MAX_QUEUE_LIMITS_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_LIMITS_DP0_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_LIMITS_DP1_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_LIMITS_DP2_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_BUF_LIMITS_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_DESC_LIMITS_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QUEUE_TAIL_DROP_COUNTERS_Q_MAIN_BUFF_E"/>
   <Value str="CPSS_PX_TABLE_TXQ_QCN_CN_SAMPLE_INTERVALS_E"/>
   <Value str="CPSS_PX_TABLE_PFC_LLFC_COUNTERS_E"/>
   <Value str="CPSS_PX_TABLE_CNC_0_COUNTERS_E"/>
   <Value str="CPSS_PX_TABLE_CNC_1_COUNTERS_E"/>
   <Value str="CPSS_PX_TABLE_PCP_DST_PORT_MAP_TABLE_E"/>
   <Value str="CPSS_PX_TABLE_PCP_PORT_FILTERING_TABLE_E"/>
   <Value str="CPSS_PX_TABLE_PHA_HA_TABLE_E"/>
   <Value str="CPSS_PX_TABLE_PHA_SRC_PORT_DATA_E"/>
   <Value str="CPSS_PX_TABLE_PHA_TARGET_PORT_DATA_E"/>
   <Value str="CPSS_PX_TABLE_PHA_SHARED_DMEM_E"/>
   <Value str="CPSS_PX_MULTI_INSTANCE_TXQ_DQ_SHAPER_PER_PORT_PER_PRIO_TOKEN_BUCKET_CONFIG____DQ_1___E"/>
   <Value str="CPSS_PX_MULTI_INSTANCE_TXQ_DQ_SHAPER_PER_PORT_TOKEN_BUCKET_CONFIG____DQ_1___E"/>
   <Value str="CPSS_PX_MULTI_INSTANCE_TXQ_DQ_PFC_RESPONSE_PORT_MAPPING_E____DQ_1___E"/>
   <Value str="CPSS_PX_TABLE_PHA_FW_IMAGE_E"/>
   <Value str="CPSS_PX_TABLE_LAST_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_MANAGEMENT_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_PACKET_DATA_ECC_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_PACKET_DATA_PARITY_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_PACKET_DATA_CONTROL_ECC_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_PACKET_DATA_CONTROL_PARITY_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_DESCRIPTORS_CONTROL_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_CM3_RAM_E"/>
   <Value str="CPSS_PX_INTERNAL_TABLE_PHA_RAM_E"/>
   <Value str="CPSS_PX_HW_TABLE_LAST_E"/>
  </Enum>
  <Enum name="CPSS_DIRECTION_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_DIRECTION_ENT
 *
 * @brief This enum defines direction: ingress or egress
*/]]>   </Comment>
   <Value str="CPSS_DIRECTION_INGRESS_E"/>
   <Value str="CPSS_DIRECTION_EGRESS_E"/>
   <Value str="CPSS_DIRECTION_BOTH_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_ENT
 *
 * @brief This enum defines possible TOD (Time Of Day) counter functions.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_UPDATE_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_INCREMENT_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_CAPTURE_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_DECREMENT_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_GRACEFULLY_INCREMENT_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_GRACEFULLY_DECREMENT_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_FREQUENCE_UPDATE_E"/>
   <Value str="CPSS_PX_PTP_TAI_TOD_COUNTER_FUNC_NOP_E"/>
  </Enum>
  <Enum name="CPSS_PX_PTP_TAI_PULSE_IN_MODE_ENT">
   <Comment>
<![CDATA[/**
* @enum CPSS_PX_PTP_TAI_PULSE_IN_MODE_ENT
 *
 * @brief PulseIn configuration mode.
*/]]>   </Comment>
   <Value str="CPSS_PX_PTP_TAI_PULSE_IN_IS_PTP_PULSE_IN_E"/>
   <Value str="CPSS_PX_PTP_TAI_PULSE_IN_IS_PTP_CLOCK_IN_E"/>
   <Value str="CPSS_PX_PTP_TAI_PULSE_IN_DISABLED_E"/>
  </Enum>
 </Enums>
</CpssFunctionPrototypes>
<!-- /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss/mainLuaWrapper/scripts/gen_xml_funcdescr.py -i /local/store/yedidiaf/git/temp_embede_files/tmp_bld_cpssAPI/type_info_file_px -A /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss/mainLuaWrapper/data/hiddenAPIs -X /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss/mainLuaWrapper/scripts/excludelist -C /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss -F px -c -o /local/store/yedidiaf/git/temp_embede_files/tmp_bld_cpssAPI/data/px_xml/cpssAPI.xml -B /local/store/yedidiaf/git/temp_embede_files/tmp_bld_cpssAPI/data/px_xml/bad_s.xml -M /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss/mainLuaWrapper/scripts/manual_s.xml -m /local/store/yedidiaf/git/src/linux_cpss.super/cpss.super/cpss/mainLuaWrapper/scripts/lua_C_mapping -->
<!-- Generated Thu Aug 30 21:13:35 2018 -->
